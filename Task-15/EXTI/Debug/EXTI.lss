
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00003588  0000361c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080011e  0080011e  000036da  2**0
                  ALLOC
  3 .stab         000035b8  00000000  00000000  000036dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000118c  00000000  00000000  00006c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000810f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a154  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b255  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c1d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c358  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c61a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cea8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e1       	ldi	r26, 0x1E	; 30
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 32       	cpi	r26, 0x27	; 39
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <main>
      8a:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ef       	ldi	r26, 0xFD	; 253
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d ef       	ldi	r22, 0xFD	; 253
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GI_voidEnable>:
/* MCAL */
#include "GI_config.h"
#include "GI_private.h"
#include "GI_interface.h"
void GI_voidEnable(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, control_EXTI_Bit);
     ca6:	af e5       	ldi	r26, 0x5F	; 95
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e5       	ldi	r30, 0x5F	; 95
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 62       	ori	r24, 0x20	; 32
     cb2:	8c 93       	st	X, r24
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <GI_voidDisable>:
void GI_voidDisable(void)
{
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG, control_EXTI_Bit);
     cc2:	af e5       	ldi	r26, 0x5F	; 95
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ef e5       	ldi	r30, 0x5F	; 95
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <EXTI_voidEnable>:
//     CLR_BIT(EXTI_u8_MCUCR, ISC10);
//     /* 2- Enable EXTI0 ==> PIE*/
//     SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
// }
u8 EXTI_voidEnable(u8 Copy_u8EXTIIndex, u8 Copy_u8EdgeIndex)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2b 97       	sbiw	r28, 0x0b	; 11
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	8a 83       	std	Y+2, r24	; 0x02
     cec:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8EXTIIndex)
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	3b 87       	std	Y+11, r19	; 0x0b
     cfa:	2a 87       	std	Y+10, r18	; 0x0a
     cfc:	8a 85       	ldd	r24, Y+10	; 0x0a
     cfe:	9b 85       	ldd	r25, Y+11	; 0x0b
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	91 05       	cpc	r25, r1
     d04:	09 f4       	brne	.+2      	; 0xd08 <EXTI_voidEnable+0x32>
     d06:	85 c0       	rjmp	.+266    	; 0xe12 <EXTI_voidEnable+0x13c>
     d08:	2a 85       	ldd	r18, Y+10	; 0x0a
     d0a:	3b 85       	ldd	r19, Y+11	; 0x0b
     d0c:	22 30       	cpi	r18, 0x02	; 2
     d0e:	31 05       	cpc	r19, r1
     d10:	09 f4       	brne	.+2      	; 0xd14 <EXTI_voidEnable+0x3e>
     d12:	f9 c0       	rjmp	.+498    	; 0xf06 <EXTI_voidEnable+0x230>
     d14:	8a 85       	ldd	r24, Y+10	; 0x0a
     d16:	9b 85       	ldd	r25, Y+11	; 0x0b
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	09 f0       	breq	.+2      	; 0xd1e <EXTI_voidEnable+0x48>
     d1c:	22 c1       	rjmp	.+580    	; 0xf62 <EXTI_voidEnable+0x28c>
    {
    case EXTI_u8_IN0:
        switch (Copy_u8EdgeIndex)
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	39 87       	std	Y+9, r19	; 0x09
     d26:	28 87       	std	Y+8, r18	; 0x08
     d28:	88 85       	ldd	r24, Y+8	; 0x08
     d2a:	99 85       	ldd	r25, Y+9	; 0x09
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	91 05       	cpc	r25, r1
     d30:	61 f1       	breq	.+88     	; 0xd8a <EXTI_voidEnable+0xb4>
     d32:	28 85       	ldd	r18, Y+8	; 0x08
     d34:	39 85       	ldd	r19, Y+9	; 0x09
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	2c f4       	brge	.+10     	; 0xd46 <EXTI_voidEnable+0x70>
     d3c:	88 85       	ldd	r24, Y+8	; 0x08
     d3e:	99 85       	ldd	r25, Y+9	; 0x09
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	69 f0       	breq	.+26     	; 0xd5e <EXTI_voidEnable+0x88>
     d44:	64 c0       	rjmp	.+200    	; 0xe0e <EXTI_voidEnable+0x138>
     d46:	28 85       	ldd	r18, Y+8	; 0x08
     d48:	39 85       	ldd	r19, Y+9	; 0x09
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	99 f1       	breq	.+102    	; 0xdb6 <EXTI_voidEnable+0xe0>
     d50:	88 85       	ldd	r24, Y+8	; 0x08
     d52:	99 85       	ldd	r25, Y+9	; 0x09
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	91 05       	cpc	r25, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <EXTI_voidEnable+0x86>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <EXTI_voidEnable+0x10c>
     d5c:	58 c0       	rjmp	.+176    	; 0xe0e <EXTI_voidEnable+0x138>
        {
        case EXTI_u8_RAISING_EDGE:
            SET_BIT(EXTI_u8_MCUCR, 1);
     d5e:	a5 e5       	ldi	r26, 0x55	; 85
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e5 e5       	ldi	r30, 0x55	; 85
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	82 60       	ori	r24, 0x02	; 2
     d6a:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR, 0);
     d6c:	a5 e5       	ldi	r26, 0x55	; 85
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e5 e5       	ldi	r30, 0x55	; 85
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	81 60       	ori	r24, 0x01	; 1
     d78:	8c 93       	st	X, r24
            /* Enable EXTI0 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     d7a:	ab e5       	ldi	r26, 0x5B	; 91
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e5       	ldi	r30, 0x5B	; 91
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	80 64       	ori	r24, 0x40	; 64
     d86:	8c 93       	st	X, r24
     d88:	ec c0       	rjmp	.+472    	; 0xf62 <EXTI_voidEnable+0x28c>
            break;
        case EXTI_u8_FLOATING_EDGE:
            SET_BIT(EXTI_u8_MCUCR, 1);
     d8a:	a5 e5       	ldi	r26, 0x55	; 85
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e5 e5       	ldi	r30, 0x55	; 85
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	82 60       	ori	r24, 0x02	; 2
     d96:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR, 0);
     d98:	a5 e5       	ldi	r26, 0x55	; 85
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e5 e5       	ldi	r30, 0x55	; 85
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8e 7f       	andi	r24, 0xFE	; 254
     da4:	8c 93       	st	X, r24
            /* Enable EXTI0 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     da6:	ab e5       	ldi	r26, 0x5B	; 91
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e5       	ldi	r30, 0x5B	; 91
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	80 64       	ori	r24, 0x40	; 64
     db2:	8c 93       	st	X, r24
     db4:	d6 c0       	rjmp	.+428    	; 0xf62 <EXTI_voidEnable+0x28c>
            break;
        case EXTI_u8_ANY_LOGICAL_CHANGE:
            CLR_BIT(EXTI_u8_MCUCR, 1);
     db6:	a5 e5       	ldi	r26, 0x55	; 85
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e5 e5       	ldi	r30, 0x55	; 85
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8d 7f       	andi	r24, 0xFD	; 253
     dc2:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR, 0);
     dc4:	a5 e5       	ldi	r26, 0x55	; 85
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e5 e5       	ldi	r30, 0x55	; 85
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	81 60       	ori	r24, 0x01	; 1
     dd0:	8c 93       	st	X, r24
            /* Enable EXTI0 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     dd2:	ab e5       	ldi	r26, 0x5B	; 91
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	eb e5       	ldi	r30, 0x5B	; 91
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	80 64       	ori	r24, 0x40	; 64
     dde:	8c 93       	st	X, r24
     de0:	c0 c0       	rjmp	.+384    	; 0xf62 <EXTI_voidEnable+0x28c>
            break;
        case EXTI_u8_LOW_LEVEL:
            CLR_BIT(EXTI_u8_MCUCR, 1);
     de2:	a5 e5       	ldi	r26, 0x55	; 85
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e5 e5       	ldi	r30, 0x55	; 85
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8d 7f       	andi	r24, 0xFD	; 253
     dee:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR, 0);
     df0:	a5 e5       	ldi	r26, 0x55	; 85
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e5 e5       	ldi	r30, 0x55	; 85
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8e 7f       	andi	r24, 0xFE	; 254
     dfc:	8c 93       	st	X, r24
            /* Enable EXTI0 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     dfe:	ab e5       	ldi	r26, 0x5B	; 91
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	eb e5       	ldi	r30, 0x5B	; 91
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	80 64       	ori	r24, 0x40	; 64
     e0a:	8c 93       	st	X, r24
     e0c:	aa c0       	rjmp	.+340    	; 0xf62 <EXTI_voidEnable+0x28c>
            break;
        default:
            Local_u8ErrorState = STD_TYPES_NOK;
     e0e:	19 82       	std	Y+1, r1	; 0x01
     e10:	a8 c0       	rjmp	.+336    	; 0xf62 <EXTI_voidEnable+0x28c>
        }
        break;
    /*****************************************************************/
    case EXTI_u8_IN1:
        switch (Copy_u8EdgeIndex)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	3f 83       	std	Y+7, r19	; 0x07
     e1a:	2e 83       	std	Y+6, r18	; 0x06
     e1c:	8e 81       	ldd	r24, Y+6	; 0x06
     e1e:	9f 81       	ldd	r25, Y+7	; 0x07
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	91 05       	cpc	r25, r1
     e24:	61 f1       	breq	.+88     	; 0xe7e <EXTI_voidEnable+0x1a8>
     e26:	2e 81       	ldd	r18, Y+6	; 0x06
     e28:	3f 81       	ldd	r19, Y+7	; 0x07
     e2a:	22 30       	cpi	r18, 0x02	; 2
     e2c:	31 05       	cpc	r19, r1
     e2e:	2c f4       	brge	.+10     	; 0xe3a <EXTI_voidEnable+0x164>
     e30:	8e 81       	ldd	r24, Y+6	; 0x06
     e32:	9f 81       	ldd	r25, Y+7	; 0x07
     e34:	00 97       	sbiw	r24, 0x00	; 0
     e36:	69 f0       	breq	.+26     	; 0xe52 <EXTI_voidEnable+0x17c>
     e38:	64 c0       	rjmp	.+200    	; 0xf02 <EXTI_voidEnable+0x22c>
     e3a:	2e 81       	ldd	r18, Y+6	; 0x06
     e3c:	3f 81       	ldd	r19, Y+7	; 0x07
     e3e:	22 30       	cpi	r18, 0x02	; 2
     e40:	31 05       	cpc	r19, r1
     e42:	99 f1       	breq	.+102    	; 0xeaa <EXTI_voidEnable+0x1d4>
     e44:	8e 81       	ldd	r24, Y+6	; 0x06
     e46:	9f 81       	ldd	r25, Y+7	; 0x07
     e48:	83 30       	cpi	r24, 0x03	; 3
     e4a:	91 05       	cpc	r25, r1
     e4c:	09 f4       	brne	.+2      	; 0xe50 <EXTI_voidEnable+0x17a>
     e4e:	43 c0       	rjmp	.+134    	; 0xed6 <EXTI_voidEnable+0x200>
     e50:	58 c0       	rjmp	.+176    	; 0xf02 <EXTI_voidEnable+0x22c>
        {
        case EXTI_u8_RAISING_EDGE:
            SET_BIT(EXTI_u8_MCUCR, 3);
     e52:	a5 e5       	ldi	r26, 0x55	; 85
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e5       	ldi	r30, 0x55	; 85
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 60       	ori	r24, 0x08	; 8
     e5e:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR, 2);
     e60:	a5 e5       	ldi	r26, 0x55	; 85
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e5       	ldi	r30, 0x55	; 85
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	84 60       	ori	r24, 0x04	; 4
     e6c:	8c 93       	st	X, r24
            /* Enable EXTI1 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
     e6e:	ab e5       	ldi	r26, 0x5B	; 91
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	eb e5       	ldi	r30, 0x5B	; 91
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 68       	ori	r24, 0x80	; 128
     e7a:	8c 93       	st	X, r24
     e7c:	72 c0       	rjmp	.+228    	; 0xf62 <EXTI_voidEnable+0x28c>
            break;
        case EXTI_u8_FLOATING_EDGE:
            SET_BIT(EXTI_u8_MCUCR, 3);
     e7e:	a5 e5       	ldi	r26, 0x55	; 85
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e5 e5       	ldi	r30, 0x55	; 85
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	88 60       	ori	r24, 0x08	; 8
     e8a:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR, 2);
     e8c:	a5 e5       	ldi	r26, 0x55	; 85
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e5       	ldi	r30, 0x55	; 85
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8b 7f       	andi	r24, 0xFB	; 251
     e98:	8c 93       	st	X, r24
            /* Enable EXTI1 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
     e9a:	ab e5       	ldi	r26, 0x5B	; 91
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	eb e5       	ldi	r30, 0x5B	; 91
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 68       	ori	r24, 0x80	; 128
     ea6:	8c 93       	st	X, r24
     ea8:	5c c0       	rjmp	.+184    	; 0xf62 <EXTI_voidEnable+0x28c>
            break;
        case EXTI_u8_ANY_LOGICAL_CHANGE:
            CLR_BIT(EXTI_u8_MCUCR, 3);
     eaa:	a5 e5       	ldi	r26, 0x55	; 85
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e5       	ldi	r30, 0x55	; 85
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	87 7f       	andi	r24, 0xF7	; 247
     eb6:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR, 2);
     eb8:	a5 e5       	ldi	r26, 0x55	; 85
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e5       	ldi	r30, 0x55	; 85
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	84 60       	ori	r24, 0x04	; 4
     ec4:	8c 93       	st	X, r24
            /* Enable EXTI1 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
     ec6:	ab e5       	ldi	r26, 0x5B	; 91
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e5       	ldi	r30, 0x5B	; 91
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 68       	ori	r24, 0x80	; 128
     ed2:	8c 93       	st	X, r24
     ed4:	46 c0       	rjmp	.+140    	; 0xf62 <EXTI_voidEnable+0x28c>
            break;
        case EXTI_u8_LOW_LEVEL:
            CLR_BIT(EXTI_u8_MCUCR, 3);
     ed6:	a5 e5       	ldi	r26, 0x55	; 85
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e5       	ldi	r30, 0x55	; 85
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	87 7f       	andi	r24, 0xF7	; 247
     ee2:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR, 2);
     ee4:	a5 e5       	ldi	r26, 0x55	; 85
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e5 e5       	ldi	r30, 0x55	; 85
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
            /* Enable EXTI1 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
     ef2:	ab e5       	ldi	r26, 0x5B	; 91
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	eb e5       	ldi	r30, 0x5B	; 91
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 68       	ori	r24, 0x80	; 128
     efe:	8c 93       	st	X, r24
     f00:	30 c0       	rjmp	.+96     	; 0xf62 <EXTI_voidEnable+0x28c>
            break;
        default:
            Local_u8ErrorState = STD_TYPES_NOK;
     f02:	19 82       	std	Y+1, r1	; 0x01
     f04:	2e c0       	rjmp	.+92     	; 0xf62 <EXTI_voidEnable+0x28c>
        }
        break;
    /*****************************************************************/
    case EXTI_u8_IN2:
        switch (Copy_u8EdgeIndex)
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3d 83       	std	Y+5, r19	; 0x05
     f0e:	2c 83       	std	Y+4, r18	; 0x04
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	9d 81       	ldd	r25, Y+5	; 0x05
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	31 f0       	breq	.+12     	; 0xf24 <EXTI_voidEnable+0x24e>
     f18:	2c 81       	ldd	r18, Y+4	; 0x04
     f1a:	3d 81       	ldd	r19, Y+5	; 0x05
     f1c:	21 30       	cpi	r18, 0x01	; 1
     f1e:	31 05       	cpc	r19, r1
     f20:	81 f0       	breq	.+32     	; 0xf42 <EXTI_voidEnable+0x26c>
     f22:	1e c0       	rjmp	.+60     	; 0xf60 <EXTI_voidEnable+0x28a>
        {
        case EXTI_u8_RAISING_EDGE:
            SET_BIT(EXTI_u8_MCUCSR, 6);
     f24:	a4 e5       	ldi	r26, 0x54	; 84
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e4 e5       	ldi	r30, 0x54	; 84
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 64       	ori	r24, 0x40	; 64
     f30:	8c 93       	st	X, r24
            /* Enable EXTI2 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN2);
     f32:	ab e5       	ldi	r26, 0x5B	; 91
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	eb e5       	ldi	r30, 0x5B	; 91
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 62       	ori	r24, 0x20	; 32
     f3e:	8c 93       	st	X, r24
     f40:	10 c0       	rjmp	.+32     	; 0xf62 <EXTI_voidEnable+0x28c>
            break;
        case EXTI_u8_FLOATING_EDGE:
            CLR_BIT(EXTI_u8_MCUCSR, 6);
     f42:	a4 e5       	ldi	r26, 0x54	; 84
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e4 e5       	ldi	r30, 0x54	; 84
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 7b       	andi	r24, 0xBF	; 191
     f4e:	8c 93       	st	X, r24
            /* Enable EXTI2 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN2);
     f50:	ab e5       	ldi	r26, 0x5B	; 91
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	eb e5       	ldi	r30, 0x5B	; 91
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 62       	ori	r24, 0x20	; 32
     f5c:	8c 93       	st	X, r24
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <EXTI_voidEnable+0x28c>
            break;
        default:
            Local_u8ErrorState = STD_TYPES_NOK;
     f60:	19 82       	std	Y+1, r1	; 0x01
        }
        break;
    }
    return Local_u8ErrorState;
     f62:	89 81       	ldd	r24, Y+1	; 0x01
}
     f64:	2b 96       	adiw	r28, 0x0b	; 11
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <EXTI_voidDisable>:
u8 EXTI_voidDisable(u8 Copy_u8EXTIIndex)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <EXTI_voidDisable+0x6>
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <EXTI_voidDisable+0x8>
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = STD_TYPES_OK;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8EXTIIndex)
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	3c 83       	std	Y+4, r19	; 0x04
     f90:	2b 83       	std	Y+3, r18	; 0x03
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	91 05       	cpc	r25, r1
     f9a:	89 f0       	breq	.+34     	; 0xfbe <EXTI_voidDisable+0x48>
     f9c:	2b 81       	ldd	r18, Y+3	; 0x03
     f9e:	3c 81       	ldd	r19, Y+4	; 0x04
     fa0:	22 30       	cpi	r18, 0x02	; 2
     fa2:	31 05       	cpc	r19, r1
     fa4:	a1 f0       	breq	.+40     	; 0xfce <EXTI_voidDisable+0x58>
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	9c 81       	ldd	r25, Y+4	; 0x04
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	c1 f4       	brne	.+48     	; 0xfde <EXTI_voidDisable+0x68>
    {
    case EXTI_u8_IN0:
        CLR_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     fae:	ab e5       	ldi	r26, 0x5B	; 91
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e5       	ldi	r30, 0x5B	; 91
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	8f 7b       	andi	r24, 0xBF	; 191
     fba:	8c 93       	st	X, r24
     fbc:	11 c0       	rjmp	.+34     	; 0xfe0 <EXTI_voidDisable+0x6a>
        break;
    case EXTI_u8_IN1:
        CLR_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
     fbe:	ab e5       	ldi	r26, 0x5B	; 91
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	eb e5       	ldi	r30, 0x5B	; 91
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8f 77       	andi	r24, 0x7F	; 127
     fca:	8c 93       	st	X, r24
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <EXTI_voidDisable+0x6a>
        break;
    case EXTI_u8_IN2:
        CLR_BIT(EXTI_u8_GICR, EXTI_u8_PIN2);
     fce:	ab e5       	ldi	r26, 0x5B	; 91
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	eb e5       	ldi	r30, 0x5B	; 91
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8f 7d       	andi	r24, 0xDF	; 223
     fda:	8c 93       	st	X, r24
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <EXTI_voidDisable+0x6a>
        break;
    default:
        Local_u8ErrorState = STD_TYPES_NOK;
     fde:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8ErrorState;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <EXTI_u8Set_CallBack>:
/***************************************************************************/
/* Global Pointer to a function */
static void (*EXTI_pfEXTI[3])(void) = {NULL};

u8 EXTI_u8Set_CallBack(void (*lpf)(void), u8 Copy_u8EXTI_Index) // *lpf is the local pointer to the function
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <EXTI_u8Set_CallBack+0x6>
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <EXTI_u8Set_CallBack+0x8>
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9b 83       	std	Y+3, r25	; 0x03
     ffe:	8a 83       	std	Y+2, r24	; 0x02
    1000:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8EXTI_Index <= EXTI_u8_IN2) && (lpf != NULL))
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	83 30       	cpi	r24, 0x03	; 3
    100a:	88 f4       	brcc	.+34     	; 0x102e <EXTI_u8Set_CallBack+0x3e>
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	9b 81       	ldd	r25, Y+3	; 0x03
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	69 f0       	breq	.+26     	; 0x102e <EXTI_u8Set_CallBack+0x3e>
        EXTI_pfEXTI[Copy_u8EXTI_Index] = lpf;
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	fc 01       	movw	r30, r24
    1020:	e2 5e       	subi	r30, 0xE2	; 226
    1022:	fe 4f       	sbci	r31, 0xFE	; 254
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	80 83       	st	Z, r24
    102c:	01 c0       	rjmp	.+2      	; 0x1030 <EXTI_u8Set_CallBack+0x40>
    else
        Local_u8ErrorState = STD_TYPES_NOK;
    102e:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8ErrorState;
    1030:	89 81       	ldd	r24, Y+1	; 0x01
}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <__vector__1>:
/* Prototype fo ISR of EXTI0 */
void __vector__1(void) __attribute__((signal));
void __vector__1(void) // ISR(EXTI0)
{
    1040:	1f 92       	push	r1
    1042:	0f 92       	push	r0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	0f 92       	push	r0
    1048:	11 24       	eor	r1, r1
    104a:	2f 93       	push	r18
    104c:	3f 93       	push	r19
    104e:	4f 93       	push	r20
    1050:	5f 93       	push	r21
    1052:	6f 93       	push	r22
    1054:	7f 93       	push	r23
    1056:	8f 93       	push	r24
    1058:	9f 93       	push	r25
    105a:	af 93       	push	r26
    105c:	bf 93       	push	r27
    105e:	ef 93       	push	r30
    1060:	ff 93       	push	r31
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    if (EXTI_pfEXTI[EXTI_u8_IN0 != NULL]) // to make sure that pointer is got a new address, and avoid a garbage value.
    106a:	80 91 1e 01 	lds	r24, 0x011E
    106e:	90 91 1f 01 	lds	r25, 0x011F
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	29 f0       	breq	.+10     	; 0x1080 <__vector__1+0x40>
        EXTI_pfEXTI[0]();
    1076:	e0 91 1e 01 	lds	r30, 0x011E
    107a:	f0 91 1f 01 	lds	r31, 0x011F
    107e:	09 95       	icall
}
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	ff 91       	pop	r31
    1086:	ef 91       	pop	r30
    1088:	bf 91       	pop	r27
    108a:	af 91       	pop	r26
    108c:	9f 91       	pop	r25
    108e:	8f 91       	pop	r24
    1090:	7f 91       	pop	r23
    1092:	6f 91       	pop	r22
    1094:	5f 91       	pop	r21
    1096:	4f 91       	pop	r20
    1098:	3f 91       	pop	r19
    109a:	2f 91       	pop	r18
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <__vector__2>:
/* Prototype fo ISR of EXTI1 */
void __vector__2(void) __attribute__((signal));
void __vector__2(void) // ISR(EXTI1)
{
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	0f 92       	push	r0
    10ae:	11 24       	eor	r1, r1
    10b0:	2f 93       	push	r18
    10b2:	3f 93       	push	r19
    10b4:	4f 93       	push	r20
    10b6:	5f 93       	push	r21
    10b8:	6f 93       	push	r22
    10ba:	7f 93       	push	r23
    10bc:	8f 93       	push	r24
    10be:	9f 93       	push	r25
    10c0:	af 93       	push	r26
    10c2:	bf 93       	push	r27
    10c4:	ef 93       	push	r30
    10c6:	ff 93       	push	r31
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    if (EXTI_pfEXTI[EXTI_u8_IN1 != NULL]) // to make sure that pointer is got a new address, and avoid a garbage value.
    10d0:	80 91 20 01 	lds	r24, 0x0120
    10d4:	90 91 21 01 	lds	r25, 0x0121
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	29 f0       	breq	.+10     	; 0x10e6 <__vector__2+0x40>
        EXTI_pfEXTI[1]();
    10dc:	e0 91 20 01 	lds	r30, 0x0120
    10e0:	f0 91 21 01 	lds	r31, 0x0121
    10e4:	09 95       	icall
}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	ff 91       	pop	r31
    10ec:	ef 91       	pop	r30
    10ee:	bf 91       	pop	r27
    10f0:	af 91       	pop	r26
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	7f 91       	pop	r23
    10f8:	6f 91       	pop	r22
    10fa:	5f 91       	pop	r21
    10fc:	4f 91       	pop	r20
    10fe:	3f 91       	pop	r19
    1100:	2f 91       	pop	r18
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	0f 90       	pop	r0
    1108:	1f 90       	pop	r1
    110a:	18 95       	reti

0000110c <__vector__3>:
/* Prototype fo ISR of EXTI2 */
void __vector__3(void) __attribute__((signal));
void __vector__3(void) // ISR(EXTI2)
{
    110c:	1f 92       	push	r1
    110e:	0f 92       	push	r0
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	0f 92       	push	r0
    1114:	11 24       	eor	r1, r1
    1116:	2f 93       	push	r18
    1118:	3f 93       	push	r19
    111a:	4f 93       	push	r20
    111c:	5f 93       	push	r21
    111e:	6f 93       	push	r22
    1120:	7f 93       	push	r23
    1122:	8f 93       	push	r24
    1124:	9f 93       	push	r25
    1126:	af 93       	push	r26
    1128:	bf 93       	push	r27
    112a:	ef 93       	push	r30
    112c:	ff 93       	push	r31
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    if (EXTI_pfEXTI[EXTI_u8_IN2 != NULL]) // to make sure that pointer is got a new address, and avoid a garbage value.
    1136:	80 91 20 01 	lds	r24, 0x0120
    113a:	90 91 21 01 	lds	r25, 0x0121
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	29 f0       	breq	.+10     	; 0x114c <__vector__3+0x40>
        EXTI_pfEXTI[2]();
    1142:	e0 91 22 01 	lds	r30, 0x0122
    1146:	f0 91 23 01 	lds	r31, 0x0123
    114a:	09 95       	icall
}
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	ff 91       	pop	r31
    1152:	ef 91       	pop	r30
    1154:	bf 91       	pop	r27
    1156:	af 91       	pop	r26
    1158:	9f 91       	pop	r25
    115a:	8f 91       	pop	r24
    115c:	7f 91       	pop	r23
    115e:	6f 91       	pop	r22
    1160:	5f 91       	pop	r21
    1162:	4f 91       	pop	r20
    1164:	3f 91       	pop	r19
    1166:	2f 91       	pop	r18
    1168:	0f 90       	pop	r0
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	0f 90       	pop	r0
    116e:	1f 90       	pop	r1
    1170:	18 95       	reti

00001172 <DIO_voidInit>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidInit(void)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION,
    117a:	ea e3       	ldi	r30, 0x3A	; 58
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	8f e0       	ldi	r24, 0x0F	; 15
    1180:	80 83       	st	Z, r24
                           DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,
                           DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION,
                           DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);

    DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION,
    1182:	e7 e3       	ldi	r30, 0x37	; 55
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	10 82       	st	Z, r1
                           DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,
                           DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION,
                           DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);

    DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION,
    1188:	e4 e3       	ldi	r30, 0x34	; 52
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	87 e0       	ldi	r24, 0x07	; 7
    118e:	80 83       	st	Z, r24
                           DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,
                           DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION,
                           DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);

    DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION,
    1190:	e1 e3       	ldi	r30, 0x31	; 49
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	80 83       	st	Z, r24
                           DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION, DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);

    DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE,
    1198:	eb e3       	ldi	r30, 0x3B	; 59
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	80 83       	st	Z, r24
                            DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE, DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE,
    11a0:	e8 e3       	ldi	r30, 0x38	; 56
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	10 82       	st	Z, r1
                            DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE, DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);

    DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE,
    11a6:	e5 e3       	ldi	r30, 0x35	; 53
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	10 82       	st	Z, r1
                            DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE, DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);

    DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE,
    11ac:	e2 e3       	ldi	r30, 0x32	; 50
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	10 82       	st	Z, r1
                            DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE, DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
}
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <DIO_voidSetPinDirection>:
u8 DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	2e 97       	sbiw	r28, 0x0e	; 14
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	8a 83       	std	Y+2, r24	; 0x02
    11ce:	6b 83       	std	Y+3, r22	; 0x03
    11d0:	4c 83       	std	Y+4, r20	; 0x04

    u8 Local_u8ErrorState = STD_TYPES_OK;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	08 f0       	brcs	.+2      	; 0x11de <DIO_voidSetPinDirection+0x26>
    11dc:	0c c1       	rjmp	.+536    	; 0x13f6 <DIO_voidSetPinDirection+0x23e>
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	88 30       	cpi	r24, 0x08	; 8
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <DIO_voidSetPinDirection+0x2e>
    11e4:	08 c1       	rjmp	.+528    	; 0x13f6 <DIO_voidSetPinDirection+0x23e>
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	21 f0       	breq	.+8      	; 0x11f4 <DIO_voidSetPinDirection+0x3c>
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	88 23       	and	r24, r24
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <DIO_voidSetPinDirection+0x3c>
    11f2:	01 c1       	rjmp	.+514    	; 0x13f6 <DIO_voidSetPinDirection+0x23e>
    {
        switch (Copy_u8PortId)
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3e 87       	std	Y+14, r19	; 0x0e
    11fc:	2d 87       	std	Y+13, r18	; 0x0d
    11fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1200:	9e 85       	ldd	r25, Y+14	; 0x0e
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <DIO_voidSetPinDirection+0x52>
    1208:	4f c0       	rjmp	.+158    	; 0x12a8 <DIO_voidSetPinDirection+0xf0>
    120a:	2d 85       	ldd	r18, Y+13	; 0x0d
    120c:	3e 85       	ldd	r19, Y+14	; 0x0e
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	2c f4       	brge	.+10     	; 0x121e <DIO_voidSetPinDirection+0x66>
    1214:	8d 85       	ldd	r24, Y+13	; 0x0d
    1216:	9e 85       	ldd	r25, Y+14	; 0x0e
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	71 f0       	breq	.+28     	; 0x1238 <DIO_voidSetPinDirection+0x80>
    121c:	ed c0       	rjmp	.+474    	; 0x13f8 <DIO_voidSetPinDirection+0x240>
    121e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1220:	3e 85       	ldd	r19, Y+14	; 0x0e
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	09 f4       	brne	.+2      	; 0x122a <DIO_voidSetPinDirection+0x72>
    1228:	77 c0       	rjmp	.+238    	; 0x1318 <DIO_voidSetPinDirection+0x160>
    122a:	8d 85       	ldd	r24, Y+13	; 0x0d
    122c:	9e 85       	ldd	r25, Y+14	; 0x0e
    122e:	83 30       	cpi	r24, 0x03	; 3
    1230:	91 05       	cpc	r25, r1
    1232:	09 f4       	brne	.+2      	; 0x1236 <DIO_voidSetPinDirection+0x7e>
    1234:	a9 c0       	rjmp	.+338    	; 0x1388 <DIO_voidSetPinDirection+0x1d0>
    1236:	e0 c0       	rjmp	.+448    	; 0x13f8 <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PinDirection)
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3c 87       	std	Y+12, r19	; 0x0c
    1240:	2b 87       	std	Y+11, r18	; 0x0b
    1242:	8b 85       	ldd	r24, Y+11	; 0x0b
    1244:	9c 85       	ldd	r25, Y+12	; 0x0c
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	d1 f0       	breq	.+52     	; 0x127e <DIO_voidSetPinDirection+0xc6>
    124a:	2b 85       	ldd	r18, Y+11	; 0x0b
    124c:	3c 85       	ldd	r19, Y+12	; 0x0c
    124e:	21 30       	cpi	r18, 0x01	; 1
    1250:	31 05       	cpc	r19, r1
    1252:	09 f0       	breq	.+2      	; 0x1256 <DIO_voidSetPinDirection+0x9e>
    1254:	d1 c0       	rjmp	.+418    	; 0x13f8 <DIO_voidSetPinDirection+0x240>
            {
            case DIO_u8_OUTPUT:
                SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinID);
    1256:	aa e3       	ldi	r26, 0x3A	; 58
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	ea e3       	ldi	r30, 0x3A	; 58
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_voidSetPinDirection+0xbc>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_voidSetPinDirection+0xb8>
    1278:	84 2b       	or	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	bd c0       	rjmp	.+378    	; 0x13f8 <DIO_voidSetPinDirection+0x240>
                break;
            case DIO_u8_INPUT:
                CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinID);
    127e:	aa e3       	ldi	r26, 0x3A	; 58
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ea e3       	ldi	r30, 0x3A	; 58
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_voidSetPinDirection+0xe4>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_voidSetPinDirection+0xe0>
    12a0:	80 95       	com	r24
    12a2:	84 23       	and	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	a8 c0       	rjmp	.+336    	; 0x13f8 <DIO_voidSetPinDirection+0x240>
                break;
            }

            break;
        case DIO_u8_PORTB:
            switch (Copy_u8PinDirection)
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	3a 87       	std	Y+10, r19	; 0x0a
    12b0:	29 87       	std	Y+9, r18	; 0x09
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	d1 f0       	breq	.+52     	; 0x12ee <DIO_voidSetPinDirection+0x136>
    12ba:	29 85       	ldd	r18, Y+9	; 0x09
    12bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    12be:	21 30       	cpi	r18, 0x01	; 1
    12c0:	31 05       	cpc	r19, r1
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <DIO_voidSetPinDirection+0x10e>
    12c4:	99 c0       	rjmp	.+306    	; 0x13f8 <DIO_voidSetPinDirection+0x240>
            {
            case DIO_u8_OUTPUT:
                SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinID);
    12c6:	a7 e3       	ldi	r26, 0x37	; 55
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e7 e3       	ldi	r30, 0x37	; 55
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_voidSetPinDirection+0x12c>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_voidSetPinDirection+0x128>
    12e8:	84 2b       	or	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	85 c0       	rjmp	.+266    	; 0x13f8 <DIO_voidSetPinDirection+0x240>
                break;
            case DIO_u8_INPUT:
                CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinID);
    12ee:	a7 e3       	ldi	r26, 0x37	; 55
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e7 e3       	ldi	r30, 0x37	; 55
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	48 2f       	mov	r20, r24
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_voidSetPinDirection+0x154>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <DIO_voidSetPinDirection+0x150>
    1310:	80 95       	com	r24
    1312:	84 23       	and	r24, r20
    1314:	8c 93       	st	X, r24
    1316:	70 c0       	rjmp	.+224    	; 0x13f8 <DIO_voidSetPinDirection+0x240>
                break;
            }

            break;
        case DIO_u8_PORTC:
            switch (Copy_u8PinDirection)
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	38 87       	std	Y+8, r19	; 0x08
    1320:	2f 83       	std	Y+7, r18	; 0x07
    1322:	8f 81       	ldd	r24, Y+7	; 0x07
    1324:	98 85       	ldd	r25, Y+8	; 0x08
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	d1 f0       	breq	.+52     	; 0x135e <DIO_voidSetPinDirection+0x1a6>
    132a:	2f 81       	ldd	r18, Y+7	; 0x07
    132c:	38 85       	ldd	r19, Y+8	; 0x08
    132e:	21 30       	cpi	r18, 0x01	; 1
    1330:	31 05       	cpc	r19, r1
    1332:	09 f0       	breq	.+2      	; 0x1336 <DIO_voidSetPinDirection+0x17e>
    1334:	61 c0       	rjmp	.+194    	; 0x13f8 <DIO_voidSetPinDirection+0x240>
            {
            case DIO_u8_OUTPUT:
                SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinID);
    1336:	a4 e3       	ldi	r26, 0x34	; 52
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e4 e3       	ldi	r30, 0x34	; 52
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_voidSetPinDirection+0x19c>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_voidSetPinDirection+0x198>
    1358:	84 2b       	or	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	4d c0       	rjmp	.+154    	; 0x13f8 <DIO_voidSetPinDirection+0x240>
                break;
            case DIO_u8_INPUT:
                CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinID);
    135e:	a4 e3       	ldi	r26, 0x34	; 52
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e4 e3       	ldi	r30, 0x34	; 52
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_voidSetPinDirection+0x1c4>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_voidSetPinDirection+0x1c0>
    1380:	80 95       	com	r24
    1382:	84 23       	and	r24, r20
    1384:	8c 93       	st	X, r24
    1386:	38 c0       	rjmp	.+112    	; 0x13f8 <DIO_voidSetPinDirection+0x240>
                break;
            }

            break;
        case DIO_u8_PORTD:
            switch (Copy_u8PinDirection)
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3e 83       	std	Y+6, r19	; 0x06
    1390:	2d 83       	std	Y+5, r18	; 0x05
    1392:	8d 81       	ldd	r24, Y+5	; 0x05
    1394:	9e 81       	ldd	r25, Y+6	; 0x06
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	c9 f0       	breq	.+50     	; 0x13cc <DIO_voidSetPinDirection+0x214>
    139a:	2d 81       	ldd	r18, Y+5	; 0x05
    139c:	3e 81       	ldd	r19, Y+6	; 0x06
    139e:	21 30       	cpi	r18, 0x01	; 1
    13a0:	31 05       	cpc	r19, r1
    13a2:	51 f5       	brne	.+84     	; 0x13f8 <DIO_voidSetPinDirection+0x240>
            {
            case DIO_u8_OUTPUT:
                SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinID);
    13a4:	a1 e3       	ldi	r26, 0x31	; 49
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e1 e3       	ldi	r30, 0x31	; 49
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_voidSetPinDirection+0x20a>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_voidSetPinDirection+0x206>
    13c6:	84 2b       	or	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	16 c0       	rjmp	.+44     	; 0x13f8 <DIO_voidSetPinDirection+0x240>
                break;
            case DIO_u8_INPUT:
                CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinID);
    13cc:	a1 e3       	ldi	r26, 0x31	; 49
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e1 e3       	ldi	r30, 0x31	; 49
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_voidSetPinDirection+0x232>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_voidSetPinDirection+0x22e>
    13ee:	80 95       	com	r24
    13f0:	84 23       	and	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <DIO_voidSetPinDirection+0x240>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    13f6:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ErrorState;
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fa:	2e 96       	adiw	r28, 0x0e	; 14
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <DIO_voidSetPinValue>:
u8 DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_PinID, u8 Copy_u8PinValue)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	2e 97       	sbiw	r28, 0x0e	; 14
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	8a 83       	std	Y+2, r24	; 0x02
    1422:	6b 83       	std	Y+3, r22	; 0x03
    1424:	4c 83       	std	Y+4, r20	; 0x04
    u8 local_u8ErrorState = STD_TYPES_OK;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_PinID <= DIO_u8_PIN7)
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	88 30       	cpi	r24, 0x08	; 8
    142e:	08 f0       	brcs	.+2      	; 0x1432 <DIO_voidSetPinValue+0x26>
    1430:	08 c1       	rjmp	.+528    	; 0x1642 <DIO_voidSetPinValue+0x236>
    {

        switch (Copy_u8PortId)
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3e 87       	std	Y+14, r19	; 0x0e
    143a:	2d 87       	std	Y+13, r18	; 0x0d
    143c:	8d 85       	ldd	r24, Y+13	; 0x0d
    143e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	91 05       	cpc	r25, r1
    1444:	09 f4       	brne	.+2      	; 0x1448 <DIO_voidSetPinValue+0x3c>
    1446:	50 c0       	rjmp	.+160    	; 0x14e8 <DIO_voidSetPinValue+0xdc>
    1448:	2d 85       	ldd	r18, Y+13	; 0x0d
    144a:	3e 85       	ldd	r19, Y+14	; 0x0e
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	2c f4       	brge	.+10     	; 0x145c <DIO_voidSetPinValue+0x50>
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	9e 85       	ldd	r25, Y+14	; 0x0e
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	71 f0       	breq	.+28     	; 0x1476 <DIO_voidSetPinValue+0x6a>
    145a:	f1 c0       	rjmp	.+482    	; 0x163e <DIO_voidSetPinValue+0x232>
    145c:	2d 85       	ldd	r18, Y+13	; 0x0d
    145e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	09 f4       	brne	.+2      	; 0x1468 <DIO_voidSetPinValue+0x5c>
    1466:	79 c0       	rjmp	.+242    	; 0x155a <DIO_voidSetPinValue+0x14e>
    1468:	8d 85       	ldd	r24, Y+13	; 0x0d
    146a:	9e 85       	ldd	r25, Y+14	; 0x0e
    146c:	83 30       	cpi	r24, 0x03	; 3
    146e:	91 05       	cpc	r25, r1
    1470:	09 f4       	brne	.+2      	; 0x1474 <DIO_voidSetPinValue+0x68>
    1472:	ac c0       	rjmp	.+344    	; 0x15cc <DIO_voidSetPinValue+0x1c0>
    1474:	e4 c0       	rjmp	.+456    	; 0x163e <DIO_voidSetPinValue+0x232>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PinValue)
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3c 87       	std	Y+12, r19	; 0x0c
    147e:	2b 87       	std	Y+11, r18	; 0x0b
    1480:	8b 85       	ldd	r24, Y+11	; 0x0b
    1482:	9c 85       	ldd	r25, Y+12	; 0x0c
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	c9 f0       	breq	.+50     	; 0x14ba <DIO_voidSetPinValue+0xae>
    1488:	2b 85       	ldd	r18, Y+11	; 0x0b
    148a:	3c 85       	ldd	r19, Y+12	; 0x0c
    148c:	21 30       	cpi	r18, 0x01	; 1
    148e:	31 05       	cpc	r19, r1
    1490:	49 f5       	brne	.+82     	; 0x14e4 <DIO_voidSetPinValue+0xd8>
            {
            case DIO_u8_HIGH:
                SET_BIT(DIO_u8_PORTA_REG, Copy_PinID);
    1492:	ab e3       	ldi	r26, 0x3B	; 59
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	eb e3       	ldi	r30, 0x3B	; 59
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_voidSetPinValue+0xa4>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_voidSetPinValue+0xa0>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	c5 c0       	rjmp	.+394    	; 0x1644 <DIO_voidSetPinValue+0x238>
                break;
            case DIO_u8_LOW:
                CLR_BIT(DIO_u8_PORTA_REG, Copy_PinID);
    14ba:	ab e3       	ldi	r26, 0x3B	; 59
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	eb e3       	ldi	r30, 0x3B	; 59
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_voidSetPinValue+0xcc>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_voidSetPinValue+0xc8>
    14dc:	80 95       	com	r24
    14de:	84 23       	and	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	b0 c0       	rjmp	.+352    	; 0x1644 <DIO_voidSetPinValue+0x238>
                break;
            default:
                local_u8ErrorState = STD_TYPES_NOK;
    14e4:	19 82       	std	Y+1, r1	; 0x01
    14e6:	ae c0       	rjmp	.+348    	; 0x1644 <DIO_voidSetPinValue+0x238>
                break;
            }
            break;
        case DIO_u8_PORTB:
            switch (Copy_u8PinValue)
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	3a 87       	std	Y+10, r19	; 0x0a
    14f0:	29 87       	std	Y+9, r18	; 0x09
    14f2:	89 85       	ldd	r24, Y+9	; 0x09
    14f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	c9 f0       	breq	.+50     	; 0x152c <DIO_voidSetPinValue+0x120>
    14fa:	29 85       	ldd	r18, Y+9	; 0x09
    14fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    14fe:	21 30       	cpi	r18, 0x01	; 1
    1500:	31 05       	cpc	r19, r1
    1502:	49 f5       	brne	.+82     	; 0x1556 <DIO_voidSetPinValue+0x14a>
            {
            case DIO_u8_HIGH:
                SET_BIT(DIO_u8_PORTB_REG, Copy_PinID);
    1504:	a8 e3       	ldi	r26, 0x38	; 56
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e8 e3       	ldi	r30, 0x38	; 56
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_voidSetPinValue+0x116>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DIO_voidSetPinValue+0x112>
    1526:	84 2b       	or	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	8c c0       	rjmp	.+280    	; 0x1644 <DIO_voidSetPinValue+0x238>
                break;
            case DIO_u8_LOW:
                CLR_BIT(DIO_u8_PORTB_REG, Copy_PinID);
    152c:	a8 e3       	ldi	r26, 0x38	; 56
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e8 e3       	ldi	r30, 0x38	; 56
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_voidSetPinValue+0x13e>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_voidSetPinValue+0x13a>
    154e:	80 95       	com	r24
    1550:	84 23       	and	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	77 c0       	rjmp	.+238    	; 0x1644 <DIO_voidSetPinValue+0x238>
                break;
            default:
                local_u8ErrorState = STD_TYPES_NOK;
    1556:	19 82       	std	Y+1, r1	; 0x01
    1558:	75 c0       	rjmp	.+234    	; 0x1644 <DIO_voidSetPinValue+0x238>
                break;
            }
            break;

        case DIO_u8_PORTC:
            switch (Copy_u8PinValue)
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	38 87       	std	Y+8, r19	; 0x08
    1562:	2f 83       	std	Y+7, r18	; 0x07
    1564:	8f 81       	ldd	r24, Y+7	; 0x07
    1566:	98 85       	ldd	r25, Y+8	; 0x08
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	c9 f0       	breq	.+50     	; 0x159e <DIO_voidSetPinValue+0x192>
    156c:	2f 81       	ldd	r18, Y+7	; 0x07
    156e:	38 85       	ldd	r19, Y+8	; 0x08
    1570:	21 30       	cpi	r18, 0x01	; 1
    1572:	31 05       	cpc	r19, r1
    1574:	49 f5       	brne	.+82     	; 0x15c8 <DIO_voidSetPinValue+0x1bc>
            {
            case DIO_u8_HIGH:
                SET_BIT(DIO_u8_PORTC_REG, Copy_PinID);
    1576:	a5 e3       	ldi	r26, 0x35	; 53
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e5 e3       	ldi	r30, 0x35	; 53
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 2e       	mov	r0, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <DIO_voidSetPinValue+0x188>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <DIO_voidSetPinValue+0x184>
    1598:	84 2b       	or	r24, r20
    159a:	8c 93       	st	X, r24
    159c:	53 c0       	rjmp	.+166    	; 0x1644 <DIO_voidSetPinValue+0x238>
                break;
            case DIO_u8_LOW:
                CLR_BIT(DIO_u8_PORTC_REG, Copy_PinID);
    159e:	a5 e3       	ldi	r26, 0x35	; 53
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e3       	ldi	r30, 0x35	; 53
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <DIO_voidSetPinValue+0x1b0>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <DIO_voidSetPinValue+0x1ac>
    15c0:	80 95       	com	r24
    15c2:	84 23       	and	r24, r20
    15c4:	8c 93       	st	X, r24
    15c6:	3e c0       	rjmp	.+124    	; 0x1644 <DIO_voidSetPinValue+0x238>
                break;
            default:
                local_u8ErrorState = STD_TYPES_NOK;
    15c8:	19 82       	std	Y+1, r1	; 0x01
    15ca:	3c c0       	rjmp	.+120    	; 0x1644 <DIO_voidSetPinValue+0x238>
                break;
            }
            break;

        case DIO_u8_PORTD:
            switch (Copy_u8PinValue)
    15cc:	8c 81       	ldd	r24, Y+4	; 0x04
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3e 83       	std	Y+6, r19	; 0x06
    15d4:	2d 83       	std	Y+5, r18	; 0x05
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	c9 f0       	breq	.+50     	; 0x1610 <DIO_voidSetPinValue+0x204>
    15de:	2d 81       	ldd	r18, Y+5	; 0x05
    15e0:	3e 81       	ldd	r19, Y+6	; 0x06
    15e2:	21 30       	cpi	r18, 0x01	; 1
    15e4:	31 05       	cpc	r19, r1
    15e6:	49 f5       	brne	.+82     	; 0x163a <DIO_voidSetPinValue+0x22e>
            {
            case DIO_u8_HIGH:
                SET_BIT(DIO_u8_PORTD_REG, Copy_PinID);
    15e8:	a2 e3       	ldi	r26, 0x32	; 50
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e2 e3       	ldi	r30, 0x32	; 50
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	48 2f       	mov	r20, r24
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	02 2e       	mov	r0, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_voidSetPinValue+0x1fa>
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	0a 94       	dec	r0
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_voidSetPinValue+0x1f6>
    160a:	84 2b       	or	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	1a c0       	rjmp	.+52     	; 0x1644 <DIO_voidSetPinValue+0x238>
                break;
            case DIO_u8_LOW:
                CLR_BIT(DIO_u8_PORTD_REG, Copy_PinID);
    1610:	a2 e3       	ldi	r26, 0x32	; 50
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e2 e3       	ldi	r30, 0x32	; 50
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_voidSetPinValue+0x222>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_voidSetPinValue+0x21e>
    1632:	80 95       	com	r24
    1634:	84 23       	and	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	05 c0       	rjmp	.+10     	; 0x1644 <DIO_voidSetPinValue+0x238>
                break;
            default:
                local_u8ErrorState = STD_TYPES_NOK;
    163a:	19 82       	std	Y+1, r1	; 0x01
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <DIO_voidSetPinValue+0x238>
                break;
            }
            break;

        default:
            local_u8ErrorState = STD_TYPES_NOK;
    163e:	19 82       	std	Y+1, r1	; 0x01
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <DIO_voidSetPinValue+0x238>
        }
    }
    else
    {
        local_u8ErrorState = STD_TYPES_NOK;
    1642:	19 82       	std	Y+1, r1	; 0x01
    }
    return local_u8ErrorState;
    1644:	89 81       	ldd	r24, Y+1	; 0x01
}
    1646:	2e 96       	adiw	r28, 0x0e	; 14
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_PinID, u8 *Copy_pu8PinValue)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	28 97       	sbiw	r28, 0x08	; 8
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	8b 83       	std	Y+3, r24	; 0x03
    166e:	6c 83       	std	Y+4, r22	; 0x04
    1670:	5e 83       	std	Y+6, r21	; 0x06
    1672:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue;
    if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_PinID <= DIO_u8_PIN7) && (Copy_pu8PinValue != NULL))
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	84 30       	cpi	r24, 0x04	; 4
    167c:	08 f0       	brcs	.+2      	; 0x1680 <DIO_u8GetPinValue+0x28>
    167e:	9f c0       	rjmp	.+318    	; 0x17be <DIO_u8GetPinValue+0x166>
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	88 30       	cpi	r24, 0x08	; 8
    1684:	08 f0       	brcs	.+2      	; 0x1688 <DIO_u8GetPinValue+0x30>
    1686:	9b c0       	rjmp	.+310    	; 0x17be <DIO_u8GetPinValue+0x166>
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	09 f4       	brne	.+2      	; 0x1692 <DIO_u8GetPinValue+0x3a>
    1690:	96 c0       	rjmp	.+300    	; 0x17be <DIO_u8GetPinValue+0x166>
    {
        switch (Copy_u8PortId)
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	38 87       	std	Y+8, r19	; 0x08
    169a:	2f 83       	std	Y+7, r18	; 0x07
    169c:	4f 81       	ldd	r20, Y+7	; 0x07
    169e:	58 85       	ldd	r21, Y+8	; 0x08
    16a0:	41 30       	cpi	r20, 0x01	; 1
    16a2:	51 05       	cpc	r21, r1
    16a4:	a9 f1       	breq	.+106    	; 0x1710 <DIO_u8GetPinValue+0xb8>
    16a6:	8f 81       	ldd	r24, Y+7	; 0x07
    16a8:	98 85       	ldd	r25, Y+8	; 0x08
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	91 05       	cpc	r25, r1
    16ae:	34 f4       	brge	.+12     	; 0x16bc <DIO_u8GetPinValue+0x64>
    16b0:	2f 81       	ldd	r18, Y+7	; 0x07
    16b2:	38 85       	ldd	r19, Y+8	; 0x08
    16b4:	21 15       	cp	r18, r1
    16b6:	31 05       	cpc	r19, r1
    16b8:	71 f0       	breq	.+28     	; 0x16d6 <DIO_u8GetPinValue+0x7e>
    16ba:	82 c0       	rjmp	.+260    	; 0x17c0 <DIO_u8GetPinValue+0x168>
    16bc:	4f 81       	ldd	r20, Y+7	; 0x07
    16be:	58 85       	ldd	r21, Y+8	; 0x08
    16c0:	42 30       	cpi	r20, 0x02	; 2
    16c2:	51 05       	cpc	r21, r1
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <DIO_u8GetPinValue+0x70>
    16c6:	41 c0       	rjmp	.+130    	; 0x174a <DIO_u8GetPinValue+0xf2>
    16c8:	8f 81       	ldd	r24, Y+7	; 0x07
    16ca:	98 85       	ldd	r25, Y+8	; 0x08
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	91 05       	cpc	r25, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <DIO_u8GetPinValue+0x7c>
    16d2:	58 c0       	rjmp	.+176    	; 0x1784 <DIO_u8GetPinValue+0x12c>
    16d4:	75 c0       	rjmp	.+234    	; 0x17c0 <DIO_u8GetPinValue+0x168>
        {
        case DIO_u8_PORTA:
            Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_PinID);
    16d6:	e9 e3       	ldi	r30, 0x39	; 57
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a9 01       	movw	r20, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <DIO_u8GetPinValue+0x96>
    16ea:	55 95       	asr	r21
    16ec:	47 95       	ror	r20
    16ee:	8a 95       	dec	r24
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <DIO_u8GetPinValue+0x92>
    16f2:	ca 01       	movw	r24, r20
    16f4:	81 70       	andi	r24, 0x01	; 1
    16f6:	89 83       	std	Y+1, r24	; 0x01
            if (Local_u8PinValue == 0)
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	88 23       	and	r24, r24
    16fc:	21 f4       	brne	.+8      	; 0x1706 <DIO_u8GetPinValue+0xae>
            {
                *Copy_pu8PinValue = DIO_u8_LOW;
    16fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1700:	fe 81       	ldd	r31, Y+6	; 0x06
    1702:	10 82       	st	Z, r1
    1704:	5d c0       	rjmp	.+186    	; 0x17c0 <DIO_u8GetPinValue+0x168>
            }
            else
            {
                *Copy_pu8PinValue = DIO_u8_HIGH;
    1706:	ed 81       	ldd	r30, Y+5	; 0x05
    1708:	fe 81       	ldd	r31, Y+6	; 0x06
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	80 83       	st	Z, r24
    170e:	58 c0       	rjmp	.+176    	; 0x17c0 <DIO_u8GetPinValue+0x168>
            }

            break;
        case DIO_u8_PORTB:
            Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_PinID);
    1710:	e6 e3       	ldi	r30, 0x36	; 54
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a9 01       	movw	r20, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_u8GetPinValue+0xd0>
    1724:	55 95       	asr	r21
    1726:	47 95       	ror	r20
    1728:	8a 95       	dec	r24
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_u8GetPinValue+0xcc>
    172c:	ca 01       	movw	r24, r20
    172e:	81 70       	andi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01
            if (Local_u8PinValue == 0)
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	88 23       	and	r24, r24
    1736:	21 f4       	brne	.+8      	; 0x1740 <DIO_u8GetPinValue+0xe8>
            {
                *Copy_pu8PinValue = DIO_u8_LOW;
    1738:	ed 81       	ldd	r30, Y+5	; 0x05
    173a:	fe 81       	ldd	r31, Y+6	; 0x06
    173c:	10 82       	st	Z, r1
    173e:	40 c0       	rjmp	.+128    	; 0x17c0 <DIO_u8GetPinValue+0x168>
            }
            else
            {
                *Copy_pu8PinValue = DIO_u8_HIGH;
    1740:	ed 81       	ldd	r30, Y+5	; 0x05
    1742:	fe 81       	ldd	r31, Y+6	; 0x06
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	80 83       	st	Z, r24
    1748:	3b c0       	rjmp	.+118    	; 0x17c0 <DIO_u8GetPinValue+0x168>
            }

            break;
        case DIO_u8_PORTC:
            Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_PinID);
    174a:	e3 e3       	ldi	r30, 0x33	; 51
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	8c 81       	ldd	r24, Y+4	; 0x04
    1756:	88 2f       	mov	r24, r24
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a9 01       	movw	r20, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <DIO_u8GetPinValue+0x10a>
    175e:	55 95       	asr	r21
    1760:	47 95       	ror	r20
    1762:	8a 95       	dec	r24
    1764:	e2 f7       	brpl	.-8      	; 0x175e <DIO_u8GetPinValue+0x106>
    1766:	ca 01       	movw	r24, r20
    1768:	81 70       	andi	r24, 0x01	; 1
    176a:	89 83       	std	Y+1, r24	; 0x01
            if (Local_u8PinValue == 0)
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	88 23       	and	r24, r24
    1770:	21 f4       	brne	.+8      	; 0x177a <DIO_u8GetPinValue+0x122>
            {
                *Copy_pu8PinValue = DIO_u8_LOW;
    1772:	ed 81       	ldd	r30, Y+5	; 0x05
    1774:	fe 81       	ldd	r31, Y+6	; 0x06
    1776:	10 82       	st	Z, r1
    1778:	23 c0       	rjmp	.+70     	; 0x17c0 <DIO_u8GetPinValue+0x168>
            }
            else
            {
                *Copy_pu8PinValue = DIO_u8_HIGH;
    177a:	ed 81       	ldd	r30, Y+5	; 0x05
    177c:	fe 81       	ldd	r31, Y+6	; 0x06
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	80 83       	st	Z, r24
    1782:	1e c0       	rjmp	.+60     	; 0x17c0 <DIO_u8GetPinValue+0x168>
            }

            break;
        case DIO_u8_PORTD:
            Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_PinID);
    1784:	e0 e3       	ldi	r30, 0x30	; 48
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a9 01       	movw	r20, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <DIO_u8GetPinValue+0x144>
    1798:	55 95       	asr	r21
    179a:	47 95       	ror	r20
    179c:	8a 95       	dec	r24
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <DIO_u8GetPinValue+0x140>
    17a0:	ca 01       	movw	r24, r20
    17a2:	81 70       	andi	r24, 0x01	; 1
    17a4:	89 83       	std	Y+1, r24	; 0x01
            if (Local_u8PinValue == 0)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	88 23       	and	r24, r24
    17aa:	21 f4       	brne	.+8      	; 0x17b4 <DIO_u8GetPinValue+0x15c>
            {
                *Copy_pu8PinValue = DIO_u8_LOW;
    17ac:	ed 81       	ldd	r30, Y+5	; 0x05
    17ae:	fe 81       	ldd	r31, Y+6	; 0x06
    17b0:	10 82       	st	Z, r1
    17b2:	06 c0       	rjmp	.+12     	; 0x17c0 <DIO_u8GetPinValue+0x168>
            }
            else
            {
                *Copy_pu8PinValue = DIO_u8_HIGH;
    17b4:	ed 81       	ldd	r30, Y+5	; 0x05
    17b6:	fe 81       	ldd	r31, Y+6	; 0x06
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	80 83       	st	Z, r24
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <DIO_u8GetPinValue+0x168>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    17be:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ErrorState;
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17c2:	28 96       	adiw	r28, 0x08	; 8
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	2d 97       	sbiw	r28, 0x0d	; 13
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	8a 83       	std	Y+2, r24	; 0x02
    17ea:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	21 f0       	breq	.+8      	; 0x17fe <DIO_u8SetPortDirection+0x2a>
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	88 23       	and	r24, r24
    17fa:	09 f0       	breq	.+2      	; 0x17fe <DIO_u8SetPortDirection+0x2a>
    17fc:	7f c0       	rjmp	.+254    	; 0x18fc <DIO_u8SetPortDirection+0x128>
    {
        switch (Copy_u8PortID)
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	3d 87       	std	Y+13, r19	; 0x0d
    1806:	2c 87       	std	Y+12, r18	; 0x0c
    1808:	8c 85       	ldd	r24, Y+12	; 0x0c
    180a:	9d 85       	ldd	r25, Y+13	; 0x0d
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	91 05       	cpc	r25, r1
    1810:	71 f1       	breq	.+92     	; 0x186e <DIO_u8SetPortDirection+0x9a>
    1812:	2c 85       	ldd	r18, Y+12	; 0x0c
    1814:	3d 85       	ldd	r19, Y+13	; 0x0d
    1816:	22 30       	cpi	r18, 0x02	; 2
    1818:	31 05       	cpc	r19, r1
    181a:	2c f4       	brge	.+10     	; 0x1826 <DIO_u8SetPortDirection+0x52>
    181c:	8c 85       	ldd	r24, Y+12	; 0x0c
    181e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	69 f0       	breq	.+26     	; 0x183e <DIO_u8SetPortDirection+0x6a>
    1824:	69 c0       	rjmp	.+210    	; 0x18f8 <DIO_u8SetPortDirection+0x124>
    1826:	2c 85       	ldd	r18, Y+12	; 0x0c
    1828:	3d 85       	ldd	r19, Y+13	; 0x0d
    182a:	22 30       	cpi	r18, 0x02	; 2
    182c:	31 05       	cpc	r19, r1
    182e:	b1 f1       	breq	.+108    	; 0x189c <DIO_u8SetPortDirection+0xc8>
    1830:	8c 85       	ldd	r24, Y+12	; 0x0c
    1832:	9d 85       	ldd	r25, Y+13	; 0x0d
    1834:	83 30       	cpi	r24, 0x03	; 3
    1836:	91 05       	cpc	r25, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <DIO_u8SetPortDirection+0x68>
    183a:	47 c0       	rjmp	.+142    	; 0x18ca <DIO_u8SetPortDirection+0xf6>
    183c:	5d c0       	rjmp	.+186    	; 0x18f8 <DIO_u8SetPortDirection+0x124>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PortDirection)
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	3b 87       	std	Y+11, r19	; 0x0b
    1846:	2a 87       	std	Y+10, r18	; 0x0a
    1848:	8a 85       	ldd	r24, Y+10	; 0x0a
    184a:	9b 85       	ldd	r25, Y+11	; 0x0b
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	59 f0       	breq	.+22     	; 0x1866 <DIO_u8SetPortDirection+0x92>
    1850:	2a 85       	ldd	r18, Y+10	; 0x0a
    1852:	3b 85       	ldd	r19, Y+11	; 0x0b
    1854:	21 30       	cpi	r18, 0x01	; 1
    1856:	31 05       	cpc	r19, r1
    1858:	09 f0       	breq	.+2      	; 0x185c <DIO_u8SetPortDirection+0x88>
    185a:	51 c0       	rjmp	.+162    	; 0x18fe <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRA_REG = 0xff;
    185c:	ea e3       	ldi	r30, 0x3A	; 58
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	8f ef       	ldi	r24, 0xFF	; 255
    1862:	80 83       	st	Z, r24
    1864:	4c c0       	rjmp	.+152    	; 0x18fe <DIO_u8SetPortDirection+0x12a>
                break;
            case DIO_u8_INPUT:
                DIO_u8_DDRA_REG = 0x00;
    1866:	ea e3       	ldi	r30, 0x3A	; 58
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	10 82       	st	Z, r1
    186c:	48 c0       	rjmp	.+144    	; 0x18fe <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
        case DIO_u8_PORTB:
            switch (Copy_u8PortDirection)
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	39 87       	std	Y+9, r19	; 0x09
    1876:	28 87       	std	Y+8, r18	; 0x08
    1878:	88 85       	ldd	r24, Y+8	; 0x08
    187a:	99 85       	ldd	r25, Y+9	; 0x09
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	51 f0       	breq	.+20     	; 0x1894 <DIO_u8SetPortDirection+0xc0>
    1880:	28 85       	ldd	r18, Y+8	; 0x08
    1882:	39 85       	ldd	r19, Y+9	; 0x09
    1884:	21 30       	cpi	r18, 0x01	; 1
    1886:	31 05       	cpc	r19, r1
    1888:	d1 f5       	brne	.+116    	; 0x18fe <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRB_REG = 0xff;
    188a:	e7 e3       	ldi	r30, 0x37	; 55
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8f ef       	ldi	r24, 0xFF	; 255
    1890:	80 83       	st	Z, r24
    1892:	35 c0       	rjmp	.+106    	; 0x18fe <DIO_u8SetPortDirection+0x12a>
                break;
            case DIO_u8_INPUT:
                DIO_u8_DDRB_REG = 0x00;
    1894:	e7 e3       	ldi	r30, 0x37	; 55
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	10 82       	st	Z, r1
    189a:	31 c0       	rjmp	.+98     	; 0x18fe <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
        case DIO_u8_PORTC:
            switch (Copy_u8PortDirection)
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3f 83       	std	Y+7, r19	; 0x07
    18a4:	2e 83       	std	Y+6, r18	; 0x06
    18a6:	8e 81       	ldd	r24, Y+6	; 0x06
    18a8:	9f 81       	ldd	r25, Y+7	; 0x07
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	51 f0       	breq	.+20     	; 0x18c2 <DIO_u8SetPortDirection+0xee>
    18ae:	2e 81       	ldd	r18, Y+6	; 0x06
    18b0:	3f 81       	ldd	r19, Y+7	; 0x07
    18b2:	21 30       	cpi	r18, 0x01	; 1
    18b4:	31 05       	cpc	r19, r1
    18b6:	19 f5       	brne	.+70     	; 0x18fe <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRC_REG = 0xff;
    18b8:	e4 e3       	ldi	r30, 0x34	; 52
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	80 83       	st	Z, r24
    18c0:	1e c0       	rjmp	.+60     	; 0x18fe <DIO_u8SetPortDirection+0x12a>
                break;
            case DIO_u8_INPUT:
                DIO_u8_DDRC_REG = 0x00;
    18c2:	e4 e3       	ldi	r30, 0x34	; 52
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	10 82       	st	Z, r1
    18c8:	1a c0       	rjmp	.+52     	; 0x18fe <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
        case DIO_u8_PORTD:
            switch (Copy_u8PortDirection)
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	3d 83       	std	Y+5, r19	; 0x05
    18d2:	2c 83       	std	Y+4, r18	; 0x04
    18d4:	8c 81       	ldd	r24, Y+4	; 0x04
    18d6:	9d 81       	ldd	r25, Y+5	; 0x05
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	51 f0       	breq	.+20     	; 0x18f0 <DIO_u8SetPortDirection+0x11c>
    18dc:	2c 81       	ldd	r18, Y+4	; 0x04
    18de:	3d 81       	ldd	r19, Y+5	; 0x05
    18e0:	21 30       	cpi	r18, 0x01	; 1
    18e2:	31 05       	cpc	r19, r1
    18e4:	61 f4       	brne	.+24     	; 0x18fe <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRD_REG = 0xff;
    18e6:	e1 e3       	ldi	r30, 0x31	; 49
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	80 83       	st	Z, r24
    18ee:	07 c0       	rjmp	.+14     	; 0x18fe <DIO_u8SetPortDirection+0x12a>
                break;
            case DIO_u8_INPUT:
                DIO_u8_DDRD_REG = 0x00;
    18f0:	e1 e3       	ldi	r30, 0x31	; 49
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	10 82       	st	Z, r1
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
        default:
            Local_u8ErrorState = STD_TYPES_NOK;
    18f8:	19 82       	std	Y+1, r1	; 0x01
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <DIO_u8SetPortDirection+0x12a>
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    18fc:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8ErrorState;
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1900:	2d 96       	adiw	r28, 0x0d	; 13
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <DIO_u8SetPortValue+0x6>
    1918:	00 d0       	rcall	.+0      	; 0x191a <DIO_u8SetPortValue+0x8>
    191a:	0f 92       	push	r0
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	8a 83       	std	Y+2, r24	; 0x02
    1922:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortID)
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	3d 83       	std	Y+5, r19	; 0x05
    1930:	2c 83       	std	Y+4, r18	; 0x04
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	9d 81       	ldd	r25, Y+5	; 0x05
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	91 05       	cpc	r25, r1
    193a:	d1 f0       	breq	.+52     	; 0x1970 <DIO_u8SetPortValue+0x5e>
    193c:	2c 81       	ldd	r18, Y+4	; 0x04
    193e:	3d 81       	ldd	r19, Y+5	; 0x05
    1940:	22 30       	cpi	r18, 0x02	; 2
    1942:	31 05       	cpc	r19, r1
    1944:	2c f4       	brge	.+10     	; 0x1950 <DIO_u8SetPortValue+0x3e>
    1946:	8c 81       	ldd	r24, Y+4	; 0x04
    1948:	9d 81       	ldd	r25, Y+5	; 0x05
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	61 f0       	breq	.+24     	; 0x1966 <DIO_u8SetPortValue+0x54>
    194e:	1f c0       	rjmp	.+62     	; 0x198e <DIO_u8SetPortValue+0x7c>
    1950:	2c 81       	ldd	r18, Y+4	; 0x04
    1952:	3d 81       	ldd	r19, Y+5	; 0x05
    1954:	22 30       	cpi	r18, 0x02	; 2
    1956:	31 05       	cpc	r19, r1
    1958:	81 f0       	breq	.+32     	; 0x197a <DIO_u8SetPortValue+0x68>
    195a:	8c 81       	ldd	r24, Y+4	; 0x04
    195c:	9d 81       	ldd	r25, Y+5	; 0x05
    195e:	83 30       	cpi	r24, 0x03	; 3
    1960:	91 05       	cpc	r25, r1
    1962:	81 f0       	breq	.+32     	; 0x1984 <DIO_u8SetPortValue+0x72>
    1964:	14 c0       	rjmp	.+40     	; 0x198e <DIO_u8SetPortValue+0x7c>
    {
    case DIO_u8_PORTA:
        DIO_u8_PORTA_REG = Copy_u8PortValue;
    1966:	eb e3       	ldi	r30, 0x3B	; 59
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	80 83       	st	Z, r24
    196e:	10 c0       	rjmp	.+32     	; 0x1990 <DIO_u8SetPortValue+0x7e>
        break;
    case DIO_u8_PORTB:
        DIO_u8_PORTB_REG = Copy_u8PortValue;
    1970:	e8 e3       	ldi	r30, 0x38	; 56
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	80 83       	st	Z, r24
    1978:	0b c0       	rjmp	.+22     	; 0x1990 <DIO_u8SetPortValue+0x7e>
        break;
    case DIO_u8_PORTC:
        DIO_u8_PORTC_REG = Copy_u8PortValue;
    197a:	e5 e3       	ldi	r30, 0x35	; 53
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	80 83       	st	Z, r24
    1982:	06 c0       	rjmp	.+12     	; 0x1990 <DIO_u8SetPortValue+0x7e>
        break;
    case DIO_u8_PORTD:
        DIO_u8_PORTD_REG = Copy_u8PortValue;
    1984:	e2 e3       	ldi	r30, 0x32	; 50
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	80 83       	st	Z, r24
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <DIO_u8SetPortValue+0x7e>
        break;

    default:
        Local_u8ErrorState = STD_TYPES_NOK;
    198e:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8ErrorState;
    1990:	89 81       	ldd	r24, Y+1	; 0x01
}
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <DIO_u8GetPortValue+0x6>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <DIO_u8GetPortValue+0x8>
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <DIO_u8GetPortValue+0xa>
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	8a 83       	std	Y+2, r24	; 0x02
    19b2:	7c 83       	std	Y+4, r23	; 0x04
    19b4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu8ReturnedPortValue != NULL)
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	9c 81       	ldd	r25, Y+4	; 0x04
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	e9 f1       	breq	.+122    	; 0x1a3c <DIO_u8GetPortValue+0x9a>
    {
        switch (Copy_u8PortId)
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3e 83       	std	Y+6, r19	; 0x06
    19ca:	2d 83       	std	Y+5, r18	; 0x05
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	91 05       	cpc	r25, r1
    19d4:	e1 f0       	breq	.+56     	; 0x1a0e <DIO_u8GetPortValue+0x6c>
    19d6:	2d 81       	ldd	r18, Y+5	; 0x05
    19d8:	3e 81       	ldd	r19, Y+6	; 0x06
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	2c f4       	brge	.+10     	; 0x19ea <DIO_u8GetPortValue+0x48>
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	61 f0       	breq	.+24     	; 0x1a00 <DIO_u8GetPortValue+0x5e>
    19e8:	27 c0       	rjmp	.+78     	; 0x1a38 <DIO_u8GetPortValue+0x96>
    19ea:	2d 81       	ldd	r18, Y+5	; 0x05
    19ec:	3e 81       	ldd	r19, Y+6	; 0x06
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	a1 f0       	breq	.+40     	; 0x1a1c <DIO_u8GetPortValue+0x7a>
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	83 30       	cpi	r24, 0x03	; 3
    19fa:	91 05       	cpc	r25, r1
    19fc:	b1 f0       	breq	.+44     	; 0x1a2a <DIO_u8GetPortValue+0x88>
    19fe:	1c c0       	rjmp	.+56     	; 0x1a38 <DIO_u8GetPortValue+0x96>
        {
        case DIO_u8_PORTA:
            *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1a00:	e9 e3       	ldi	r30, 0x39	; 57
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	eb 81       	ldd	r30, Y+3	; 0x03
    1a08:	fc 81       	ldd	r31, Y+4	; 0x04
    1a0a:	80 83       	st	Z, r24
    1a0c:	18 c0       	rjmp	.+48     	; 0x1a3e <DIO_u8GetPortValue+0x9c>
            break;
        case DIO_u8_PORTB:
            *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1a0e:	e6 e3       	ldi	r30, 0x36	; 54
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	eb 81       	ldd	r30, Y+3	; 0x03
    1a16:	fc 81       	ldd	r31, Y+4	; 0x04
    1a18:	80 83       	st	Z, r24
    1a1a:	11 c0       	rjmp	.+34     	; 0x1a3e <DIO_u8GetPortValue+0x9c>
            break;
        case DIO_u8_PORTC:
            *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1a1c:	e3 e3       	ldi	r30, 0x33	; 51
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	eb 81       	ldd	r30, Y+3	; 0x03
    1a24:	fc 81       	ldd	r31, Y+4	; 0x04
    1a26:	80 83       	st	Z, r24
    1a28:	0a c0       	rjmp	.+20     	; 0x1a3e <DIO_u8GetPortValue+0x9c>
            break;
        case DIO_u8_PORTD:
            *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    1a2a:	e0 e3       	ldi	r30, 0x30	; 48
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	eb 81       	ldd	r30, Y+3	; 0x03
    1a32:	fc 81       	ldd	r31, Y+4	; 0x04
    1a34:	80 83       	st	Z, r24
    1a36:	03 c0       	rjmp	.+6      	; 0x1a3e <DIO_u8GetPortValue+0x9c>
            break;

        default:
            Local_u8ErrorState = STD_TYPES_NOK;
    1a38:	19 82       	std	Y+1, r1	; 0x01
    1a3a:	01 c0       	rjmp	.+2      	; 0x1a3e <DIO_u8GetPortValue+0x9c>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1a3c:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8ErrorState;
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a40:	26 96       	adiw	r28, 0x06	; 6
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <StepperMotor_move>:
#include "stepper_private.h"
/***************************************************************************/

// Function to control the stepper motor movement
void StepperMotor_move(u8 direction, u16 angle)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	a5 97       	sbiw	r28, 0x25	; 37
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	8b a3       	std	Y+35, r24	; 0x23
    1a68:	7d a3       	std	Y+37, r23	; 0x25
    1a6a:	6c a3       	std	Y+36, r22	; 0x24
    // Set direction pins as OUTPUT
    DIO_voidSetPinDirection(stepper_motor_port, stepper_motor_blue, DIO_u8_OUTPUT);
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	63 e0       	ldi	r22, 0x03	; 3
    1a70:	41 e0       	ldi	r20, 0x01	; 1
    1a72:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(stepper_motor_port, stepper_motor_pink, DIO_u8_OUTPUT);
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	64 e0       	ldi	r22, 0x04	; 4
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(stepper_motor_port, stepper_motor_yellow, DIO_u8_OUTPUT);
    1a80:	82 e0       	ldi	r24, 0x02	; 2
    1a82:	65 e0       	ldi	r22, 0x05	; 5
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(stepper_motor_port, stepper_motor_orange, DIO_u8_OUTPUT);
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	66 e0       	ldi	r22, 0x06	; 6
    1a8e:	41 e0       	ldi	r20, 0x01	; 1
    1a90:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>

    // Calculate the number of steps based on the motor's step angle and microstepping settings
    u16 steps = ((angle * STEPS_PER_REVOLUTION) / 360) / 4;
    1a94:	8c a1       	ldd	r24, Y+36	; 0x24
    1a96:	9d a1       	ldd	r25, Y+37	; 0x25
    1a98:	98 2f       	mov	r25, r24
    1a9a:	88 27       	eor	r24, r24
    1a9c:	99 0f       	add	r25, r25
    1a9e:	99 0f       	add	r25, r25
    1aa0:	99 0f       	add	r25, r25
    1aa2:	20 ea       	ldi	r18, 0xA0	; 160
    1aa4:	35 e0       	ldi	r19, 0x05	; 5
    1aa6:	b9 01       	movw	r22, r18
    1aa8:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__udivmodhi4>
    1aac:	cb 01       	movw	r24, r22
    1aae:	9a a3       	std	Y+34, r25	; 0x22
    1ab0:	89 a3       	std	Y+33, r24	; 0x21

    if (direction == CW)
    1ab2:	8b a1       	ldd	r24, Y+35	; 0x23
    1ab4:	88 23       	and	r24, r24
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <StepperMotor_move+0x68>
    1ab8:	d3 c0       	rjmp	.+422    	; 0x1c60 <StepperMotor_move+0x20e>
    {
        for (u16 i = 0; i < steps; i++)
    1aba:	18 a2       	std	Y+32, r1	; 0x20
    1abc:	1f 8e       	std	Y+31, r1	; 0x1f
    1abe:	c7 c0       	rjmp	.+398    	; 0x1c4e <StepperMotor_move+0x1fc>
        {
            // Define the step sequence for clockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_HIGH);
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	63 e0       	ldi	r22, 0x03	; 3
    1ac4:	41 e0       	ldi	r20, 0x01	; 1
    1ac6:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	64 e0       	ldi	r22, 0x04	; 4
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	65 e0       	ldi	r22, 0x05	; 5
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	66 e0       	ldi	r22, 0x06	; 6
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            // Define the step sequence for clockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1ae8:	82 e0       	ldi	r24, 0x02	; 2
    1aea:	63 e0       	ldi	r22, 0x03	; 3
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_HIGH);
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	64 e0       	ldi	r22, 0x04	; 4
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1afc:	82 e0       	ldi	r24, 0x02	; 2
    1afe:	65 e0       	ldi	r22, 0x05	; 5
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1b06:	82 e0       	ldi	r24, 0x02	; 2
    1b08:	66 e0       	ldi	r22, 0x06	; 6
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            // Define the step sequence for clockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	63 e0       	ldi	r22, 0x03	; 3
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	64 e0       	ldi	r22, 0x04	; 4
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_HIGH);
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	65 e0       	ldi	r22, 0x05	; 5
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	66 e0       	ldi	r22, 0x06	; 6
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            // Define the step sequence for clockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	63 e0       	ldi	r22, 0x03	; 3
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	64 e0       	ldi	r22, 0x04	; 4
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1b4c:	82 e0       	ldi	r24, 0x02	; 2
    1b4e:	65 e0       	ldi	r22, 0x05	; 5
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_HIGH);
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	66 e0       	ldi	r22, 0x06	; 6
    1b5a:	41 e0       	ldi	r20, 0x01	; 1
    1b5c:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a0 e2       	ldi	r26, 0x20	; 32
    1b66:	b1 e4       	ldi	r27, 0x41	; 65
    1b68:	89 8f       	std	Y+25, r24	; 0x19
    1b6a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b6c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b70:	69 8d       	ldd	r22, Y+25	; 0x19
    1b72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a e7       	ldi	r20, 0x7A	; 122
    1b7e:	53 e4       	ldi	r21, 0x43	; 67
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	8d 8b       	std	Y+21, r24	; 0x15
    1b8a:	9e 8b       	std	Y+22, r25	; 0x16
    1b8c:	af 8b       	std	Y+23, r26	; 0x17
    1b8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b90:	6d 89       	ldd	r22, Y+21	; 0x15
    1b92:	7e 89       	ldd	r23, Y+22	; 0x16
    1b94:	8f 89       	ldd	r24, Y+23	; 0x17
    1b96:	98 8d       	ldd	r25, Y+24	; 0x18
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ba4:	88 23       	and	r24, r24
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <StepperMotor_move+0x160>
		__ticks = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9c 8b       	std	Y+20, r25	; 0x14
    1bae:	8b 8b       	std	Y+19, r24	; 0x13
    1bb0:	3f c0       	rjmp	.+126    	; 0x1c30 <StepperMotor_move+0x1de>
	else if (__tmp > 65535)
    1bb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	4f e7       	ldi	r20, 0x7F	; 127
    1bc0:	57 e4       	ldi	r21, 0x47	; 71
    1bc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bc6:	18 16       	cp	r1, r24
    1bc8:	4c f5       	brge	.+82     	; 0x1c1c <StepperMotor_move+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	69 8d       	ldd	r22, Y+25	; 0x19
    1bcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e2       	ldi	r20, 0x20	; 32
    1bd8:	51 e4       	ldi	r21, 0x41	; 65
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9c 8b       	std	Y+20, r25	; 0x14
    1bf0:	8b 8b       	std	Y+19, r24	; 0x13
    1bf2:	0f c0       	rjmp	.+30     	; 0x1c12 <StepperMotor_move+0x1c0>
    1bf4:	89 e1       	ldi	r24, 0x19	; 25
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9a 8b       	std	Y+18, r25	; 0x12
    1bfa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bfc:	89 89       	ldd	r24, Y+17	; 0x11
    1bfe:	9a 89       	ldd	r25, Y+18	; 0x12
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <StepperMotor_move+0x1ae>
    1c04:	9a 8b       	std	Y+18, r25	; 0x12
    1c06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c08:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	9c 8b       	std	Y+20, r25	; 0x14
    1c10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	8b 89       	ldd	r24, Y+19	; 0x13
    1c14:	9c 89       	ldd	r25, Y+20	; 0x14
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	69 f7       	brne	.-38     	; 0x1bf4 <StepperMotor_move+0x1a2>
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <StepperMotor_move+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c20:	8f 89       	ldd	r24, Y+23	; 0x17
    1c22:	98 8d       	ldd	r25, Y+24	; 0x18
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9c 8b       	std	Y+20, r25	; 0x14
    1c2e:	8b 8b       	std	Y+19, r24	; 0x13
    1c30:	8b 89       	ldd	r24, Y+19	; 0x13
    1c32:	9c 89       	ldd	r25, Y+20	; 0x14
    1c34:	98 8b       	std	Y+16, r25	; 0x10
    1c36:	8f 87       	std	Y+15, r24	; 0x0f
    1c38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c3a:	98 89       	ldd	r25, Y+16	; 0x10
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <StepperMotor_move+0x1ea>
    1c40:	98 8b       	std	Y+16, r25	; 0x10
    1c42:	8f 87       	std	Y+15, r24	; 0x0f
    // Calculate the number of steps based on the motor's step angle and microstepping settings
    u16 steps = ((angle * STEPS_PER_REVOLUTION) / 360) / 4;

    if (direction == CW)
    {
        for (u16 i = 0; i < steps; i++)
    1c44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c46:	98 a1       	ldd	r25, Y+32	; 0x20
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	98 a3       	std	Y+32, r25	; 0x20
    1c4c:	8f 8f       	std	Y+31, r24	; 0x1f
    1c4e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1c50:	38 a1       	ldd	r19, Y+32	; 0x20
    1c52:	89 a1       	ldd	r24, Y+33	; 0x21
    1c54:	9a a1       	ldd	r25, Y+34	; 0x22
    1c56:	28 17       	cp	r18, r24
    1c58:	39 07       	cpc	r19, r25
    1c5a:	08 f4       	brcc	.+2      	; 0x1c5e <StepperMotor_move+0x20c>
    1c5c:	31 cf       	rjmp	.-414    	; 0x1ac0 <StepperMotor_move+0x6e>
    1c5e:	d6 c0       	rjmp	.+428    	; 0x1e0c <StepperMotor_move+0x3ba>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_HIGH);

            _delay_ms(StepperDelay); // Add a delay to control the motor speed
        }
    }
    else if (direction == CCW)
    1c60:	8b a1       	ldd	r24, Y+35	; 0x23
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <StepperMotor_move+0x216>
    1c66:	d2 c0       	rjmp	.+420    	; 0x1e0c <StepperMotor_move+0x3ba>
    {
        for (u16 i = 0; i < steps; i++)
    1c68:	1e 8e       	std	Y+30, r1	; 0x1e
    1c6a:	1d 8e       	std	Y+29, r1	; 0x1d
    1c6c:	c7 c0       	rjmp	.+398    	; 0x1dfc <StepperMotor_move+0x3aa>
        {
            // Define the step sequence for counterclockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	63 e0       	ldi	r22, 0x03	; 3
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	64 e0       	ldi	r22, 0x04	; 4
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1c82:	82 e0       	ldi	r24, 0x02	; 2
    1c84:	65 e0       	ldi	r22, 0x05	; 5
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_HIGH);
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	66 e0       	ldi	r22, 0x06	; 6
    1c90:	41 e0       	ldi	r20, 0x01	; 1
    1c92:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            // Define the step sequence for counterclockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	63 e0       	ldi	r22, 0x03	; 3
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	64 e0       	ldi	r22, 0x04	; 4
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_HIGH);
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	65 e0       	ldi	r22, 0x05	; 5
    1cae:	41 e0       	ldi	r20, 0x01	; 1
    1cb0:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	66 e0       	ldi	r22, 0x06	; 6
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            // Define the step sequence for counterclockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	63 e0       	ldi	r22, 0x03	; 3
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_HIGH);
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	64 e0       	ldi	r22, 0x04	; 4
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	65 e0       	ldi	r22, 0x05	; 5
    1cd6:	40 e0       	ldi	r20, 0x00	; 0
    1cd8:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	66 e0       	ldi	r22, 0x06	; 6
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            // Define the step sequence for counterclockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_HIGH);
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	63 e0       	ldi	r22, 0x03	; 3
    1cea:	41 e0       	ldi	r20, 0x01	; 1
    1cec:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	64 e0       	ldi	r22, 0x04	; 4
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	65 e0       	ldi	r22, 0x05	; 5
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	66 e0       	ldi	r22, 0x06	; 6
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a0 e2       	ldi	r26, 0x20	; 32
    1d14:	b1 e4       	ldi	r27, 0x41	; 65
    1d16:	8b 87       	std	Y+11, r24	; 0x0b
    1d18:	9c 87       	std	Y+12, r25	; 0x0c
    1d1a:	ad 87       	std	Y+13, r26	; 0x0d
    1d1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	4a e7       	ldi	r20, 0x7A	; 122
    1d2c:	53 e4       	ldi	r21, 0x43	; 67
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	8f 83       	std	Y+7, r24	; 0x07
    1d38:	98 87       	std	Y+8, r25	; 0x08
    1d3a:	a9 87       	std	Y+9, r26	; 0x09
    1d3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e8       	ldi	r20, 0x80	; 128
    1d4c:	5f e3       	ldi	r21, 0x3F	; 63
    1d4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d52:	88 23       	and	r24, r24
    1d54:	2c f4       	brge	.+10     	; 0x1d60 <StepperMotor_move+0x30e>
		__ticks = 1;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
    1d5e:	3f c0       	rjmp	.+126    	; 0x1dde <StepperMotor_move+0x38c>
	else if (__tmp > 65535)
    1d60:	6f 81       	ldd	r22, Y+7	; 0x07
    1d62:	78 85       	ldd	r23, Y+8	; 0x08
    1d64:	89 85       	ldd	r24, Y+9	; 0x09
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	3f ef       	ldi	r19, 0xFF	; 255
    1d6c:	4f e7       	ldi	r20, 0x7F	; 127
    1d6e:	57 e4       	ldi	r21, 0x47	; 71
    1d70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d74:	18 16       	cp	r1, r24
    1d76:	4c f5       	brge	.+82     	; 0x1dca <StepperMotor_move+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e2       	ldi	r20, 0x20	; 32
    1d86:	51 e4       	ldi	r21, 0x41	; 65
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <StepperMotor_move+0x36e>
    1da2:	89 e1       	ldi	r24, 0x19	; 25
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9c 83       	std	Y+4, r25	; 0x04
    1da8:	8b 83       	std	Y+3, r24	; 0x03
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <StepperMotor_move+0x35c>
    1db2:	9c 83       	std	Y+4, r25	; 0x04
    1db4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	69 f7       	brne	.-38     	; 0x1da2 <StepperMotor_move+0x350>
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <StepperMotor_move+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dca:	6f 81       	ldd	r22, Y+7	; 0x07
    1dcc:	78 85       	ldd	r23, Y+8	; 0x08
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <StepperMotor_move+0x398>
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(StepperDelay); // Add a delay to control the motor speed
        }
    }
    else if (direction == CCW)
    {
        for (u16 i = 0; i < steps; i++)
    1df2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1df6:	01 96       	adiw	r24, 0x01	; 1
    1df8:	9e 8f       	std	Y+30, r25	; 0x1e
    1dfa:	8d 8f       	std	Y+29, r24	; 0x1d
    1dfc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1dfe:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1e00:	89 a1       	ldd	r24, Y+33	; 0x21
    1e02:	9a a1       	ldd	r25, Y+34	; 0x22
    1e04:	28 17       	cp	r18, r24
    1e06:	39 07       	cpc	r19, r25
    1e08:	08 f4       	brcc	.+2      	; 0x1e0c <StepperMotor_move+0x3ba>
    1e0a:	31 cf       	rjmp	.-414    	; 0x1c6e <StepperMotor_move+0x21c>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);

            _delay_ms(StepperDelay); // Add a delay to control the motor speed
        }
    }
}
    1e0c:	a5 96       	adiw	r28, 0x25	; 37
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <motor_rotate_cw>:
#include "Motor_interface.h"
#include "Motor_config.h"
#include "Motor_private.h"
/***************************************************************************/
void motor_rotate_cw()
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    // Set the directions
    DIO_voidSetPinDirection(motor_port, motor_u8_pin1, DIO_u8_OUTPUT);
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(motor_port, motor_u8_pin2, DIO_u8_OUTPUT);
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	41 e0       	ldi	r20, 0x01	; 1
    1e36:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>

    // Set one pin high and the other low to rotate the motor clockwise (CW)
    DIO_voidSetPinValue(motor_port, motor_u8_pin1, DIO_u8_HIGH);
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(motor_port, motor_u8_pin2, DIO_u8_LOW);
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	61 e0       	ldi	r22, 0x01	; 1
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
}
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <motor_rotate_ccw>:

void motor_rotate_ccw()
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    // Set the directions
    DIO_voidSetPinDirection(motor_port, motor_u8_pin1, DIO_u8_OUTPUT);
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(motor_port, motor_u8_pin2, DIO_u8_OUTPUT);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>

    // Set one pin high and the other low to rotate the motor counterclockwise (CCW)
    DIO_voidSetPinValue(motor_port, motor_u8_pin1, DIO_u8_LOW);
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(motor_port, motor_u8_pin2, DIO_u8_HIGH);
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	61 e0       	ldi	r22, 0x01	; 1
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
}
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <stopDCmotor>:
void stopDCmotor(){
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(motor_port, motor_u8_pin1, DIO_u8_LOW);
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor_port, motor_u8_pin2, DIO_u8_LOW);
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	61 e0       	ldi	r22, 0x01	; 1
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
}
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <KPD_u8getKeystate>:
    KPD_u8_C3_PIN,
    KPD_u8_C4_PIN,
};
/***************************************************************************/
u8 KPD_u8getKeystate(u8 *copy_pu8Returnedkey)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	a3 97       	sbiw	r28, 0x23	; 35
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	9b a3       	std	Y+35, r25	; 0x23
    1ec2:	8a a3       	std	Y+34, r24	; 0x22
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	88 a3       	std	Y+32, r24	; 0x20
    u8 Local_u8RowsCounter, Local_u8ColumnsCounter, Local_u8PinValue, Local_u8Flag = 0;
    1ec8:	1d 8e       	std	Y+29, r1	; 0x1d

    if (copy_pu8Returnedkey != NULL)
    1eca:	8a a1       	ldd	r24, Y+34	; 0x22
    1ecc:	9b a1       	ldd	r25, Y+35	; 0x23
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <KPD_u8getKeystate+0x28>
    1ed2:	62 c1       	rjmp	.+708    	; 0x2198 <KPD_u8getKeystate+0x2ec>
    {
        *copy_pu8Returnedkey = KPD_u8_KEY_NOT_PRESSED;
    1ed4:	ea a1       	ldd	r30, Y+34	; 0x22
    1ed6:	fb a1       	ldd	r31, Y+35	; 0x23
    1ed8:	8f ef       	ldi	r24, 0xFF	; 255
    1eda:	80 83       	st	Z, r24
        /* Activate each row ==> for loop on the pins of the rows */
        for (Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    1edc:	1f 8e       	std	Y+31, r1	; 0x1f
    1ede:	57 c1       	rjmp	.+686    	; 0x218e <KPD_u8getKeystate+0x2e2>
        {
            DIO_voidSetPinValue(KPD_u8_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
    1ee0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	ea 5e       	subi	r30, 0xEA	; 234
    1eea:	fe 4f       	sbci	r31, 0xFE	; 254
    1eec:	90 81       	ld	r25, Z
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	69 2f       	mov	r22, r25
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e8       	ldi	r26, 0x80	; 128
    1efe:	bf e3       	ldi	r27, 0x3F	; 63
    1f00:	89 8f       	std	Y+25, r24	; 0x19
    1f02:	9a 8f       	std	Y+26, r25	; 0x1a
    1f04:	ab 8f       	std	Y+27, r26	; 0x1b
    1f06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f08:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a e7       	ldi	r20, 0x7A	; 122
    1f16:	53 e4       	ldi	r21, 0x43	; 67
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	8d 8b       	std	Y+21, r24	; 0x15
    1f22:	9e 8b       	std	Y+22, r25	; 0x16
    1f24:	af 8b       	std	Y+23, r26	; 0x17
    1f26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f28:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e8       	ldi	r20, 0x80	; 128
    1f36:	5f e3       	ldi	r21, 0x3F	; 63
    1f38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <KPD_u8getKeystate+0x9e>
		__ticks = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9c 8b       	std	Y+20, r25	; 0x14
    1f46:	8b 8b       	std	Y+19, r24	; 0x13
    1f48:	3f c0       	rjmp	.+126    	; 0x1fc8 <KPD_u8getKeystate+0x11c>
	else if (__tmp > 65535)
    1f4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f50:	98 8d       	ldd	r25, Y+24	; 0x18
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	57 e4       	ldi	r21, 0x47	; 71
    1f5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	4c f5       	brge	.+82     	; 0x1fb4 <KPD_u8getKeystate+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	69 8d       	ldd	r22, Y+25	; 0x19
    1f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9c 8b       	std	Y+20, r25	; 0x14
    1f88:	8b 8b       	std	Y+19, r24	; 0x13
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <KPD_u8getKeystate+0xfe>
    1f8c:	89 e1       	ldi	r24, 0x19	; 25
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9a 8b       	std	Y+18, r25	; 0x12
    1f92:	89 8b       	std	Y+17, r24	; 0x11
    1f94:	89 89       	ldd	r24, Y+17	; 0x11
    1f96:	9a 89       	ldd	r25, Y+18	; 0x12
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <KPD_u8getKeystate+0xec>
    1f9c:	9a 8b       	std	Y+18, r25	; 0x12
    1f9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	9c 8b       	std	Y+20, r25	; 0x14
    1fa8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	8b 89       	ldd	r24, Y+19	; 0x13
    1fac:	9c 89       	ldd	r25, Y+20	; 0x14
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <KPD_u8getKeystate+0xe0>
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <KPD_u8getKeystate+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fba:	98 8d       	ldd	r25, Y+24	; 0x18
    1fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9c 8b       	std	Y+20, r25	; 0x14
    1fc6:	8b 8b       	std	Y+19, r24	; 0x13
    1fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fca:	9c 89       	ldd	r25, Y+20	; 0x14
    1fcc:	98 8b       	std	Y+16, r25	; 0x10
    1fce:	8f 87       	std	Y+15, r24	; 0x0f
    1fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd2:	98 89       	ldd	r25, Y+16	; 0x10
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <KPD_u8getKeystate+0x128>
    1fd8:	98 8b       	std	Y+16, r25	; 0x10
    1fda:	8f 87       	std	Y+15, r24	; 0x0f

            /* Delay to stabilize the row activation */
            _delay_ms(1);

            /* Check which i/p pin has zero */
            for (Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter <= 3; Local_u8ColumnsCounter++)
    1fdc:	1e 8e       	std	Y+30, r1	; 0x1e
    1fde:	c1 c0       	rjmp	.+386    	; 0x2162 <KPD_u8getKeystate+0x2b6>
            {
                DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);
    1fe0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	e6 5e       	subi	r30, 0xE6	; 230
    1fea:	fe 4f       	sbci	r31, 0xFE	; 254
    1fec:	90 81       	ld	r25, Z
    1fee:	9e 01       	movw	r18, r28
    1ff0:	2f 5d       	subi	r18, 0xDF	; 223
    1ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	69 2f       	mov	r22, r25
    1ff8:	a9 01       	movw	r20, r18
    1ffa:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_u8GetPinValue>

                if (Local_u8PinValue == DIO_u8_LOW) /* Switch is Pressed */
    1ffe:	89 a1       	ldd	r24, Y+33	; 0x21
    2000:	88 23       	and	r24, r24
    2002:	09 f0       	breq	.+2      	; 0x2006 <KPD_u8getKeystate+0x15a>
    2004:	ab c0       	rjmp	.+342    	; 0x215c <KPD_u8getKeystate+0x2b0>
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 ea       	ldi	r26, 0xA0	; 160
    200c:	b1 e4       	ldi	r27, 0x41	; 65
    200e:	8b 87       	std	Y+11, r24	; 0x0b
    2010:	9c 87       	std	Y+12, r25	; 0x0c
    2012:	ad 87       	std	Y+13, r26	; 0x0d
    2014:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2016:	6b 85       	ldd	r22, Y+11	; 0x0b
    2018:	7c 85       	ldd	r23, Y+12	; 0x0c
    201a:	8d 85       	ldd	r24, Y+13	; 0x0d
    201c:	9e 85       	ldd	r25, Y+14	; 0x0e
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4a e7       	ldi	r20, 0x7A	; 122
    2024:	53 e4       	ldi	r21, 0x43	; 67
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	8f 83       	std	Y+7, r24	; 0x07
    2030:	98 87       	std	Y+8, r25	; 0x08
    2032:	a9 87       	std	Y+9, r26	; 0x09
    2034:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2036:	6f 81       	ldd	r22, Y+7	; 0x07
    2038:	78 85       	ldd	r23, Y+8	; 0x08
    203a:	89 85       	ldd	r24, Y+9	; 0x09
    203c:	9a 85       	ldd	r25, Y+10	; 0x0a
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e8       	ldi	r20, 0x80	; 128
    2044:	5f e3       	ldi	r21, 0x3F	; 63
    2046:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    204a:	88 23       	and	r24, r24
    204c:	2c f4       	brge	.+10     	; 0x2058 <KPD_u8getKeystate+0x1ac>
		__ticks = 1;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9e 83       	std	Y+6, r25	; 0x06
    2054:	8d 83       	std	Y+5, r24	; 0x05
    2056:	3f c0       	rjmp	.+126    	; 0x20d6 <KPD_u8getKeystate+0x22a>
	else if (__tmp > 65535)
    2058:	6f 81       	ldd	r22, Y+7	; 0x07
    205a:	78 85       	ldd	r23, Y+8	; 0x08
    205c:	89 85       	ldd	r24, Y+9	; 0x09
    205e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	3f ef       	ldi	r19, 0xFF	; 255
    2064:	4f e7       	ldi	r20, 0x7F	; 127
    2066:	57 e4       	ldi	r21, 0x47	; 71
    2068:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    206c:	18 16       	cp	r1, r24
    206e:	4c f5       	brge	.+82     	; 0x20c2 <KPD_u8getKeystate+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2070:	6b 85       	ldd	r22, Y+11	; 0x0b
    2072:	7c 85       	ldd	r23, Y+12	; 0x0c
    2074:	8d 85       	ldd	r24, Y+13	; 0x0d
    2076:	9e 85       	ldd	r25, Y+14	; 0x0e
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e2       	ldi	r20, 0x20	; 32
    207e:	51 e4       	ldi	r21, 0x41	; 65
    2080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	0f c0       	rjmp	.+30     	; 0x20b8 <KPD_u8getKeystate+0x20c>
    209a:	89 e1       	ldi	r24, 0x19	; 25
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9c 83       	std	Y+4, r25	; 0x04
    20a0:	8b 83       	std	Y+3, r24	; 0x03
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <KPD_u8getKeystate+0x1fa>
    20aa:	9c 83       	std	Y+4, r25	; 0x04
    20ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	9e 83       	std	Y+6, r25	; 0x06
    20b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	9e 81       	ldd	r25, Y+6	; 0x06
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	69 f7       	brne	.-38     	; 0x209a <KPD_u8getKeystate+0x1ee>
    20c0:	14 c0       	rjmp	.+40     	; 0x20ea <KPD_u8getKeystate+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c2:	6f 81       	ldd	r22, Y+7	; 0x07
    20c4:	78 85       	ldd	r23, Y+8	; 0x08
    20c6:	89 85       	ldd	r24, Y+9	; 0x09
    20c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	9e 83       	std	Y+6, r25	; 0x06
    20d4:	8d 83       	std	Y+5, r24	; 0x05
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	9a 83       	std	Y+2, r25	; 0x02
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <KPD_u8getKeystate+0x236>
    20e6:	9a 83       	std	Y+2, r25	; 0x02
    20e8:	89 83       	std	Y+1, r24	; 0x01
                {
                    /* Debouncing */
                    _delay_ms(20);

                    DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);
    20ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	fc 01       	movw	r30, r24
    20f2:	e6 5e       	subi	r30, 0xE6	; 230
    20f4:	fe 4f       	sbci	r31, 0xFE	; 254
    20f6:	90 81       	ld	r25, Z
    20f8:	9e 01       	movw	r18, r28
    20fa:	2f 5d       	subi	r18, 0xDF	; 223
    20fc:	3f 4f       	sbci	r19, 0xFF	; 255
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	69 2f       	mov	r22, r25
    2102:	a9 01       	movw	r20, r18
    2104:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_u8GetPinValue>
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <KPD_u8getKeystate+0x27c>

                    /* Check if the pin is still equal to LOW */
                    while (Local_u8PinValue == DIO_u8_LOW)
                    {
                        DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);
    210a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	fc 01       	movw	r30, r24
    2112:	e6 5e       	subi	r30, 0xE6	; 230
    2114:	fe 4f       	sbci	r31, 0xFE	; 254
    2116:	90 81       	ld	r25, Z
    2118:	9e 01       	movw	r18, r28
    211a:	2f 5d       	subi	r18, 0xDF	; 223
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	69 2f       	mov	r22, r25
    2122:	a9 01       	movw	r20, r18
    2124:	0e 94 2c 0b 	call	0x1658	; 0x1658 <DIO_u8GetPinValue>
                    _delay_ms(20);

                    DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);

                    /* Check if the pin is still equal to LOW */
                    while (Local_u8PinValue == DIO_u8_LOW)
    2128:	89 a1       	ldd	r24, Y+33	; 0x21
    212a:	88 23       	and	r24, r24
    212c:	71 f3       	breq	.-36     	; 0x210a <KPD_u8getKeystate+0x25e>
                    {
                        DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);
                    }

                    *copy_pu8Returnedkey = KPD_Au8keys[Local_u8RowsCounter][Local_u8ColumnsCounter];
    212e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2130:	48 2f       	mov	r20, r24
    2132:	50 e0       	ldi	r21, 0x00	; 0
    2134:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	ca 01       	movw	r24, r20
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	82 0f       	add	r24, r18
    2146:	93 1f       	adc	r25, r19
    2148:	fc 01       	movw	r30, r24
    214a:	ea 5f       	subi	r30, 0xFA	; 250
    214c:	fe 4f       	sbci	r31, 0xFE	; 254
    214e:	80 81       	ld	r24, Z
    2150:	ea a1       	ldd	r30, Y+34	; 0x22
    2152:	fb a1       	ldd	r31, Y+35	; 0x23
    2154:	80 83       	st	Z, r24
                    Local_u8Flag = 1;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	8d 8f       	std	Y+29, r24	; 0x1d
    215a:	07 c0       	rjmp	.+14     	; 0x216a <KPD_u8getKeystate+0x2be>

            /* Delay to stabilize the row activation */
            _delay_ms(1);

            /* Check which i/p pin has zero */
            for (Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter <= 3; Local_u8ColumnsCounter++)
    215c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	8e 8f       	std	Y+30, r24	; 0x1e
    2162:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2164:	84 30       	cpi	r24, 0x04	; 4
    2166:	08 f4       	brcc	.+2      	; 0x216a <KPD_u8getKeystate+0x2be>
    2168:	3b cf       	rjmp	.-394    	; 0x1fe0 <KPD_u8getKeystate+0x134>
                    break;
                }
            }

            /* Deactivate Row */
            DIO_voidSetPinValue(KPD_u8_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_HIGH);
    216a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    216c:	88 2f       	mov	r24, r24
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	fc 01       	movw	r30, r24
    2172:	ea 5e       	subi	r30, 0xEA	; 234
    2174:	fe 4f       	sbci	r31, 0xFE	; 254
    2176:	90 81       	ld	r25, Z
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	69 2f       	mov	r22, r25
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>

            if (Local_u8Flag == 1)
    2182:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	49 f0       	breq	.+18     	; 0x219a <KPD_u8getKeystate+0x2ee>

    if (copy_pu8Returnedkey != NULL)
    {
        *copy_pu8Returnedkey = KPD_u8_KEY_NOT_PRESSED;
        /* Activate each row ==> for loop on the pins of the rows */
        for (Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    2188:	8f 8d       	ldd	r24, Y+31	; 0x1f
    218a:	8f 5f       	subi	r24, 0xFF	; 255
    218c:	8f 8f       	std	Y+31, r24	; 0x1f
    218e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2190:	84 30       	cpi	r24, 0x04	; 4
    2192:	08 f4       	brcc	.+2      	; 0x2196 <KPD_u8getKeystate+0x2ea>
    2194:	a5 ce       	rjmp	.-694    	; 0x1ee0 <KPD_u8getKeystate+0x34>
    2196:	01 c0       	rjmp	.+2      	; 0x219a <KPD_u8getKeystate+0x2ee>
            }
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    2198:	18 a2       	std	Y+32, r1	; 0x20
    }
    return Local_u8ErrorState;
    219a:	88 a1       	ldd	r24, Y+32	; 0x20
}
    219c:	a3 96       	adiw	r28, 0x23	; 35
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <KPD_enuInit>:

u8 KPD_enuInit(void)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_R1_PIN, DIO_u8_OUTPUT);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_R2_PIN, DIO_u8_OUTPUT);
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	41 e0       	ldi	r20, 0x01	; 1
    21c6:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_R3_PIN, DIO_u8_OUTPUT);
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	62 e0       	ldi	r22, 0x02	; 2
    21ce:	41 e0       	ldi	r20, 0x01	; 1
    21d0:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_R4_PIN, DIO_u8_OUTPUT);
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	63 e0       	ldi	r22, 0x03	; 3
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>

    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_C1_PIN, DIO_u8_INPUT);
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	64 e0       	ldi	r22, 0x04	; 4
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_C2_PIN, DIO_u8_INPUT);
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	65 e0       	ldi	r22, 0x05	; 5
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_C3_PIN, DIO_u8_INPUT);
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	66 e0       	ldi	r22, 0x06	; 6
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_C4_PIN, DIO_u8_INPUT);
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	67 e0       	ldi	r22, 0x07	; 7
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>

    DIO_u8SetPortValue(KPD_u8_PORT, DIO_u8_HIGH);
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	61 e0       	ldi	r22, 0x01	; 1
    220a:	0e 94 89 0c 	call	0x1912	; 0x1912 <DIO_u8SetPortValue>

    return STD_TYPES_OK;
    220e:	81 e0       	ldi	r24, 0x01	; 1
}
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <LCD_voidSendCmnd>:
#include "LCD_config.h"
#include "LCD_private.h"
#include "LCD_interface.h"

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	69 97       	sbiw	r28, 0x19	; 25
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	89 8f       	std	Y+25, r24	; 0x19
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Rs = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN0, DIO_u8_LOW);
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>

	/*Rw = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN1, DIO_u8_LOW);
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>

	/*Write Command*/
	DIO_u8SetPortValue(DIO_u8_PORTD, Copy_u8Cmnd);
    2240:	83 e0       	ldi	r24, 0x03	; 3
    2242:	69 8d       	ldd	r22, Y+25	; 0x19
    2244:	0e 94 89 0c 	call	0x1912	; 0x1912 <DIO_u8SetPortValue>

	/*E = 1*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_HIGH);
    2248:	82 e0       	ldi	r24, 0x02	; 2
    224a:	62 e0       	ldi	r22, 0x02	; 2
    224c:	41 e0       	ldi	r20, 0x01	; 1
    224e:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a0 e8       	ldi	r26, 0x80	; 128
    2258:	bf e3       	ldi	r27, 0x3F	; 63
    225a:	8d 8b       	std	Y+21, r24	; 0x15
    225c:	9e 8b       	std	Y+22, r25	; 0x16
    225e:	af 8b       	std	Y+23, r26	; 0x17
    2260:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2262:	6d 89       	ldd	r22, Y+21	; 0x15
    2264:	7e 89       	ldd	r23, Y+22	; 0x16
    2266:	8f 89       	ldd	r24, Y+23	; 0x17
    2268:	98 8d       	ldd	r25, Y+24	; 0x18
    226a:	2b ea       	ldi	r18, 0xAB	; 171
    226c:	3a ea       	ldi	r19, 0xAA	; 170
    226e:	4a ea       	ldi	r20, 0xAA	; 170
    2270:	5e e3       	ldi	r21, 0x3E	; 62
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	89 8b       	std	Y+17, r24	; 0x11
    227c:	9a 8b       	std	Y+18, r25	; 0x12
    227e:	ab 8b       	std	Y+19, r26	; 0x13
    2280:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2282:	69 89       	ldd	r22, Y+17	; 0x11
    2284:	7a 89       	ldd	r23, Y+18	; 0x12
    2286:	8b 89       	ldd	r24, Y+19	; 0x13
    2288:	9c 89       	ldd	r25, Y+20	; 0x14
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e8       	ldi	r20, 0x80	; 128
    2290:	5f e3       	ldi	r21, 0x3F	; 63
    2292:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2296:	88 23       	and	r24, r24
    2298:	1c f4       	brge	.+6      	; 0x22a0 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	88 8b       	std	Y+16, r24	; 0x10
    229e:	91 c0       	rjmp	.+290    	; 0x23c2 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    22a0:	69 89       	ldd	r22, Y+17	; 0x11
    22a2:	7a 89       	ldd	r23, Y+18	; 0x12
    22a4:	8b 89       	ldd	r24, Y+19	; 0x13
    22a6:	9c 89       	ldd	r25, Y+20	; 0x14
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	4f e7       	ldi	r20, 0x7F	; 127
    22ae:	53 e4       	ldi	r21, 0x43	; 67
    22b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b4:	18 16       	cp	r1, r24
    22b6:	0c f0       	brlt	.+2      	; 0x22ba <LCD_voidSendCmnd+0xa4>
    22b8:	7b c0       	rjmp	.+246    	; 0x23b0 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    22ba:	6d 89       	ldd	r22, Y+21	; 0x15
    22bc:	7e 89       	ldd	r23, Y+22	; 0x16
    22be:	8f 89       	ldd	r24, Y+23	; 0x17
    22c0:	98 8d       	ldd	r25, Y+24	; 0x18
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	4a e7       	ldi	r20, 0x7A	; 122
    22c8:	54 e4       	ldi	r21, 0x44	; 68
    22ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	8c 87       	std	Y+12, r24	; 0x0c
    22d4:	9d 87       	std	Y+13, r25	; 0x0d
    22d6:	ae 87       	std	Y+14, r26	; 0x0e
    22d8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22da:	6c 85       	ldd	r22, Y+12	; 0x0c
    22dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    22de:	8e 85       	ldd	r24, Y+14	; 0x0e
    22e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	4a e7       	ldi	r20, 0x7A	; 122
    22e8:	53 e4       	ldi	r21, 0x43	; 67
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	88 87       	std	Y+8, r24	; 0x08
    22f4:	99 87       	std	Y+9, r25	; 0x09
    22f6:	aa 87       	std	Y+10, r26	; 0x0a
    22f8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22fa:	68 85       	ldd	r22, Y+8	; 0x08
    22fc:	79 85       	ldd	r23, Y+9	; 0x09
    22fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2300:	9b 85       	ldd	r25, Y+11	; 0x0b
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    230e:	88 23       	and	r24, r24
    2310:	2c f4       	brge	.+10     	; 0x231c <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	9f 83       	std	Y+7, r25	; 0x07
    2318:	8e 83       	std	Y+6, r24	; 0x06
    231a:	3f c0       	rjmp	.+126    	; 0x239a <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    231c:	68 85       	ldd	r22, Y+8	; 0x08
    231e:	79 85       	ldd	r23, Y+9	; 0x09
    2320:	8a 85       	ldd	r24, Y+10	; 0x0a
    2322:	9b 85       	ldd	r25, Y+11	; 0x0b
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	3f ef       	ldi	r19, 0xFF	; 255
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	57 e4       	ldi	r21, 0x47	; 71
    232c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2330:	18 16       	cp	r1, r24
    2332:	4c f5       	brge	.+82     	; 0x2386 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2334:	6c 85       	ldd	r22, Y+12	; 0x0c
    2336:	7d 85       	ldd	r23, Y+13	; 0x0d
    2338:	8e 85       	ldd	r24, Y+14	; 0x0e
    233a:	9f 85       	ldd	r25, Y+15	; 0x0f
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e2       	ldi	r20, 0x20	; 32
    2342:	51 e4       	ldi	r21, 0x41	; 65
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9f 83       	std	Y+7, r25	; 0x07
    235a:	8e 83       	std	Y+6, r24	; 0x06
    235c:	0f c0       	rjmp	.+30     	; 0x237c <LCD_voidSendCmnd+0x166>
    235e:	89 e1       	ldi	r24, 0x19	; 25
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9d 83       	std	Y+5, r25	; 0x05
    2364:	8c 83       	std	Y+4, r24	; 0x04
    2366:	8c 81       	ldd	r24, Y+4	; 0x04
    2368:	9d 81       	ldd	r25, Y+5	; 0x05
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <LCD_voidSendCmnd+0x154>
    236e:	9d 83       	std	Y+5, r25	; 0x05
    2370:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2372:	8e 81       	ldd	r24, Y+6	; 0x06
    2374:	9f 81       	ldd	r25, Y+7	; 0x07
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	9f 83       	std	Y+7, r25	; 0x07
    237a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237c:	8e 81       	ldd	r24, Y+6	; 0x06
    237e:	9f 81       	ldd	r25, Y+7	; 0x07
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	69 f7       	brne	.-38     	; 0x235e <LCD_voidSendCmnd+0x148>
    2384:	24 c0       	rjmp	.+72     	; 0x23ce <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2386:	68 85       	ldd	r22, Y+8	; 0x08
    2388:	79 85       	ldd	r23, Y+9	; 0x09
    238a:	8a 85       	ldd	r24, Y+10	; 0x0a
    238c:	9b 85       	ldd	r25, Y+11	; 0x0b
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9f 83       	std	Y+7, r25	; 0x07
    2398:	8e 83       	std	Y+6, r24	; 0x06
    239a:	8e 81       	ldd	r24, Y+6	; 0x06
    239c:	9f 81       	ldd	r25, Y+7	; 0x07
    239e:	9b 83       	std	Y+3, r25	; 0x03
    23a0:	8a 83       	std	Y+2, r24	; 0x02
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	9b 81       	ldd	r25, Y+3	; 0x03
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_voidSendCmnd+0x190>
    23aa:	9b 83       	std	Y+3, r25	; 0x03
    23ac:	8a 83       	std	Y+2, r24	; 0x02
    23ae:	0f c0       	rjmp	.+30     	; 0x23ce <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23b0:	69 89       	ldd	r22, Y+17	; 0x11
    23b2:	7a 89       	ldd	r23, Y+18	; 0x12
    23b4:	8b 89       	ldd	r24, Y+19	; 0x13
    23b6:	9c 89       	ldd	r25, Y+20	; 0x14
    23b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	88 8b       	std	Y+16, r24	; 0x10
    23c2:	88 89       	ldd	r24, Y+16	; 0x10
    23c4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	8a 95       	dec	r24
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_voidSendCmnd+0x1b2>
    23cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

	/*E = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_LOW);
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	62 e0       	ldi	r22, 0x02	; 2
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
	_delay_us(1);

	/*E = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_LOW);
#endif
}
    23d8:	69 96       	adiw	r28, 0x19	; 25
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	69 97       	sbiw	r28, 0x19	; 25
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	89 8f       	std	Y+25, r24	; 0x19

#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Rs = 1*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN0, DIO_u8_HIGH);
    2400:	82 e0       	ldi	r24, 0x02	; 2
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	41 e0       	ldi	r20, 0x01	; 1
    2406:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>

	/*Rw = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN1, DIO_u8_LOW);
    240a:	82 e0       	ldi	r24, 0x02	; 2
    240c:	61 e0       	ldi	r22, 0x01	; 1
    240e:	40 e0       	ldi	r20, 0x00	; 0
    2410:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>

	/*Write Command*/
	DIO_u8SetPortValue(DIO_u8_PORTD, Copy_u8Char);
    2414:	83 e0       	ldi	r24, 0x03	; 3
    2416:	69 8d       	ldd	r22, Y+25	; 0x19
    2418:	0e 94 89 0c 	call	0x1912	; 0x1912 <DIO_u8SetPortValue>

	/*E = 1*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_HIGH);
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	62 e0       	ldi	r22, 0x02	; 2
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e8       	ldi	r26, 0x80	; 128
    242c:	bf e3       	ldi	r27, 0x3F	; 63
    242e:	8d 8b       	std	Y+21, r24	; 0x15
    2430:	9e 8b       	std	Y+22, r25	; 0x16
    2432:	af 8b       	std	Y+23, r26	; 0x17
    2434:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2436:	6d 89       	ldd	r22, Y+21	; 0x15
    2438:	7e 89       	ldd	r23, Y+22	; 0x16
    243a:	8f 89       	ldd	r24, Y+23	; 0x17
    243c:	98 8d       	ldd	r25, Y+24	; 0x18
    243e:	2b ea       	ldi	r18, 0xAB	; 171
    2440:	3a ea       	ldi	r19, 0xAA	; 170
    2442:	4a ea       	ldi	r20, 0xAA	; 170
    2444:	5e e3       	ldi	r21, 0x3E	; 62
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	89 8b       	std	Y+17, r24	; 0x11
    2450:	9a 8b       	std	Y+18, r25	; 0x12
    2452:	ab 8b       	std	Y+19, r26	; 0x13
    2454:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2456:	69 89       	ldd	r22, Y+17	; 0x11
    2458:	7a 89       	ldd	r23, Y+18	; 0x12
    245a:	8b 89       	ldd	r24, Y+19	; 0x13
    245c:	9c 89       	ldd	r25, Y+20	; 0x14
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	1c f4       	brge	.+6      	; 0x2474 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	88 8b       	std	Y+16, r24	; 0x10
    2472:	91 c0       	rjmp	.+290    	; 0x2596 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2474:	69 89       	ldd	r22, Y+17	; 0x11
    2476:	7a 89       	ldd	r23, Y+18	; 0x12
    2478:	8b 89       	ldd	r24, Y+19	; 0x13
    247a:	9c 89       	ldd	r25, Y+20	; 0x14
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4f e7       	ldi	r20, 0x7F	; 127
    2482:	53 e4       	ldi	r21, 0x43	; 67
    2484:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2488:	18 16       	cp	r1, r24
    248a:	0c f0       	brlt	.+2      	; 0x248e <LCD_voidSendChar+0xa4>
    248c:	7b c0       	rjmp	.+246    	; 0x2584 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    248e:	6d 89       	ldd	r22, Y+21	; 0x15
    2490:	7e 89       	ldd	r23, Y+22	; 0x16
    2492:	8f 89       	ldd	r24, Y+23	; 0x17
    2494:	98 8d       	ldd	r25, Y+24	; 0x18
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4a e7       	ldi	r20, 0x7A	; 122
    249c:	54 e4       	ldi	r21, 0x44	; 68
    249e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8c 87       	std	Y+12, r24	; 0x0c
    24a8:	9d 87       	std	Y+13, r25	; 0x0d
    24aa:	ae 87       	std	Y+14, r26	; 0x0e
    24ac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    24b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    24b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    24b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	4a e7       	ldi	r20, 0x7A	; 122
    24bc:	53 e4       	ldi	r21, 0x43	; 67
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	88 87       	std	Y+8, r24	; 0x08
    24c8:	99 87       	std	Y+9, r25	; 0x09
    24ca:	aa 87       	std	Y+10, r26	; 0x0a
    24cc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24ce:	68 85       	ldd	r22, Y+8	; 0x08
    24d0:	79 85       	ldd	r23, Y+9	; 0x09
    24d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e2:	88 23       	and	r24, r24
    24e4:	2c f4       	brge	.+10     	; 0x24f0 <LCD_voidSendChar+0x106>
		__ticks = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9f 83       	std	Y+7, r25	; 0x07
    24ec:	8e 83       	std	Y+6, r24	; 0x06
    24ee:	3f c0       	rjmp	.+126    	; 0x256e <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    24f0:	68 85       	ldd	r22, Y+8	; 0x08
    24f2:	79 85       	ldd	r23, Y+9	; 0x09
    24f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	3f ef       	ldi	r19, 0xFF	; 255
    24fc:	4f e7       	ldi	r20, 0x7F	; 127
    24fe:	57 e4       	ldi	r21, 0x47	; 71
    2500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2504:	18 16       	cp	r1, r24
    2506:	4c f5       	brge	.+82     	; 0x255a <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	6c 85       	ldd	r22, Y+12	; 0x0c
    250a:	7d 85       	ldd	r23, Y+13	; 0x0d
    250c:	8e 85       	ldd	r24, Y+14	; 0x0e
    250e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9f 83       	std	Y+7, r25	; 0x07
    252e:	8e 83       	std	Y+6, r24	; 0x06
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <LCD_voidSendChar+0x166>
    2532:	89 e1       	ldi	r24, 0x19	; 25
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9d 83       	std	Y+5, r25	; 0x05
    2538:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    253a:	8c 81       	ldd	r24, Y+4	; 0x04
    253c:	9d 81       	ldd	r25, Y+5	; 0x05
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_voidSendChar+0x154>
    2542:	9d 83       	std	Y+5, r25	; 0x05
    2544:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	8e 81       	ldd	r24, Y+6	; 0x06
    2548:	9f 81       	ldd	r25, Y+7	; 0x07
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	9f 83       	std	Y+7, r25	; 0x07
    254e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	8e 81       	ldd	r24, Y+6	; 0x06
    2552:	9f 81       	ldd	r25, Y+7	; 0x07
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	69 f7       	brne	.-38     	; 0x2532 <LCD_voidSendChar+0x148>
    2558:	24 c0       	rjmp	.+72     	; 0x25a2 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255a:	68 85       	ldd	r22, Y+8	; 0x08
    255c:	79 85       	ldd	r23, Y+9	; 0x09
    255e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2560:	9b 85       	ldd	r25, Y+11	; 0x0b
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9f 83       	std	Y+7, r25	; 0x07
    256c:	8e 83       	std	Y+6, r24	; 0x06
    256e:	8e 81       	ldd	r24, Y+6	; 0x06
    2570:	9f 81       	ldd	r25, Y+7	; 0x07
    2572:	9b 83       	std	Y+3, r25	; 0x03
    2574:	8a 83       	std	Y+2, r24	; 0x02
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	9b 81       	ldd	r25, Y+3	; 0x03
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_voidSendChar+0x190>
    257e:	9b 83       	std	Y+3, r25	; 0x03
    2580:	8a 83       	std	Y+2, r24	; 0x02
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2584:	69 89       	ldd	r22, Y+17	; 0x11
    2586:	7a 89       	ldd	r23, Y+18	; 0x12
    2588:	8b 89       	ldd	r24, Y+19	; 0x13
    258a:	9c 89       	ldd	r25, Y+20	; 0x14
    258c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	88 8b       	std	Y+16, r24	; 0x10
    2596:	88 89       	ldd	r24, Y+16	; 0x10
    2598:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	8a 95       	dec	r24
    259e:	f1 f7       	brne	.-4      	; 0x259c <LCD_voidSendChar+0x1b2>
    25a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

	/*E = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_LOW);
    25a2:	82 e0       	ldi	r24, 0x02	; 2
    25a4:	62 e0       	ldi	r22, 0x02	; 2
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>

	/*E = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_LOW);

#endif
}
    25ac:	69 96       	adiw	r28, 0x19	; 25
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <LCD_voideInit>:
void LCD_voideInit(void)
{
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	cc 54       	subi	r28, 0x4C	; 76
    25cc:	d0 40       	sbci	r29, 0x00	; 0
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	fe 01       	movw	r30, r28
    25da:	e7 5b       	subi	r30, 0xB7	; 183
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	ac e0       	ldi	r26, 0x0C	; 12
    25e4:	b2 e4       	ldi	r27, 0x42	; 66
    25e6:	80 83       	st	Z, r24
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	a2 83       	std	Z+2, r26	; 0x02
    25ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ee:	8e 01       	movw	r16, r28
    25f0:	0b 5b       	subi	r16, 0xBB	; 187
    25f2:	1f 4f       	sbci	r17, 0xFF	; 255
    25f4:	fe 01       	movw	r30, r28
    25f6:	e7 5b       	subi	r30, 0xB7	; 183
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	60 81       	ld	r22, Z
    25fc:	71 81       	ldd	r23, Z+1	; 0x01
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	93 81       	ldd	r25, Z+3	; 0x03
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4a e7       	ldi	r20, 0x7A	; 122
    2608:	53 e4       	ldi	r21, 0x43	; 67
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	f8 01       	movw	r30, r16
    2614:	80 83       	st	Z, r24
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	a2 83       	std	Z+2, r26	; 0x02
    261a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    261c:	fe 01       	movw	r30, r28
    261e:	eb 5b       	subi	r30, 0xBB	; 187
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	44 f4       	brge	.+16     	; 0x264a <LCD_voideInit+0x8c>
		__ticks = 1;
    263a:	fe 01       	movw	r30, r28
    263c:	ed 5b       	subi	r30, 0xBD	; 189
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	80 83       	st	Z, r24
    2648:	64 c0       	rjmp	.+200    	; 0x2712 <LCD_voideInit+0x154>
	else if (__tmp > 65535)
    264a:	fe 01       	movw	r30, r28
    264c:	eb 5b       	subi	r30, 0xBB	; 187
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	60 81       	ld	r22, Z
    2652:	71 81       	ldd	r23, Z+1	; 0x01
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	93 81       	ldd	r25, Z+3	; 0x03
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	3f ef       	ldi	r19, 0xFF	; 255
    265c:	4f e7       	ldi	r20, 0x7F	; 127
    265e:	57 e4       	ldi	r21, 0x47	; 71
    2660:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2664:	18 16       	cp	r1, r24
    2666:	0c f0       	brlt	.+2      	; 0x266a <LCD_voideInit+0xac>
    2668:	43 c0       	rjmp	.+134    	; 0x26f0 <LCD_voideInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	fe 01       	movw	r30, r28
    266c:	e7 5b       	subi	r30, 0xB7	; 183
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	8e 01       	movw	r16, r28
    268a:	0d 5b       	subi	r16, 0xBD	; 189
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	f8 01       	movw	r30, r16
    269c:	91 83       	std	Z+1, r25	; 0x01
    269e:	80 83       	st	Z, r24
    26a0:	1f c0       	rjmp	.+62     	; 0x26e0 <LCD_voideInit+0x122>
    26a2:	fe 01       	movw	r30, r28
    26a4:	ef 5b       	subi	r30, 0xBF	; 191
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	89 e1       	ldi	r24, 0x19	; 25
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26b0:	fe 01       	movw	r30, r28
    26b2:	ef 5b       	subi	r30, 0xBF	; 191
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <LCD_voideInit+0xfc>
    26be:	fe 01       	movw	r30, r28
    26c0:	ef 5b       	subi	r30, 0xBF	; 191
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c8:	de 01       	movw	r26, r28
    26ca:	ad 5b       	subi	r26, 0xBD	; 189
    26cc:	bf 4f       	sbci	r27, 0xFF	; 255
    26ce:	fe 01       	movw	r30, r28
    26d0:	ed 5b       	subi	r30, 0xBD	; 189
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	11 96       	adiw	r26, 0x01	; 1
    26dc:	9c 93       	st	X, r25
    26de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e0:	fe 01       	movw	r30, r28
    26e2:	ed 5b       	subi	r30, 0xBD	; 189
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	80 81       	ld	r24, Z
    26e8:	91 81       	ldd	r25, Z+1	; 0x01
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	d1 f6       	brne	.-76     	; 0x26a2 <LCD_voideInit+0xe4>
    26ee:	24 c0       	rjmp	.+72     	; 0x2738 <LCD_voideInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f0:	8e 01       	movw	r16, r28
    26f2:	0d 5b       	subi	r16, 0xBD	; 189
    26f4:	1f 4f       	sbci	r17, 0xFF	; 255
    26f6:	fe 01       	movw	r30, r28
    26f8:	eb 5b       	subi	r30, 0xBB	; 187
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	f8 01       	movw	r30, r16
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	80 83       	st	Z, r24
    2712:	fe 01       	movw	r30, r28
    2714:	ed 5b       	subi	r30, 0xBD	; 189
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	91 81       	ldd	r25, Z+1	; 0x01
    271c:	fe 01       	movw	r30, r28
    271e:	ff 96       	adiw	r30, 0x3f	; 63
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
    2724:	fe 01       	movw	r30, r28
    2726:	ff 96       	adiw	r30, 0x3f	; 63
    2728:	80 81       	ld	r24, Z
    272a:	91 81       	ldd	r25, Z+1	; 0x01
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <LCD_voideInit+0x16e>
    2730:	fe 01       	movw	r30, r28
    2732:	ff 96       	adiw	r30, 0x3f	; 63
    2734:	91 83       	std	Z+1, r25	; 0x01
    2736:	80 83       	st	Z, r24
#if LCD_u8_MODE == LCD_u8_MODE_8BIT
	_delay_ms(35);
	// Function set cmd
	LCD_voidSendCmnd(0b00111000); // set for 8bits
    2738:	88 e3       	ldi	r24, 0x38	; 56
    273a:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_voidSendCmnd>
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	a0 e2       	ldi	r26, 0x20	; 32
    2744:	b2 e4       	ldi	r27, 0x42	; 66
    2746:	8b af       	std	Y+59, r24	; 0x3b
    2748:	9c af       	std	Y+60, r25	; 0x3c
    274a:	ad af       	std	Y+61, r26	; 0x3d
    274c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    274e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2750:	7c ad       	ldd	r23, Y+60	; 0x3c
    2752:	8d ad       	ldd	r24, Y+61	; 0x3d
    2754:	9e ad       	ldd	r25, Y+62	; 0x3e
    2756:	2b ea       	ldi	r18, 0xAB	; 171
    2758:	3a ea       	ldi	r19, 0xAA	; 170
    275a:	4a ea       	ldi	r20, 0xAA	; 170
    275c:	5e e3       	ldi	r21, 0x3E	; 62
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	8f ab       	std	Y+55, r24	; 0x37
    2768:	98 af       	std	Y+56, r25	; 0x38
    276a:	a9 af       	std	Y+57, r26	; 0x39
    276c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    276e:	6f a9       	ldd	r22, Y+55	; 0x37
    2770:	78 ad       	ldd	r23, Y+56	; 0x38
    2772:	89 ad       	ldd	r24, Y+57	; 0x39
    2774:	9a ad       	ldd	r25, Y+58	; 0x3a
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e8       	ldi	r20, 0x80	; 128
    277c:	5f e3       	ldi	r21, 0x3F	; 63
    277e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2782:	88 23       	and	r24, r24
    2784:	1c f4       	brge	.+6      	; 0x278c <LCD_voideInit+0x1ce>
		__ticks = 1;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	8e ab       	std	Y+54, r24	; 0x36
    278a:	91 c0       	rjmp	.+290    	; 0x28ae <LCD_voideInit+0x2f0>
	else if (__tmp > 255)
    278c:	6f a9       	ldd	r22, Y+55	; 0x37
    278e:	78 ad       	ldd	r23, Y+56	; 0x38
    2790:	89 ad       	ldd	r24, Y+57	; 0x39
    2792:	9a ad       	ldd	r25, Y+58	; 0x3a
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	53 e4       	ldi	r21, 0x43	; 67
    279c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a0:	18 16       	cp	r1, r24
    27a2:	0c f0       	brlt	.+2      	; 0x27a6 <LCD_voideInit+0x1e8>
    27a4:	7b c0       	rjmp	.+246    	; 0x289c <LCD_voideInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    27a6:	6b ad       	ldd	r22, Y+59	; 0x3b
    27a8:	7c ad       	ldd	r23, Y+60	; 0x3c
    27aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    27ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	4a e7       	ldi	r20, 0x7A	; 122
    27b4:	54 e4       	ldi	r21, 0x44	; 68
    27b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	8a ab       	std	Y+50, r24	; 0x32
    27c0:	9b ab       	std	Y+51, r25	; 0x33
    27c2:	ac ab       	std	Y+52, r26	; 0x34
    27c4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c6:	6a a9       	ldd	r22, Y+50	; 0x32
    27c8:	7b a9       	ldd	r23, Y+51	; 0x33
    27ca:	8c a9       	ldd	r24, Y+52	; 0x34
    27cc:	9d a9       	ldd	r25, Y+53	; 0x35
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4a e7       	ldi	r20, 0x7A	; 122
    27d4:	53 e4       	ldi	r21, 0x43	; 67
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	8e a7       	std	Y+46, r24	; 0x2e
    27e0:	9f a7       	std	Y+47, r25	; 0x2f
    27e2:	a8 ab       	std	Y+48, r26	; 0x30
    27e4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    27e6:	6e a5       	ldd	r22, Y+46	; 0x2e
    27e8:	7f a5       	ldd	r23, Y+47	; 0x2f
    27ea:	88 a9       	ldd	r24, Y+48	; 0x30
    27ec:	99 a9       	ldd	r25, Y+49	; 0x31
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e8       	ldi	r20, 0x80	; 128
    27f4:	5f e3       	ldi	r21, 0x3F	; 63
    27f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27fa:	88 23       	and	r24, r24
    27fc:	2c f4       	brge	.+10     	; 0x2808 <LCD_voideInit+0x24a>
		__ticks = 1;
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	9d a7       	std	Y+45, r25	; 0x2d
    2804:	8c a7       	std	Y+44, r24	; 0x2c
    2806:	3f c0       	rjmp	.+126    	; 0x2886 <LCD_voideInit+0x2c8>
	else if (__tmp > 65535)
    2808:	6e a5       	ldd	r22, Y+46	; 0x2e
    280a:	7f a5       	ldd	r23, Y+47	; 0x2f
    280c:	88 a9       	ldd	r24, Y+48	; 0x30
    280e:	99 a9       	ldd	r25, Y+49	; 0x31
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	3f ef       	ldi	r19, 0xFF	; 255
    2814:	4f e7       	ldi	r20, 0x7F	; 127
    2816:	57 e4       	ldi	r21, 0x47	; 71
    2818:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281c:	18 16       	cp	r1, r24
    281e:	4c f5       	brge	.+82     	; 0x2872 <LCD_voideInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2820:	6a a9       	ldd	r22, Y+50	; 0x32
    2822:	7b a9       	ldd	r23, Y+51	; 0x33
    2824:	8c a9       	ldd	r24, Y+52	; 0x34
    2826:	9d a9       	ldd	r25, Y+53	; 0x35
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e2       	ldi	r20, 0x20	; 32
    282e:	51 e4       	ldi	r21, 0x41	; 65
    2830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	bc 01       	movw	r22, r24
    283a:	cd 01       	movw	r24, r26
    283c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9d a7       	std	Y+45, r25	; 0x2d
    2846:	8c a7       	std	Y+44, r24	; 0x2c
    2848:	0f c0       	rjmp	.+30     	; 0x2868 <LCD_voideInit+0x2aa>
    284a:	89 e1       	ldi	r24, 0x19	; 25
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9b a7       	std	Y+43, r25	; 0x2b
    2850:	8a a7       	std	Y+42, r24	; 0x2a
    2852:	8a a5       	ldd	r24, Y+42	; 0x2a
    2854:	9b a5       	ldd	r25, Y+43	; 0x2b
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <LCD_voideInit+0x298>
    285a:	9b a7       	std	Y+43, r25	; 0x2b
    285c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2860:	9d a5       	ldd	r25, Y+45	; 0x2d
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	9d a7       	std	Y+45, r25	; 0x2d
    2866:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2868:	8c a5       	ldd	r24, Y+44	; 0x2c
    286a:	9d a5       	ldd	r25, Y+45	; 0x2d
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	69 f7       	brne	.-38     	; 0x284a <LCD_voideInit+0x28c>
    2870:	24 c0       	rjmp	.+72     	; 0x28ba <LCD_voideInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2872:	6e a5       	ldd	r22, Y+46	; 0x2e
    2874:	7f a5       	ldd	r23, Y+47	; 0x2f
    2876:	88 a9       	ldd	r24, Y+48	; 0x30
    2878:	99 a9       	ldd	r25, Y+49	; 0x31
    287a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	9d a7       	std	Y+45, r25	; 0x2d
    2884:	8c a7       	std	Y+44, r24	; 0x2c
    2886:	8c a5       	ldd	r24, Y+44	; 0x2c
    2888:	9d a5       	ldd	r25, Y+45	; 0x2d
    288a:	99 a7       	std	Y+41, r25	; 0x29
    288c:	88 a7       	std	Y+40, r24	; 0x28
    288e:	88 a5       	ldd	r24, Y+40	; 0x28
    2890:	99 a5       	ldd	r25, Y+41	; 0x29
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <LCD_voideInit+0x2d4>
    2896:	99 a7       	std	Y+41, r25	; 0x29
    2898:	88 a7       	std	Y+40, r24	; 0x28
    289a:	0f c0       	rjmp	.+30     	; 0x28ba <LCD_voideInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    289c:	6f a9       	ldd	r22, Y+55	; 0x37
    289e:	78 ad       	ldd	r23, Y+56	; 0x38
    28a0:	89 ad       	ldd	r24, Y+57	; 0x39
    28a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	8e ab       	std	Y+54, r24	; 0x36
    28ae:	8e a9       	ldd	r24, Y+54	; 0x36
    28b0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28b2:	8f a1       	ldd	r24, Y+39	; 0x27
    28b4:	8a 95       	dec	r24
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <LCD_voideInit+0x2f6>
    28b8:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111); // display ON/OFF command
    28ba:	8f e0       	ldi	r24, 0x0F	; 15
    28bc:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_voidSendCmnd>
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a0 e2       	ldi	r26, 0x20	; 32
    28c6:	b2 e4       	ldi	r27, 0x42	; 66
    28c8:	8b a3       	std	Y+35, r24	; 0x23
    28ca:	9c a3       	std	Y+36, r25	; 0x24
    28cc:	ad a3       	std	Y+37, r26	; 0x25
    28ce:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28d0:	6b a1       	ldd	r22, Y+35	; 0x23
    28d2:	7c a1       	ldd	r23, Y+36	; 0x24
    28d4:	8d a1       	ldd	r24, Y+37	; 0x25
    28d6:	9e a1       	ldd	r25, Y+38	; 0x26
    28d8:	2b ea       	ldi	r18, 0xAB	; 171
    28da:	3a ea       	ldi	r19, 0xAA	; 170
    28dc:	4a ea       	ldi	r20, 0xAA	; 170
    28de:	5e e3       	ldi	r21, 0x3E	; 62
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	8f 8f       	std	Y+31, r24	; 0x1f
    28ea:	98 a3       	std	Y+32, r25	; 0x20
    28ec:	a9 a3       	std	Y+33, r26	; 0x21
    28ee:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    28f0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28f2:	78 a1       	ldd	r23, Y+32	; 0x20
    28f4:	89 a1       	ldd	r24, Y+33	; 0x21
    28f6:	9a a1       	ldd	r25, Y+34	; 0x22
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e8       	ldi	r20, 0x80	; 128
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2904:	88 23       	and	r24, r24
    2906:	1c f4       	brge	.+6      	; 0x290e <LCD_voideInit+0x350>
		__ticks = 1;
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	8e 8f       	std	Y+30, r24	; 0x1e
    290c:	91 c0       	rjmp	.+290    	; 0x2a30 <LCD_voideInit+0x472>
	else if (__tmp > 255)
    290e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2910:	78 a1       	ldd	r23, Y+32	; 0x20
    2912:	89 a1       	ldd	r24, Y+33	; 0x21
    2914:	9a a1       	ldd	r25, Y+34	; 0x22
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	53 e4       	ldi	r21, 0x43	; 67
    291e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	0c f0       	brlt	.+2      	; 0x2928 <LCD_voideInit+0x36a>
    2926:	7b c0       	rjmp	.+246    	; 0x2a1e <LCD_voideInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2928:	6b a1       	ldd	r22, Y+35	; 0x23
    292a:	7c a1       	ldd	r23, Y+36	; 0x24
    292c:	8d a1       	ldd	r24, Y+37	; 0x25
    292e:	9e a1       	ldd	r25, Y+38	; 0x26
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	4a e7       	ldi	r20, 0x7A	; 122
    2936:	54 e4       	ldi	r21, 0x44	; 68
    2938:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	8a 8f       	std	Y+26, r24	; 0x1a
    2942:	9b 8f       	std	Y+27, r25	; 0x1b
    2944:	ac 8f       	std	Y+28, r26	; 0x1c
    2946:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2948:	6a 8d       	ldd	r22, Y+26	; 0x1a
    294a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    294c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    294e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	4a e7       	ldi	r20, 0x7A	; 122
    2956:	53 e4       	ldi	r21, 0x43	; 67
    2958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	8e 8b       	std	Y+22, r24	; 0x16
    2962:	9f 8b       	std	Y+23, r25	; 0x17
    2964:	a8 8f       	std	Y+24, r26	; 0x18
    2966:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2968:	6e 89       	ldd	r22, Y+22	; 0x16
    296a:	7f 89       	ldd	r23, Y+23	; 0x17
    296c:	88 8d       	ldd	r24, Y+24	; 0x18
    296e:	99 8d       	ldd	r25, Y+25	; 0x19
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e8       	ldi	r20, 0x80	; 128
    2976:	5f e3       	ldi	r21, 0x3F	; 63
    2978:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    297c:	88 23       	and	r24, r24
    297e:	2c f4       	brge	.+10     	; 0x298a <LCD_voideInit+0x3cc>
		__ticks = 1;
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	9d 8b       	std	Y+21, r25	; 0x15
    2986:	8c 8b       	std	Y+20, r24	; 0x14
    2988:	3f c0       	rjmp	.+126    	; 0x2a08 <LCD_voideInit+0x44a>
	else if (__tmp > 65535)
    298a:	6e 89       	ldd	r22, Y+22	; 0x16
    298c:	7f 89       	ldd	r23, Y+23	; 0x17
    298e:	88 8d       	ldd	r24, Y+24	; 0x18
    2990:	99 8d       	ldd	r25, Y+25	; 0x19
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	3f ef       	ldi	r19, 0xFF	; 255
    2996:	4f e7       	ldi	r20, 0x7F	; 127
    2998:	57 e4       	ldi	r21, 0x47	; 71
    299a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    299e:	18 16       	cp	r1, r24
    29a0:	4c f5       	brge	.+82     	; 0x29f4 <LCD_voideInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    29a4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    29a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e2       	ldi	r20, 0x20	; 32
    29b0:	51 e4       	ldi	r21, 0x41	; 65
    29b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	9d 8b       	std	Y+21, r25	; 0x15
    29c8:	8c 8b       	std	Y+20, r24	; 0x14
    29ca:	0f c0       	rjmp	.+30     	; 0x29ea <LCD_voideInit+0x42c>
    29cc:	89 e1       	ldi	r24, 0x19	; 25
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	9b 8b       	std	Y+19, r25	; 0x13
    29d2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29d4:	8a 89       	ldd	r24, Y+18	; 0x12
    29d6:	9b 89       	ldd	r25, Y+19	; 0x13
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <LCD_voideInit+0x41a>
    29dc:	9b 8b       	std	Y+19, r25	; 0x13
    29de:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e0:	8c 89       	ldd	r24, Y+20	; 0x14
    29e2:	9d 89       	ldd	r25, Y+21	; 0x15
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	9d 8b       	std	Y+21, r25	; 0x15
    29e8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ea:	8c 89       	ldd	r24, Y+20	; 0x14
    29ec:	9d 89       	ldd	r25, Y+21	; 0x15
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	69 f7       	brne	.-38     	; 0x29cc <LCD_voideInit+0x40e>
    29f2:	24 c0       	rjmp	.+72     	; 0x2a3c <LCD_voideInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f4:	6e 89       	ldd	r22, Y+22	; 0x16
    29f6:	7f 89       	ldd	r23, Y+23	; 0x17
    29f8:	88 8d       	ldd	r24, Y+24	; 0x18
    29fa:	99 8d       	ldd	r25, Y+25	; 0x19
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	9d 8b       	std	Y+21, r25	; 0x15
    2a06:	8c 8b       	std	Y+20, r24	; 0x14
    2a08:	8c 89       	ldd	r24, Y+20	; 0x14
    2a0a:	9d 89       	ldd	r25, Y+21	; 0x15
    2a0c:	99 8b       	std	Y+17, r25	; 0x11
    2a0e:	88 8b       	std	Y+16, r24	; 0x10
    2a10:	88 89       	ldd	r24, Y+16	; 0x10
    2a12:	99 89       	ldd	r25, Y+17	; 0x11
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <LCD_voideInit+0x456>
    2a18:	99 8b       	std	Y+17, r25	; 0x11
    2a1a:	88 8b       	std	Y+16, r24	; 0x10
    2a1c:	0f c0       	rjmp	.+30     	; 0x2a3c <LCD_voideInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a1e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a20:	78 a1       	ldd	r23, Y+32	; 0x20
    2a22:	89 a1       	ldd	r24, Y+33	; 0x21
    2a24:	9a a1       	ldd	r25, Y+34	; 0x22
    2a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	8e 8f       	std	Y+30, r24	; 0x1e
    2a30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a32:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a36:	8a 95       	dec	r24
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <LCD_voideInit+0x478>
    2a3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0x01); // clear 8 bits
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_voidSendCmnd>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	a0 ea       	ldi	r26, 0xA0	; 160
    2a48:	b0 e4       	ldi	r27, 0x40	; 64
    2a4a:	8b 87       	std	Y+11, r24	; 0x0b
    2a4c:	9c 87       	std	Y+12, r25	; 0x0c
    2a4e:	ad 87       	std	Y+13, r26	; 0x0d
    2a50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	4a e7       	ldi	r20, 0x7A	; 122
    2a60:	53 e4       	ldi	r21, 0x43	; 67
    2a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	8f 83       	std	Y+7, r24	; 0x07
    2a6c:	98 87       	std	Y+8, r25	; 0x08
    2a6e:	a9 87       	std	Y+9, r26	; 0x09
    2a70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a72:	6f 81       	ldd	r22, Y+7	; 0x07
    2a74:	78 85       	ldd	r23, Y+8	; 0x08
    2a76:	89 85       	ldd	r24, Y+9	; 0x09
    2a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e8       	ldi	r20, 0x80	; 128
    2a80:	5f e3       	ldi	r21, 0x3F	; 63
    2a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a86:	88 23       	and	r24, r24
    2a88:	2c f4       	brge	.+10     	; 0x2a94 <LCD_voideInit+0x4d6>
		__ticks = 1;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	3f c0       	rjmp	.+126    	; 0x2b12 <LCD_voideInit+0x554>
	else if (__tmp > 65535)
    2a94:	6f 81       	ldd	r22, Y+7	; 0x07
    2a96:	78 85       	ldd	r23, Y+8	; 0x08
    2a98:	89 85       	ldd	r24, Y+9	; 0x09
    2a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	3f ef       	ldi	r19, 0xFF	; 255
    2aa0:	4f e7       	ldi	r20, 0x7F	; 127
    2aa2:	57 e4       	ldi	r21, 0x47	; 71
    2aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa8:	18 16       	cp	r1, r24
    2aaa:	4c f5       	brge	.+82     	; 0x2afe <LCD_voideInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e2       	ldi	r20, 0x20	; 32
    2aba:	51 e4       	ldi	r21, 0x41	; 65
    2abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	9e 83       	std	Y+6, r25	; 0x06
    2ad2:	8d 83       	std	Y+5, r24	; 0x05
    2ad4:	0f c0       	rjmp	.+30     	; 0x2af4 <LCD_voideInit+0x536>
    2ad6:	89 e1       	ldi	r24, 0x19	; 25
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	9c 83       	std	Y+4, r25	; 0x04
    2adc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <LCD_voideInit+0x524>
    2ae6:	9c 83       	std	Y+4, r25	; 0x04
    2ae8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	9e 83       	std	Y+6, r25	; 0x06
    2af2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af4:	8d 81       	ldd	r24, Y+5	; 0x05
    2af6:	9e 81       	ldd	r25, Y+6	; 0x06
    2af8:	00 97       	sbiw	r24, 0x00	; 0
    2afa:	69 f7       	brne	.-38     	; 0x2ad6 <LCD_voideInit+0x518>
    2afc:	14 c0       	rjmp	.+40     	; 0x2b26 <LCD_voideInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afe:	6f 81       	ldd	r22, Y+7	; 0x07
    2b00:	78 85       	ldd	r23, Y+8	; 0x08
    2b02:	89 85       	ldd	r24, Y+9	; 0x09
    2b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	9e 83       	std	Y+6, r25	; 0x06
    2b10:	8d 83       	std	Y+5, r24	; 0x05
    2b12:	8d 81       	ldd	r24, Y+5	; 0x05
    2b14:	9e 81       	ldd	r25, Y+6	; 0x06
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <LCD_voideInit+0x560>
    2b22:	9a 83       	std	Y+2, r25	; 0x02
    2b24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	LCD_voidSendCmnd(0b00000110); // set mood for 8 bits
    2b26:	86 e0       	ldi	r24, 0x06	; 6
    2b28:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_voidSendCmnd>
	LCD_voidSendCmnd(0x01); // clear 8 bits
	_delay_ms(5);
	LCD_voidSendCmnd(0b00000110); // set mood for 8 bits

#endif
}
    2b2c:	c4 5b       	subi	r28, 0xB4	; 180
    2b2e:	df 4f       	sbci	r29, 0xFF	; 255
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	1f 91       	pop	r17
    2b40:	0f 91       	pop	r16
    2b42:	08 95       	ret

00002b44 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 COPY_u8LineNum, u8 Copy_u8location)
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <LCD_u8GoToXY+0x6>
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <LCD_u8GoToXY+0x8>
    2b4c:	0f 92       	push	r0
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	8a 83       	std	Y+2, r24	; 0x02
    2b54:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8Errorstate = STD_TYPES_OK;
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	89 83       	std	Y+1, r24	; 0x01
	if (COPY_u8LineNum <= 39)
    2b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5c:	88 32       	cpi	r24, 0x28	; 40
    2b5e:	e0 f4       	brcc	.+56     	; 0x2b98 <LCD_u8GoToXY+0x54>
	{
		switch (COPY_u8LineNum)
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	3d 83       	std	Y+5, r19	; 0x05
    2b68:	2c 83       	std	Y+4, r18	; 0x04
    2b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	31 f0       	breq	.+12     	; 0x2b7e <LCD_u8GoToXY+0x3a>
    2b72:	2c 81       	ldd	r18, Y+4	; 0x04
    2b74:	3d 81       	ldd	r19, Y+5	; 0x05
    2b76:	21 30       	cpi	r18, 0x01	; 1
    2b78:	31 05       	cpc	r19, r1
    2b7a:	31 f0       	breq	.+12     	; 0x2b88 <LCD_u8GoToXY+0x44>
    2b7c:	0a c0       	rjmp	.+20     	; 0x2b92 <LCD_u8GoToXY+0x4e>
		{
		case LCD_u8_LINE1:
			LCD_voidSendCmnd(0x80 + Copy_u8location);
    2b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b80:	80 58       	subi	r24, 0x80	; 128
    2b82:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_voidSendCmnd>
    2b86:	0a c0       	rjmp	.+20     	; 0x2b9c <LCD_u8GoToXY+0x58>
			break;
		case LCD_u8_LINE2:
			LCD_voidSendCmnd(0xC0 + Copy_u8location);
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	80 54       	subi	r24, 0x40	; 64
    2b8c:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_voidSendCmnd>
    2b90:	05 c0       	rjmp	.+10     	; 0x2b9c <LCD_u8GoToXY+0x58>
			break;
		default:
			local_u8Errorstate = STD_TYPES_OK;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	89 83       	std	Y+1, r24	; 0x01
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <LCD_u8GoToXY+0x58>
		}
	}
	else
	{
		local_u8Errorstate = STD_TYPES_OK;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8Errorstate;
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <LCD_voidClearScreen>:
void LCD_voidClearScreen()
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	2e 97       	sbiw	r28, 0x0e	; 14
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0x01);
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_voidSendCmnd>
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	a0 e0       	ldi	r26, 0x00	; 0
    2bce:	b0 e4       	ldi	r27, 0x40	; 64
    2bd0:	8b 87       	std	Y+11, r24	; 0x0b
    2bd2:	9c 87       	std	Y+12, r25	; 0x0c
    2bd4:	ad 87       	std	Y+13, r26	; 0x0d
    2bd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	4a e7       	ldi	r20, 0x7A	; 122
    2be6:	53 e4       	ldi	r21, 0x43	; 67
    2be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	8f 83       	std	Y+7, r24	; 0x07
    2bf2:	98 87       	std	Y+8, r25	; 0x08
    2bf4:	a9 87       	std	Y+9, r26	; 0x09
    2bf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfa:	78 85       	ldd	r23, Y+8	; 0x08
    2bfc:	89 85       	ldd	r24, Y+9	; 0x09
    2bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e8       	ldi	r20, 0x80	; 128
    2c06:	5f e3       	ldi	r21, 0x3F	; 63
    2c08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c0c:	88 23       	and	r24, r24
    2c0e:	2c f4       	brge	.+10     	; 0x2c1a <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	9e 83       	std	Y+6, r25	; 0x06
    2c16:	8d 83       	std	Y+5, r24	; 0x05
    2c18:	3f c0       	rjmp	.+126    	; 0x2c98 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1c:	78 85       	ldd	r23, Y+8	; 0x08
    2c1e:	89 85       	ldd	r24, Y+9	; 0x09
    2c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	3f ef       	ldi	r19, 0xFF	; 255
    2c26:	4f e7       	ldi	r20, 0x7F	; 127
    2c28:	57 e4       	ldi	r21, 0x47	; 71
    2c2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c2e:	18 16       	cp	r1, r24
    2c30:	4c f5       	brge	.+82     	; 0x2c84 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e2       	ldi	r20, 0x20	; 32
    2c40:	51 e4       	ldi	r21, 0x41	; 65
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	9e 83       	std	Y+6, r25	; 0x06
    2c58:	8d 83       	std	Y+5, r24	; 0x05
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <LCD_voidClearScreen+0xcc>
    2c5c:	89 e1       	ldi	r24, 0x19	; 25
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	9c 83       	std	Y+4, r25	; 0x04
    2c62:	8b 83       	std	Y+3, r24	; 0x03
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	9c 81       	ldd	r25, Y+4	; 0x04
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <LCD_voidClearScreen+0xba>
    2c6c:	9c 83       	std	Y+4, r25	; 0x04
    2c6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c70:	8d 81       	ldd	r24, Y+5	; 0x05
    2c72:	9e 81       	ldd	r25, Y+6	; 0x06
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	69 f7       	brne	.-38     	; 0x2c5c <LCD_voidClearScreen+0xae>
    2c82:	14 c0       	rjmp	.+40     	; 0x2cac <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c84:	6f 81       	ldd	r22, Y+7	; 0x07
    2c86:	78 85       	ldd	r23, Y+8	; 0x08
    2c88:	89 85       	ldd	r24, Y+9	; 0x09
    2c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	9e 83       	std	Y+6, r25	; 0x06
    2c96:	8d 83       	std	Y+5, r24	; 0x05
    2c98:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9c:	9a 83       	std	Y+2, r25	; 0x02
    2c9e:	89 83       	std	Y+1, r24	; 0x01
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <LCD_voidClearScreen+0xf6>
    2ca8:	9a 83       	std	Y+2, r25	; 0x02
    2caa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0x80);
    2cac:	80 e8       	ldi	r24, 0x80	; 128
    2cae:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_voidSendCmnd>
}
    2cb2:	2e 96       	adiw	r28, 0x0e	; 14
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <LCD_voidSendString>:
void LCD_voidSendString(const char *str)
{
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <LCD_voidSendString+0x6>
    2cca:	0f 92       	push	r0
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	9b 83       	std	Y+3, r25	; 0x03
    2cd2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2cd4:	19 82       	std	Y+1, r1	; 0x01
    2cd6:	0e c0       	rjmp	.+28     	; 0x2cf4 <LCD_voidSendString+0x30>
	while (str[i] != '\0')
	{
		LCD_voidSendChar(str[i]);
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	28 2f       	mov	r18, r24
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	e2 0f       	add	r30, r18
    2ce6:	f3 1f       	adc	r31, r19
    2ce8:	80 81       	ld	r24, Z
    2cea:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendChar>
		i++;
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	8f 5f       	subi	r24, 0xFF	; 255
    2cf2:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCmnd(0x80);
}
void LCD_voidSendString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfe:	fc 01       	movw	r30, r24
    2d00:	e2 0f       	add	r30, r18
    2d02:	f3 1f       	adc	r31, r19
    2d04:	80 81       	ld	r24, Z
    2d06:	88 23       	and	r24, r24
    2d08:	39 f7       	brne	.-50     	; 0x2cd8 <LCD_voidSendString+0x14>
	{
		LCD_voidSendChar(str[i]);
		i++;
	}
}
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <LCD_String_Position>:
void LCD_String_Position(char line, char pos, char *str)
{
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	2a 97       	sbiw	r28, 0x0a	; 10
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	8e 83       	std	Y+6, r24	; 0x06
    2d2c:	6f 83       	std	Y+7, r22	; 0x07
    2d2e:	59 87       	std	Y+9, r21	; 0x09
    2d30:	48 87       	std	Y+8, r20	; 0x08
    // Ensure the line and position values are within valid ranges
    if (line >= 0 && line <= 1 && pos >= 0 && pos <= 15)
    2d32:	8e 81       	ldd	r24, Y+6	; 0x06
    2d34:	82 30       	cpi	r24, 0x02	; 2
    2d36:	08 f0       	brcs	.+2      	; 0x2d3a <LCD_String_Position+0x24>
    2d38:	77 c0       	rjmp	.+238    	; 0x2e28 <LCD_String_Position+0x112>
    2d3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d3c:	80 31       	cpi	r24, 0x10	; 16
    2d3e:	08 f0       	brcs	.+2      	; 0x2d42 <LCD_String_Position+0x2c>
    2d40:	73 c0       	rjmp	.+230    	; 0x2e28 <LCD_String_Position+0x112>
    {
        // Calculate the starting DDRAM address for the specified line and position
        u8 line_offset = (line == 0) ? 0x00 : 0x40;
    2d42:	8e 81       	ldd	r24, Y+6	; 0x06
    2d44:	88 23       	and	r24, r24
    2d46:	11 f4       	brne	.+4      	; 0x2d4c <LCD_String_Position+0x36>
    2d48:	1a 86       	std	Y+10, r1	; 0x0a
    2d4a:	02 c0       	rjmp	.+4      	; 0x2d50 <LCD_String_Position+0x3a>
    2d4c:	80 e4       	ldi	r24, 0x40	; 64
    2d4e:	8a 87       	std	Y+10, r24	; 0x0a
    2d50:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d52:	8d 83       	std	Y+5, r24	; 0x05
        u8 ddr_addr = (pos & 0x0F) | line_offset | 0x80;
    2d54:	8f 81       	ldd	r24, Y+7	; 0x07
    2d56:	98 2f       	mov	r25, r24
    2d58:	9f 70       	andi	r25, 0x0F	; 15
    2d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5c:	89 2b       	or	r24, r25
    2d5e:	80 68       	ori	r24, 0x80	; 128
    2d60:	8c 83       	std	Y+4, r24	; 0x04

        // Set the DDRAM address to move the cursor to the desired position
        LCD_voidSendCmnd(ddr_addr);
    2d62:	8c 81       	ldd	r24, Y+4	; 0x04
    2d64:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_voidSendCmnd>

        // Internal counter to keep track of characters printed
        u8 counter = 0;
    2d68:	1b 82       	std	Y+3, r1	; 0x03
		
        // Print the string until null terminator is encountered or the line is full
        for (u8 i = 0; str[i] != '\0' && counter < 16; i++)
    2d6a:	1a 82       	std	Y+2, r1	; 0x02
    2d6c:	11 c0       	rjmp	.+34     	; 0x2d90 <LCD_String_Position+0x7a>
        {
            LCD_voidSendChar(str[i]);
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	28 2f       	mov	r18, r24
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	88 85       	ldd	r24, Y+8	; 0x08
    2d76:	99 85       	ldd	r25, Y+9	; 0x09
    2d78:	fc 01       	movw	r30, r24
    2d7a:	e2 0f       	add	r30, r18
    2d7c:	f3 1f       	adc	r31, r19
    2d7e:	80 81       	ld	r24, Z
    2d80:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendChar>
            counter++; // Increment the internal counter for each character printed
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	8b 83       	std	Y+3, r24	; 0x03

        // Internal counter to keep track of characters printed
        u8 counter = 0;
		
        // Print the string until null terminator is encountered or the line is full
        for (u8 i = 0; str[i] != '\0' && counter < 16; i++)
    2d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8c:	8f 5f       	subi	r24, 0xFF	; 255
    2d8e:	8a 83       	std	Y+2, r24	; 0x02
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	88 85       	ldd	r24, Y+8	; 0x08
    2d98:	99 85       	ldd	r25, Y+9	; 0x09
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	e2 0f       	add	r30, r18
    2d9e:	f3 1f       	adc	r31, r19
    2da0:	80 81       	ld	r24, Z
    2da2:	88 23       	and	r24, r24
    2da4:	51 f0       	breq	.+20     	; 0x2dba <LCD_String_Position+0xa4>
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	80 31       	cpi	r24, 0x10	; 16
    2daa:	08 f3       	brcs	.-62     	; 0x2d6e <LCD_String_Position+0x58>
    2dac:	06 c0       	rjmp	.+12     	; 0x2dba <LCD_String_Position+0xa4>
        }

        // If the string is shorter than 16 characters, pad the remaining characters with spaces
        while (counter < 16)
        {
            LCD_voidSendChar(' ');
    2dae:	80 e2       	ldi	r24, 0x20	; 32
    2db0:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendChar>
            counter++;
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	8f 5f       	subi	r24, 0xFF	; 255
    2db8:	8b 83       	std	Y+3, r24	; 0x03
            LCD_voidSendChar(str[i]);
            counter++; // Increment the internal counter for each character printed
        }

        // If the string is shorter than 16 characters, pad the remaining characters with spaces
        while (counter < 16)
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	80 31       	cpi	r24, 0x10	; 16
    2dbe:	b8 f3       	brcs	.-18     	; 0x2dae <LCD_String_Position+0x98>
            LCD_voidSendChar(' ');
            counter++;
        }

        // Move to the second line if there are remaining characters to be displayed
        if (line == 0 && str[counter] != '\0')
    2dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2dc2:	88 23       	and	r24, r24
    2dc4:	89 f5       	brne	.+98     	; 0x2e28 <LCD_String_Position+0x112>
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	28 2f       	mov	r18, r24
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	88 85       	ldd	r24, Y+8	; 0x08
    2dce:	99 85       	ldd	r25, Y+9	; 0x09
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	e2 0f       	add	r30, r18
    2dd4:	f3 1f       	adc	r31, r19
    2dd6:	80 81       	ld	r24, Z
    2dd8:	88 23       	and	r24, r24
    2dda:	31 f1       	breq	.+76     	; 0x2e28 <LCD_String_Position+0x112>
        {
            LCD_voidSendCmnd(0xC0); // Move the cursor to the beginning of the second line
    2ddc:	80 ec       	ldi	r24, 0xC0	; 192
    2dde:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_voidSendCmnd>
            counter = 0;
    2de2:	1b 82       	std	Y+3, r1	; 0x03

            // Print the rest of the string on the second line
            for (u8 i = 16; str[i] != '\0' && counter < 16; i++)
    2de4:	80 e1       	ldi	r24, 0x10	; 16
    2de6:	89 83       	std	Y+1, r24	; 0x01
    2de8:	11 c0       	rjmp	.+34     	; 0x2e0c <LCD_String_Position+0xf6>
            {
                LCD_voidSendChar(str[i]);
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	88 85       	ldd	r24, Y+8	; 0x08
    2df2:	99 85       	ldd	r25, Y+9	; 0x09
    2df4:	fc 01       	movw	r30, r24
    2df6:	e2 0f       	add	r30, r18
    2df8:	f3 1f       	adc	r31, r19
    2dfa:	80 81       	ld	r24, Z
    2dfc:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendChar>
                counter++; // Increment the internal counter for each character printed on the second line
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	8f 5f       	subi	r24, 0xFF	; 255
    2e04:	8b 83       	std	Y+3, r24	; 0x03
        {
            LCD_voidSendCmnd(0xC0); // Move the cursor to the beginning of the second line
            counter = 0;

            // Print the rest of the string on the second line
            for (u8 i = 16; str[i] != '\0' && counter < 16; i++)
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	8f 5f       	subi	r24, 0xFF	; 255
    2e0a:	89 83       	std	Y+1, r24	; 0x01
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	88 85       	ldd	r24, Y+8	; 0x08
    2e14:	99 85       	ldd	r25, Y+9	; 0x09
    2e16:	fc 01       	movw	r30, r24
    2e18:	e2 0f       	add	r30, r18
    2e1a:	f3 1f       	adc	r31, r19
    2e1c:	80 81       	ld	r24, Z
    2e1e:	88 23       	and	r24, r24
    2e20:	19 f0       	breq	.+6      	; 0x2e28 <LCD_String_Position+0x112>
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	80 31       	cpi	r24, 0x10	; 16
    2e26:	08 f3       	brcs	.-62     	; 0x2dea <LCD_String_Position+0xd4>
                LCD_voidSendChar(str[i]);
                counter++; // Increment the internal counter for each character printed on the second line
            }
        }
    }
}
    2e28:	2a 96       	adiw	r28, 0x0a	; 10
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <LCD_voidSendSpecialCharacters>:


void LCD_voidSendSpecialCharacters(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    2e3a:	0f 93       	push	r16
    2e3c:	df 93       	push	r29
    2e3e:	cf 93       	push	r28
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	28 97       	sbiw	r28, 0x08	; 8
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	8b 83       	std	Y+3, r24	; 0x03
    2e52:	7d 83       	std	Y+5, r23	; 0x05
    2e54:	6c 83       	std	Y+4, r22	; 0x04
    2e56:	4e 83       	std	Y+6, r20	; 0x06
    2e58:	2f 83       	std	Y+7, r18	; 0x07
    2e5a:	08 87       	std	Y+8, r16	; 0x08
	LCD_voidSendCmnd(Copy_u8SpecialCharStartBit);
    2e5c:	88 85       	ldd	r24, Y+8	; 0x08
    2e5e:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_voidSendCmnd>
	for (int i = 0; i < 8; i++)
    2e62:	1a 82       	std	Y+2, r1	; 0x02
    2e64:	19 82       	std	Y+1, r1	; 0x01
    2e66:	0f c0       	rjmp	.+30     	; 0x2e86 <LCD_voidSendSpecialCharacters+0x4c>
	{
		LCD_voidSendChar(Copy_u8P_Ptr[i]);
    2e68:	29 81       	ldd	r18, Y+1	; 0x01
    2e6a:	3a 81       	ldd	r19, Y+2	; 0x02
    2e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e70:	fc 01       	movw	r30, r24
    2e72:	e2 0f       	add	r30, r18
    2e74:	f3 1f       	adc	r31, r19
    2e76:	80 81       	ld	r24, Z
    2e78:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendChar>


void LCD_voidSendSpecialCharacters(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_voidSendCmnd(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	9a 83       	std	Y+2, r25	; 0x02
    2e84:	89 83       	std	Y+1, r24	; 0x01
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8a:	88 30       	cpi	r24, 0x08	; 8
    2e8c:	91 05       	cpc	r25, r1
    2e8e:	64 f3       	brlt	.-40     	; 0x2e68 <LCD_voidSendSpecialCharacters+0x2e>
	{
		LCD_voidSendChar(Copy_u8P_Ptr[i]);
	}
	LCD_u8GoToXY(Copy_u8LineNum, Copy_u8Location);
    2e90:	8e 81       	ldd	r24, Y+6	; 0x06
    2e92:	6f 81       	ldd	r22, Y+7	; 0x07
    2e94:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_u8GoToXY>
	LCD_voidSendChar(Copy_CharNum);
    2e98:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendChar>

	if (Copy_u8Location > 15)
    2e9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2ea0:	80 31       	cpi	r24, 0x10	; 16
    2ea2:	48 f0       	brcs	.+18     	; 0x2eb6 <LCD_voidSendSpecialCharacters+0x7c>
	{
		LCD_voidClearScreen();
    2ea4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LCD_voidClearScreen>
		LCD_u8GoToXY(0, 0);
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_CharNum);
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendChar>
	}
}
    2eb6:	28 96       	adiw	r28, 0x08	; 8
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	0f 91       	pop	r16
    2ec8:	08 95       	ret

00002eca <LCD_voidClearSecondLine>:
void LCD_voidClearSecondLine()
{
    2eca:	df 93       	push	r29
    2ecc:	cf 93       	push	r28
    2ece:	00 d0       	rcall	.+0      	; 0x2ed0 <LCD_voidClearSecondLine+0x6>
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
	LCD_u8GoToXY(LCD_u8_LINE2, 0); // Move cursor to the start of the second line
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	60 e0       	ldi	r22, 0x00	; 0
    2ed8:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_u8GoToXY>
	// Send a string of spaces to clear the second line
	for (int i = 0; i < 16; i++)
    2edc:	1a 82       	std	Y+2, r1	; 0x02
    2ede:	19 82       	std	Y+1, r1	; 0x01
    2ee0:	08 c0       	rjmp	.+16     	; 0x2ef2 <LCD_voidClearSecondLine+0x28>
	{
		LCD_voidSendChar(' ');
    2ee2:	80 e2       	ldi	r24, 0x20	; 32
    2ee4:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendChar>
}
void LCD_voidClearSecondLine()
{
	LCD_u8GoToXY(LCD_u8_LINE2, 0); // Move cursor to the start of the second line
	// Send a string of spaces to clear the second line
	for (int i = 0; i < 16; i++)
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	9a 81       	ldd	r25, Y+2	; 0x02
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	9a 83       	std	Y+2, r25	; 0x02
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef6:	80 31       	cpi	r24, 0x10	; 16
    2ef8:	91 05       	cpc	r25, r1
    2efa:	9c f3       	brlt	.-26     	; 0x2ee2 <LCD_voidClearSecondLine+0x18>
	{
		LCD_voidSendChar(' ');
	}
	LCD_u8GoToXY(LCD_u8_LINE2, 3); // Move cursor to the start of the second line
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	63 e0       	ldi	r22, 0x03	; 3
    2f00:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_u8GoToXY>
}
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <correctpassword>:
u8 flag1 = 1;
u8 flag2 = 0;
u8 flag3 = 0;
/***************************************************************************/
void correctpassword()
{
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	2e 97       	sbiw	r28, 0x0e	; 14
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    LCD_voidClearScreen();
    2f22:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LCD_voidClearScreen>
    LCD_String_Position(LCD_u8_LINE1, 0, "Welcome to Motor Dashboard");
    2f26:	20 e6       	ldi	r18, 0x60	; 96
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	a9 01       	movw	r20, r18
    2f30:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_String_Position>
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	90 e8       	ldi	r25, 0x80	; 128
    2f38:	ab e3       	ldi	r26, 0x3B	; 59
    2f3a:	b5 e4       	ldi	r27, 0x45	; 69
    2f3c:	8b 87       	std	Y+11, r24	; 0x0b
    2f3e:	9c 87       	std	Y+12, r25	; 0x0c
    2f40:	ad 87       	std	Y+13, r26	; 0x0d
    2f42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	4a e7       	ldi	r20, 0x7A	; 122
    2f52:	53 e4       	ldi	r21, 0x43	; 67
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	8f 83       	std	Y+7, r24	; 0x07
    2f5e:	98 87       	std	Y+8, r25	; 0x08
    2f60:	a9 87       	std	Y+9, r26	; 0x09
    2f62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f64:	6f 81       	ldd	r22, Y+7	; 0x07
    2f66:	78 85       	ldd	r23, Y+8	; 0x08
    2f68:	89 85       	ldd	r24, Y+9	; 0x09
    2f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e8       	ldi	r20, 0x80	; 128
    2f72:	5f e3       	ldi	r21, 0x3F	; 63
    2f74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f78:	88 23       	and	r24, r24
    2f7a:	2c f4       	brge	.+10     	; 0x2f86 <correctpassword+0x78>
		__ticks = 1;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	9e 83       	std	Y+6, r25	; 0x06
    2f82:	8d 83       	std	Y+5, r24	; 0x05
    2f84:	3f c0       	rjmp	.+126    	; 0x3004 <correctpassword+0xf6>
	else if (__tmp > 65535)
    2f86:	6f 81       	ldd	r22, Y+7	; 0x07
    2f88:	78 85       	ldd	r23, Y+8	; 0x08
    2f8a:	89 85       	ldd	r24, Y+9	; 0x09
    2f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	3f ef       	ldi	r19, 0xFF	; 255
    2f92:	4f e7       	ldi	r20, 0x7F	; 127
    2f94:	57 e4       	ldi	r21, 0x47	; 71
    2f96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f9a:	18 16       	cp	r1, r24
    2f9c:	4c f5       	brge	.+82     	; 0x2ff0 <correctpassword+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e2       	ldi	r20, 0x20	; 32
    2fac:	51 e4       	ldi	r21, 0x41	; 65
    2fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	9e 83       	std	Y+6, r25	; 0x06
    2fc4:	8d 83       	std	Y+5, r24	; 0x05
    2fc6:	0f c0       	rjmp	.+30     	; 0x2fe6 <correctpassword+0xd8>
    2fc8:	89 e1       	ldi	r24, 0x19	; 25
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	9c 83       	std	Y+4, r25	; 0x04
    2fce:	8b 83       	std	Y+3, r24	; 0x03
    2fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	f1 f7       	brne	.-4      	; 0x2fd4 <correctpassword+0xc6>
    2fd8:	9c 83       	std	Y+4, r25	; 0x04
    2fda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fde:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	9e 83       	std	Y+6, r25	; 0x06
    2fe4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	69 f7       	brne	.-38     	; 0x2fc8 <correctpassword+0xba>
    2fee:	14 c0       	rjmp	.+40     	; 0x3018 <correctpassword+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff2:	78 85       	ldd	r23, Y+8	; 0x08
    2ff4:	89 85       	ldd	r24, Y+9	; 0x09
    2ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	9e 83       	std	Y+6, r25	; 0x06
    3002:	8d 83       	std	Y+5, r24	; 0x05
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	9a 83       	std	Y+2, r25	; 0x02
    300a:	89 83       	std	Y+1, r24	; 0x01
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	9a 81       	ldd	r25, Y+2	; 0x02
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <correctpassword+0x102>
    3014:	9a 83       	std	Y+2, r25	; 0x02
    3016:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(3000);
    LCD_voidClearScreen();
    3018:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LCD_voidClearScreen>
    LCD_String_Position(LCD_u8_LINE1, 0, "1-DC Motor3-Exit2-Stepper Motor");
    301c:	2b e7       	ldi	r18, 0x7B	; 123
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	a9 01       	movw	r20, r18
    3026:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_String_Position>
}
    302a:	2e 96       	adiw	r28, 0x0e	; 14
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <wrongpassword>:
/***************************************************************************/
void wrongpassword()
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	62 97       	sbiw	r28, 0x12	; 18
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    // Display "Access Denied" message
    LCD_voidClearScreen();
    3050:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LCD_voidClearScreen>
    const char *denied = "Access Denied";
    3054:	8b e9       	ldi	r24, 0x9B	; 155
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	9a 8b       	std	Y+18, r25	; 0x12
    305a:	89 8b       	std	Y+17, r24	; 0x11
    int deined_pos = (16 - strlen(denied)) / 2;
    305c:	89 89       	ldd	r24, Y+17	; 0x11
    305e:	9a 89       	ldd	r25, Y+18	; 0x12
    3060:	0e 94 b9 1a 	call	0x3572	; 0x3572 <strlen>
    3064:	9c 01       	movw	r18, r24
    3066:	80 e1       	ldi	r24, 0x10	; 16
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	82 1b       	sub	r24, r18
    306c:	93 0b       	sbc	r25, r19
    306e:	96 95       	lsr	r25
    3070:	87 95       	ror	r24
    3072:	98 8b       	std	Y+16, r25	; 0x10
    3074:	8f 87       	std	Y+15, r24	; 0x0f
    LCD_String_Position(LCD_u8_LINE1, deined_pos, denied);
    3076:	9f 85       	ldd	r25, Y+15	; 0x0f
    3078:	29 89       	ldd	r18, Y+17	; 0x11
    307a:	3a 89       	ldd	r19, Y+18	; 0x12
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	69 2f       	mov	r22, r25
    3080:	a9 01       	movw	r20, r18
    3082:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_String_Position>
    // LCD_voidSendString();
    flag++;
    3086:	80 91 24 01 	lds	r24, 0x0124
    308a:	8f 5f       	subi	r24, 0xFF	; 255
    308c:	80 93 24 01 	sts	0x0124, r24
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	aa ef       	ldi	r26, 0xFA	; 250
    3096:	b4 e4       	ldi	r27, 0x44	; 68
    3098:	8b 87       	std	Y+11, r24	; 0x0b
    309a:	9c 87       	std	Y+12, r25	; 0x0c
    309c:	ad 87       	std	Y+13, r26	; 0x0d
    309e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	4a e7       	ldi	r20, 0x7A	; 122
    30ae:	53 e4       	ldi	r21, 0x43	; 67
    30b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	8f 83       	std	Y+7, r24	; 0x07
    30ba:	98 87       	std	Y+8, r25	; 0x08
    30bc:	a9 87       	std	Y+9, r26	; 0x09
    30be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30c0:	6f 81       	ldd	r22, Y+7	; 0x07
    30c2:	78 85       	ldd	r23, Y+8	; 0x08
    30c4:	89 85       	ldd	r24, Y+9	; 0x09
    30c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	40 e8       	ldi	r20, 0x80	; 128
    30ce:	5f e3       	ldi	r21, 0x3F	; 63
    30d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30d4:	88 23       	and	r24, r24
    30d6:	2c f4       	brge	.+10     	; 0x30e2 <wrongpassword+0xa6>
		__ticks = 1;
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	9e 83       	std	Y+6, r25	; 0x06
    30de:	8d 83       	std	Y+5, r24	; 0x05
    30e0:	3f c0       	rjmp	.+126    	; 0x3160 <wrongpassword+0x124>
	else if (__tmp > 65535)
    30e2:	6f 81       	ldd	r22, Y+7	; 0x07
    30e4:	78 85       	ldd	r23, Y+8	; 0x08
    30e6:	89 85       	ldd	r24, Y+9	; 0x09
    30e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	3f ef       	ldi	r19, 0xFF	; 255
    30ee:	4f e7       	ldi	r20, 0x7F	; 127
    30f0:	57 e4       	ldi	r21, 0x47	; 71
    30f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30f6:	18 16       	cp	r1, r24
    30f8:	4c f5       	brge	.+82     	; 0x314c <wrongpassword+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    30fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    30fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3100:	9e 85       	ldd	r25, Y+14	; 0x0e
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	40 e2       	ldi	r20, 0x20	; 32
    3108:	51 e4       	ldi	r21, 0x41	; 65
    310a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	bc 01       	movw	r22, r24
    3114:	cd 01       	movw	r24, r26
    3116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	9e 83       	std	Y+6, r25	; 0x06
    3120:	8d 83       	std	Y+5, r24	; 0x05
    3122:	0f c0       	rjmp	.+30     	; 0x3142 <wrongpassword+0x106>
    3124:	89 e1       	ldi	r24, 0x19	; 25
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	9c 83       	std	Y+4, r25	; 0x04
    312a:	8b 83       	std	Y+3, r24	; 0x03
    312c:	8b 81       	ldd	r24, Y+3	; 0x03
    312e:	9c 81       	ldd	r25, Y+4	; 0x04
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <wrongpassword+0xf4>
    3134:	9c 83       	std	Y+4, r25	; 0x04
    3136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3138:	8d 81       	ldd	r24, Y+5	; 0x05
    313a:	9e 81       	ldd	r25, Y+6	; 0x06
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	9e 83       	std	Y+6, r25	; 0x06
    3140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3142:	8d 81       	ldd	r24, Y+5	; 0x05
    3144:	9e 81       	ldd	r25, Y+6	; 0x06
    3146:	00 97       	sbiw	r24, 0x00	; 0
    3148:	69 f7       	brne	.-38     	; 0x3124 <wrongpassword+0xe8>
    314a:	14 c0       	rjmp	.+40     	; 0x3174 <wrongpassword+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314c:	6f 81       	ldd	r22, Y+7	; 0x07
    314e:	78 85       	ldd	r23, Y+8	; 0x08
    3150:	89 85       	ldd	r24, Y+9	; 0x09
    3152:	9a 85       	ldd	r25, Y+10	; 0x0a
    3154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	9e 83       	std	Y+6, r25	; 0x06
    315e:	8d 83       	std	Y+5, r24	; 0x05
    3160:	8d 81       	ldd	r24, Y+5	; 0x05
    3162:	9e 81       	ldd	r25, Y+6	; 0x06
    3164:	9a 83       	std	Y+2, r25	; 0x02
    3166:	89 83       	std	Y+1, r24	; 0x01
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	9a 81       	ldd	r25, Y+2	; 0x02
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <wrongpassword+0x130>
    3170:	9a 83       	std	Y+2, r25	; 0x02
    3172:	89 83       	std	Y+1, r24	; 0x01
    // Delay to display the result for some time
    _delay_ms(2000); // 2-second delay
    // Clear the second line
    LCD_voidClearSecondLine();
    3174:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_voidClearSecondLine>
}
    3178:	62 96       	adiw	r28, 0x12	; 18
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	08 95       	ret

0000318a <DCmotor_options>:
/***************************************************************************/
void DCmotor_options()
{
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    LCD_voidClearScreen();
    3192:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LCD_voidClearScreen>
    LCD_String_Position(LCD_u8_LINE1, 0, "1-RotateCW3-Back2-RotateCCW");
    3196:	29 ea       	ldi	r18, 0xA9	; 169
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	60 e0       	ldi	r22, 0x00	; 0
    319e:	a9 01       	movw	r20, r18
    31a0:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_String_Position>
}
    31a4:	cf 91       	pop	r28
    31a6:	df 91       	pop	r29
    31a8:	08 95       	ret

000031aa <DCMotor>:
/***************************************************************************/
void DCMotor()
{
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <DCMotor+0x6>
    31b0:	0f 92       	push	r0
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    u8 options;
    flag1 = 0;
    31b6:	10 92 05 01 	sts	0x0105, r1
    flag2 = 1;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	80 93 25 01 	sts	0x0125, r24
    flag3 = 0;
    31c0:	10 92 26 01 	sts	0x0126, r1
    DCmotor_options();
    31c4:	0e 94 c5 18 	call	0x318a	; 0x318a <DCmotor_options>
    31c8:	2c c0       	rjmp	.+88     	; 0x3222 <DCMotor+0x78>
    while (flag2)
    {
        KPD_u8getKeystate(&options);
    31ca:	ce 01       	movw	r24, r28
    31cc:	01 96       	adiw	r24, 0x01	; 1
    31ce:	0e 94 56 0f 	call	0x1eac	; 0x1eac <KPD_u8getKeystate>
        if (options != KPD_u8_KEY_NOT_PRESSED)
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	8f 3f       	cpi	r24, 0xFF	; 255
    31d6:	29 f1       	breq	.+74     	; 0x3222 <DCMotor+0x78>
        {
            switch (options)
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	28 2f       	mov	r18, r24
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	3b 83       	std	Y+3, r19	; 0x03
    31e0:	2a 83       	std	Y+2, r18	; 0x02
    31e2:	8a 81       	ldd	r24, Y+2	; 0x02
    31e4:	9b 81       	ldd	r25, Y+3	; 0x03
    31e6:	82 33       	cpi	r24, 0x32	; 50
    31e8:	91 05       	cpc	r25, r1
    31ea:	69 f0       	breq	.+26     	; 0x3206 <DCMotor+0x5c>
    31ec:	2a 81       	ldd	r18, Y+2	; 0x02
    31ee:	3b 81       	ldd	r19, Y+3	; 0x03
    31f0:	23 33       	cpi	r18, 0x33	; 51
    31f2:	31 05       	cpc	r19, r1
    31f4:	59 f0       	breq	.+22     	; 0x320c <DCMotor+0x62>
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	9b 81       	ldd	r25, Y+3	; 0x03
    31fa:	81 33       	cpi	r24, 0x31	; 49
    31fc:	91 05       	cpc	r25, r1
    31fe:	89 f4       	brne	.+34     	; 0x3222 <DCMotor+0x78>
            {
            case '1':
                motor_rotate_cw(); // Implement this function
    3200:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <motor_rotate_cw>
    3204:	0e c0       	rjmp	.+28     	; 0x3222 <DCMotor+0x78>
                break;
            case '2':
                motor_rotate_ccw(); // Implement this function
    3206:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <motor_rotate_ccw>
    320a:	0b c0       	rjmp	.+22     	; 0x3222 <DCMotor+0x78>
                break;
            case '3':              // back to
                stopDCmotor();     // stop the motor running
    320c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <stopDCmotor>
                correctpassword(); // get back to welcome motor
    3210:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <correctpassword>
                flag2 = 0;
    3214:	10 92 25 01 	sts	0x0125, r1
                flag1 = 1;
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	80 93 05 01 	sts	0x0105, r24
                flag3 = 0;
    321e:	10 92 26 01 	sts	0x0126, r1
    u8 options;
    flag1 = 0;
    flag2 = 1;
    flag3 = 0;
    DCmotor_options();
    while (flag2)
    3222:	80 91 25 01 	lds	r24, 0x0125
    3226:	88 23       	and	r24, r24
    3228:	81 f6       	brne	.-96     	; 0x31ca <DCMotor+0x20>
                flag3 = 0;
                break;
            }
        }
    }
}
    322a:	0f 90       	pop	r0
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <stepperMotor>:
/***************************************************************************/
void stepperMotor()
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	00 d0       	rcall	.+0      	; 0x323c <stepperMotor+0x6>
    323c:	0f 92       	push	r0
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    u8 stepperOptions;
    flag1 = 0;
    3242:	10 92 05 01 	sts	0x0105, r1
    flag2 = 0;
    3246:	10 92 25 01 	sts	0x0125, r1
    flag3 = 1;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	80 93 26 01 	sts	0x0126, r24
    LCD_voidClearScreen();
    3250:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LCD_voidClearScreen>
    LCD_String_Position(LCD_u8_LINE1, 0, "1-Rotate CW     2-Rotate CCW");
    3254:	25 ec       	ldi	r18, 0xC5	; 197
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	a9 01       	movw	r20, r18
    325e:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_String_Position>
    3262:	23 c0       	rjmp	.+70     	; 0x32aa <stepperMotor+0x74>
    while (flag3)
    {
        KPD_u8getKeystate(&stepperOptions);
    3264:	ce 01       	movw	r24, r28
    3266:	01 96       	adiw	r24, 0x01	; 1
    3268:	0e 94 56 0f 	call	0x1eac	; 0x1eac <KPD_u8getKeystate>
        if (stepperOptions != KPD_u8_KEY_NOT_PRESSED)
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	8f 3f       	cpi	r24, 0xFF	; 255
    3270:	e1 f0       	breq	.+56     	; 0x32aa <stepperMotor+0x74>
        {
            switch (stepperOptions)
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	28 2f       	mov	r18, r24
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	3b 83       	std	Y+3, r19	; 0x03
    327a:	2a 83       	std	Y+2, r18	; 0x02
    327c:	8a 81       	ldd	r24, Y+2	; 0x02
    327e:	9b 81       	ldd	r25, Y+3	; 0x03
    3280:	81 33       	cpi	r24, 0x31	; 49
    3282:	91 05       	cpc	r25, r1
    3284:	31 f0       	breq	.+12     	; 0x3292 <stepperMotor+0x5c>
    3286:	2a 81       	ldd	r18, Y+2	; 0x02
    3288:	3b 81       	ldd	r19, Y+3	; 0x03
    328a:	22 33       	cpi	r18, 0x32	; 50
    328c:	31 05       	cpc	r19, r1
    328e:	39 f0       	breq	.+14     	; 0x329e <stepperMotor+0x68>
    3290:	0c c0       	rjmp	.+24     	; 0x32aa <stepperMotor+0x74>
            {
            case '1':
                StepperMotor_move(0, 120); // Implement this function
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	68 e7       	ldi	r22, 0x78	; 120
    3296:	70 e0       	ldi	r23, 0x00	; 0
    3298:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <StepperMotor_move>
    329c:	06 c0       	rjmp	.+12     	; 0x32aa <stepperMotor+0x74>
                break;
            case '2':
                motor_rotate_ccw(1, 120); // Implement this function
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	68 e7       	ldi	r22, 0x78	; 120
    32a4:	70 e0       	ldi	r23, 0x00	; 0
    32a6:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <motor_rotate_ccw>
    flag1 = 0;
    flag2 = 0;
    flag3 = 1;
    LCD_voidClearScreen();
    LCD_String_Position(LCD_u8_LINE1, 0, "1-Rotate CW     2-Rotate CCW");
    while (flag3)
    32aa:	80 91 26 01 	lds	r24, 0x0126
    32ae:	88 23       	and	r24, r24
    32b0:	c9 f6       	brne	.-78     	; 0x3264 <stepperMotor+0x2e>
                motor_rotate_ccw(1, 120); // Implement this function
                break;
            }
        }
    }
}
    32b2:	0f 90       	pop	r0
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	cf 91       	pop	r28
    32ba:	df 91       	pop	r29
    32bc:	08 95       	ret

000032be <Toggle_App>:

/* Toggle Application */
void Toggle_App(void)
{
    32be:	df 93       	push	r29
    32c0:	cf 93       	push	r28
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	6a 97       	sbiw	r28, 0x1a	; 26
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	f8 94       	cli
    32cc:	de bf       	out	0x3e, r29	; 62
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	cd bf       	out	0x3d, r28	; 61
    DIO_voidSetPinDirection(DIO_u8_PORTB, DIO_u8_PIN3, DIO_u8_OUTPUT);
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	63 e0       	ldi	r22, 0x03	; 3
    32d6:	41 e0       	ldi	r20, 0x01	; 1
    32d8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN3, DIO_u8_HIGH);
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	63 e0       	ldi	r22, 0x03	; 3
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_voidSetPinValue>
    u8 Local_u8Key;
    u8 password[4] = {'1', '2', '3', '4'};
    32e6:	81 e3       	ldi	r24, 0x31	; 49
    32e8:	8f 87       	std	Y+15, r24	; 0x0f
    32ea:	82 e3       	ldi	r24, 0x32	; 50
    32ec:	88 8b       	std	Y+16, r24	; 0x10
    32ee:	83 e3       	ldi	r24, 0x33	; 51
    32f0:	89 8b       	std	Y+17, r24	; 0x11
    32f2:	84 e3       	ldi	r24, 0x34	; 52
    32f4:	8a 8b       	std	Y+18, r24	; 0x12
    u8 input[4] = {0}; // Initialize the input array with zeros
    32f6:	1b 8a       	std	Y+19, r1	; 0x13
    32f8:	1c 8a       	std	Y+20, r1	; 0x14
    32fa:	1d 8a       	std	Y+21, r1	; 0x15
    32fc:	1e 8a       	std	Y+22, r1	; 0x16
    u8 inputIndex = 0; // Initialize the input index to keep track of the current position
    32fe:	1d 86       	std	Y+13, r1	; 0x0d
    /***************************************************************************/
    DIO_voidInit();  /* Initialize DIO */
    3300:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_voidInit>
    LCD_voideInit(); /* Initialize LCD */
    3304:	0e 94 df 12 	call	0x25be	; 0x25be <LCD_voideInit>
    KPD_enuInit();   /* Initialize KPD */
    3308:	0e 94 d7 10 	call	0x21ae	; 0x21ae <KPD_enuInit>

    /***********************************************************************/
    const char *sentence = "Pass word:";
    330c:	82 ee       	ldi	r24, 0xE2	; 226
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	9c 87       	std	Y+12, r25	; 0x0c
    3312:	8b 87       	std	Y+11, r24	; 0x0b

    // Calculate the starting position for the sentence
    LCD_voidClearScreen();
    3314:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LCD_voidClearScreen>
    int sentenceLength = strlen(sentence);
    3318:	8b 85       	ldd	r24, Y+11	; 0x0b
    331a:	9c 85       	ldd	r25, Y+12	; 0x0c
    331c:	0e 94 b9 1a 	call	0x3572	; 0x3572 <strlen>
    3320:	9a 87       	std	Y+10, r25	; 0x0a
    3322:	89 87       	std	Y+9, r24	; 0x09
    int startingPosition = (16 - sentenceLength) / 2;
    3324:	20 e1       	ldi	r18, 0x10	; 16
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	89 85       	ldd	r24, Y+9	; 0x09
    332a:	9a 85       	ldd	r25, Y+10	; 0x0a
    332c:	a9 01       	movw	r20, r18
    332e:	48 1b       	sub	r20, r24
    3330:	59 0b       	sbc	r21, r25
    3332:	ca 01       	movw	r24, r20
    3334:	9a 8f       	std	Y+26, r25	; 0x1a
    3336:	89 8f       	std	Y+25, r24	; 0x19
    3338:	89 8d       	ldd	r24, Y+25	; 0x19
    333a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    333c:	99 23       	and	r25, r25
    333e:	34 f4       	brge	.+12     	; 0x334c <Toggle_App+0x8e>
    3340:	29 8d       	ldd	r18, Y+25	; 0x19
    3342:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3344:	2f 5f       	subi	r18, 0xFF	; 255
    3346:	3f 4f       	sbci	r19, 0xFF	; 255
    3348:	3a 8f       	std	Y+26, r19	; 0x1a
    334a:	29 8f       	std	Y+25, r18	; 0x19
    334c:	89 8d       	ldd	r24, Y+25	; 0x19
    334e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3350:	95 95       	asr	r25
    3352:	87 95       	ror	r24
    3354:	98 87       	std	Y+8, r25	; 0x08
    3356:	8f 83       	std	Y+7, r24	; 0x07

    // Display the sentence in the middle of the LCD
    LCD_String_Position(LCD_u8_LINE1, startingPosition, sentence);
    3358:	9f 81       	ldd	r25, Y+7	; 0x07
    335a:	2b 85       	ldd	r18, Y+11	; 0x0b
    335c:	3c 85       	ldd	r19, Y+12	; 0x0c
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	69 2f       	mov	r22, r25
    3362:	a9 01       	movw	r20, r18
    3364:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_String_Position>
    // Clear the second line
    LCD_voidClearSecondLine();
    3368:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_voidClearSecondLine>
    LCD_u8GoToXY(LCD_u8_LINE2, 6);
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	66 e0       	ldi	r22, 0x06	; 6
    3370:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_u8GoToXY>
    3374:	91 c0       	rjmp	.+290    	; 0x3498 <Toggle_App+0x1da>

    /***********************************************************************/
    while (flag < 3)
    {
        KPD_u8getKeystate(&Local_u8Key);
    3376:	ce 01       	movw	r24, r28
    3378:	0e 96       	adiw	r24, 0x0e	; 14
    337a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <KPD_u8getKeystate>
        /*if there are no switches pressed
         No displaying on LCD*/
        if (Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    337e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3380:	8f 3f       	cpi	r24, 0xFF	; 255
    3382:	09 f4       	brne	.+2      	; 0x3386 <Toggle_App+0xc8>
    3384:	89 c0       	rjmp	.+274    	; 0x3498 <Toggle_App+0x1da>
        {
            // Store the entered key in the input array
            input[inputIndex] = Local_u8Key;
    3386:	8d 85       	ldd	r24, Y+13	; 0x0d
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	4e 85       	ldd	r20, Y+14	; 0x0e
    338e:	ce 01       	movw	r24, r28
    3390:	43 96       	adiw	r24, 0x13	; 19
    3392:	fc 01       	movw	r30, r24
    3394:	e2 0f       	add	r30, r18
    3396:	f3 1f       	adc	r31, r19
    3398:	40 83       	st	Z, r20
            inputIndex++;
    339a:	8d 85       	ldd	r24, Y+13	; 0x0d
    339c:	8f 5f       	subi	r24, 0xFF	; 255
    339e:	8d 87       	std	Y+13, r24	; 0x0d
            // Display the entered key on the LCD
            LCD_voidSendChar('*');
    33a0:	8a e2       	ldi	r24, 0x2A	; 42
    33a2:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendChar>
            // Check if the input is complete
            if (inputIndex == 4)
    33a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a8:	84 30       	cpi	r24, 0x04	; 4
    33aa:	09 f0       	breq	.+2      	; 0x33ae <Toggle_App+0xf0>
    33ac:	75 c0       	rjmp	.+234    	; 0x3498 <Toggle_App+0x1da>
            {
                int isPasswordCorrect = 1;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	9e 83       	std	Y+6, r25	; 0x06
    33b4:	8d 83       	std	Y+5, r24	; 0x05
                // compare the entered password with the actual password
                for (int i = 0; i < 4; i++)
    33b6:	1c 82       	std	Y+4, r1	; 0x04
    33b8:	1b 82       	std	Y+3, r1	; 0x03
    33ba:	1a c0       	rjmp	.+52     	; 0x33f0 <Toggle_App+0x132>
                {
                    if (input[i] != password[i])
    33bc:	2b 81       	ldd	r18, Y+3	; 0x03
    33be:	3c 81       	ldd	r19, Y+4	; 0x04
    33c0:	ce 01       	movw	r24, r28
    33c2:	43 96       	adiw	r24, 0x13	; 19
    33c4:	fc 01       	movw	r30, r24
    33c6:	e2 0f       	add	r30, r18
    33c8:	f3 1f       	adc	r31, r19
    33ca:	40 81       	ld	r20, Z
    33cc:	2b 81       	ldd	r18, Y+3	; 0x03
    33ce:	3c 81       	ldd	r19, Y+4	; 0x04
    33d0:	ce 01       	movw	r24, r28
    33d2:	0f 96       	adiw	r24, 0x0f	; 15
    33d4:	fc 01       	movw	r30, r24
    33d6:	e2 0f       	add	r30, r18
    33d8:	f3 1f       	adc	r31, r19
    33da:	80 81       	ld	r24, Z
    33dc:	48 17       	cp	r20, r24
    33de:	19 f0       	breq	.+6      	; 0x33e6 <Toggle_App+0x128>
                    {
                        isPasswordCorrect = 0;
    33e0:	1e 82       	std	Y+6, r1	; 0x06
    33e2:	1d 82       	std	Y+5, r1	; 0x05
    33e4:	0a c0       	rjmp	.+20     	; 0x33fa <Toggle_App+0x13c>
            // Check if the input is complete
            if (inputIndex == 4)
            {
                int isPasswordCorrect = 1;
                // compare the entered password with the actual password
                for (int i = 0; i < 4; i++)
    33e6:	8b 81       	ldd	r24, Y+3	; 0x03
    33e8:	9c 81       	ldd	r25, Y+4	; 0x04
    33ea:	01 96       	adiw	r24, 0x01	; 1
    33ec:	9c 83       	std	Y+4, r25	; 0x04
    33ee:	8b 83       	std	Y+3, r24	; 0x03
    33f0:	8b 81       	ldd	r24, Y+3	; 0x03
    33f2:	9c 81       	ldd	r25, Y+4	; 0x04
    33f4:	84 30       	cpi	r24, 0x04	; 4
    33f6:	91 05       	cpc	r25, r1
    33f8:	0c f3       	brlt	.-62     	; 0x33bc <Toggle_App+0xfe>
                        isPasswordCorrect = 0;
                        break;
                    }
                }
                // Check if the password is correct
                if (isPasswordCorrect)
    33fa:	8d 81       	ldd	r24, Y+5	; 0x05
    33fc:	9e 81       	ldd	r25, Y+6	; 0x06
    33fe:	00 97       	sbiw	r24, 0x00	; 0
    3400:	99 f1       	breq	.+102    	; 0x3468 <Toggle_App+0x1aa>
                {
                    flag = 3;
    3402:	83 e0       	ldi	r24, 0x03	; 3
    3404:	80 93 24 01 	sts	0x0124, r24

                    correctpassword();
    3408:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <correctpassword>
    340c:	28 c0       	rjmp	.+80     	; 0x345e <Toggle_App+0x1a0>
                    while (flag1)
                    {
                        KPD_u8getKeystate(&Local_u8Key);
    340e:	ce 01       	movw	r24, r28
    3410:	0e 96       	adiw	r24, 0x0e	; 14
    3412:	0e 94 56 0f 	call	0x1eac	; 0x1eac <KPD_u8getKeystate>
                        if (Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    3416:	8e 85       	ldd	r24, Y+14	; 0x0e
    3418:	8f 3f       	cpi	r24, 0xFF	; 255
    341a:	09 f1       	breq	.+66     	; 0x345e <Toggle_App+0x1a0>
                        {
                            switch (Local_u8Key)
    341c:	8e 85       	ldd	r24, Y+14	; 0x0e
    341e:	48 2f       	mov	r20, r24
    3420:	50 e0       	ldi	r21, 0x00	; 0
    3422:	58 8f       	std	Y+24, r21	; 0x18
    3424:	4f 8b       	std	Y+23, r20	; 0x17
    3426:	8f 89       	ldd	r24, Y+23	; 0x17
    3428:	98 8d       	ldd	r25, Y+24	; 0x18
    342a:	82 33       	cpi	r24, 0x32	; 50
    342c:	91 05       	cpc	r25, r1
    342e:	69 f0       	breq	.+26     	; 0x344a <Toggle_App+0x18c>
    3430:	2f 89       	ldd	r18, Y+23	; 0x17
    3432:	38 8d       	ldd	r19, Y+24	; 0x18
    3434:	23 33       	cpi	r18, 0x33	; 51
    3436:	31 05       	cpc	r19, r1
    3438:	59 f0       	breq	.+22     	; 0x3450 <Toggle_App+0x192>
    343a:	4f 89       	ldd	r20, Y+23	; 0x17
    343c:	58 8d       	ldd	r21, Y+24	; 0x18
    343e:	41 33       	cpi	r20, 0x31	; 49
    3440:	51 05       	cpc	r21, r1
    3442:	69 f4       	brne	.+26     	; 0x345e <Toggle_App+0x1a0>
                            {
                            case '1': // DC motor choise
                                DCMotor();
    3444:	0e 94 d5 18 	call	0x31aa	; 0x31aa <DCMotor>
    3448:	0a c0       	rjmp	.+20     	; 0x345e <Toggle_App+0x1a0>
                                break;
                            case '2': // stepper motor
                                stepperMotor();
    344a:	0e 94 1b 19 	call	0x3236	; 0x3236 <stepperMotor>
    344e:	07 c0       	rjmp	.+14     	; 0x345e <Toggle_App+0x1a0>
                                break;
                            case '3':                  // stepper motor
                                LCD_voidClearScreen(); // clear the screen
    3450:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LCD_voidClearScreen>
                                LCD_voidSendString("Exit the system");
    3454:	8d ee       	ldi	r24, 0xED	; 237
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <LCD_voidSendString>
    345c:	22 c0       	rjmp	.+68     	; 0x34a2 <Toggle_App+0x1e4>
                if (isPasswordCorrect)
                {
                    flag = 3;

                    correctpassword();
                    while (flag1)
    345e:	80 91 05 01 	lds	r24, 0x0105
    3462:	88 23       	and	r24, r24
    3464:	a1 f6       	brne	.-88     	; 0x340e <Toggle_App+0x150>
    3466:	02 c0       	rjmp	.+4      	; 0x346c <Toggle_App+0x1ae>
                        }
                    }
                }
                else
                {
                    wrongpassword();
    3468:	0e 94 1e 18 	call	0x303c	; 0x303c <wrongpassword>
                }

                // Reset the input array and index
                for (int i = 0; i < 4; i++)
    346c:	1a 82       	std	Y+2, r1	; 0x02
    346e:	19 82       	std	Y+1, r1	; 0x01
    3470:	0d c0       	rjmp	.+26     	; 0x348c <Toggle_App+0x1ce>
                {
                    input[i] = 0;
    3472:	29 81       	ldd	r18, Y+1	; 0x01
    3474:	3a 81       	ldd	r19, Y+2	; 0x02
    3476:	ce 01       	movw	r24, r28
    3478:	43 96       	adiw	r24, 0x13	; 19
    347a:	fc 01       	movw	r30, r24
    347c:	e2 0f       	add	r30, r18
    347e:	f3 1f       	adc	r31, r19
    3480:	10 82       	st	Z, r1
                {
                    wrongpassword();
                }

                // Reset the input array and index
                for (int i = 0; i < 4; i++)
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	9a 81       	ldd	r25, Y+2	; 0x02
    3486:	01 96       	adiw	r24, 0x01	; 1
    3488:	9a 83       	std	Y+2, r25	; 0x02
    348a:	89 83       	std	Y+1, r24	; 0x01
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	9a 81       	ldd	r25, Y+2	; 0x02
    3490:	84 30       	cpi	r24, 0x04	; 4
    3492:	91 05       	cpc	r25, r1
    3494:	74 f3       	brlt	.-36     	; 0x3472 <Toggle_App+0x1b4>
                {
                    input[i] = 0;
                }
                inputIndex = 0;
    3496:	1d 86       	std	Y+13, r1	; 0x0d
    // Clear the second line
    LCD_voidClearSecondLine();
    LCD_u8GoToXY(LCD_u8_LINE2, 6);

    /***********************************************************************/
    while (flag < 3)
    3498:	80 91 24 01 	lds	r24, 0x0124
    349c:	83 30       	cpi	r24, 0x03	; 3
    349e:	08 f4       	brcc	.+2      	; 0x34a2 <Toggle_App+0x1e4>
    34a0:	6a cf       	rjmp	.-300    	; 0x3376 <Toggle_App+0xb8>
                }
                inputIndex = 0;
            }
        }
    }
}
    34a2:	6a 96       	adiw	r28, 0x1a	; 26
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	cf 91       	pop	r28
    34b0:	df 91       	pop	r29
    34b2:	08 95       	ret

000034b4 <main>:
/***************************************************************************/
int main()
{
    34b4:	df 93       	push	r29
    34b6:	cf 93       	push	r28
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
    /***************************************************************************/
    GI_voidEnable(); /* Enable Global interruptions */
    34bc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GI_voidEnable>
    EXTI_voidEnable(EXTI_u8_IN2, EXTI_u8_RAISING_EDGE);
    34c0:	82 e0       	ldi	r24, 0x02	; 2
    34c2:	60 e0       	ldi	r22, 0x00	; 0
    34c4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <EXTI_voidEnable>
    EXTI_u8Set_CallBack(&Toggle_App, EXTI_u8_IN2);
    34c8:	8f e5       	ldi	r24, 0x5F	; 95
    34ca:	99 e1       	ldi	r25, 0x19	; 25
    34cc:	62 e0       	ldi	r22, 0x02	; 2
    34ce:	0e 94 f8 07 	call	0xff0	; 0xff0 <EXTI_u8Set_CallBack>
    return 0;
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	90 e0       	ldi	r25, 0x00	; 0
}
    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	08 95       	ret

000034dc <__udivmodhi4>:
    34dc:	aa 1b       	sub	r26, r26
    34de:	bb 1b       	sub	r27, r27
    34e0:	51 e1       	ldi	r21, 0x11	; 17
    34e2:	07 c0       	rjmp	.+14     	; 0x34f2 <__udivmodhi4_ep>

000034e4 <__udivmodhi4_loop>:
    34e4:	aa 1f       	adc	r26, r26
    34e6:	bb 1f       	adc	r27, r27
    34e8:	a6 17       	cp	r26, r22
    34ea:	b7 07       	cpc	r27, r23
    34ec:	10 f0       	brcs	.+4      	; 0x34f2 <__udivmodhi4_ep>
    34ee:	a6 1b       	sub	r26, r22
    34f0:	b7 0b       	sbc	r27, r23

000034f2 <__udivmodhi4_ep>:
    34f2:	88 1f       	adc	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	5a 95       	dec	r21
    34f8:	a9 f7       	brne	.-22     	; 0x34e4 <__udivmodhi4_loop>
    34fa:	80 95       	com	r24
    34fc:	90 95       	com	r25
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	08 95       	ret

00003504 <__prologue_saves__>:
    3504:	2f 92       	push	r2
    3506:	3f 92       	push	r3
    3508:	4f 92       	push	r4
    350a:	5f 92       	push	r5
    350c:	6f 92       	push	r6
    350e:	7f 92       	push	r7
    3510:	8f 92       	push	r8
    3512:	9f 92       	push	r9
    3514:	af 92       	push	r10
    3516:	bf 92       	push	r11
    3518:	cf 92       	push	r12
    351a:	df 92       	push	r13
    351c:	ef 92       	push	r14
    351e:	ff 92       	push	r15
    3520:	0f 93       	push	r16
    3522:	1f 93       	push	r17
    3524:	cf 93       	push	r28
    3526:	df 93       	push	r29
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	ca 1b       	sub	r28, r26
    352e:	db 0b       	sbc	r29, r27
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	f8 94       	cli
    3534:	de bf       	out	0x3e, r29	; 62
    3536:	0f be       	out	0x3f, r0	; 63
    3538:	cd bf       	out	0x3d, r28	; 61
    353a:	09 94       	ijmp

0000353c <__epilogue_restores__>:
    353c:	2a 88       	ldd	r2, Y+18	; 0x12
    353e:	39 88       	ldd	r3, Y+17	; 0x11
    3540:	48 88       	ldd	r4, Y+16	; 0x10
    3542:	5f 84       	ldd	r5, Y+15	; 0x0f
    3544:	6e 84       	ldd	r6, Y+14	; 0x0e
    3546:	7d 84       	ldd	r7, Y+13	; 0x0d
    3548:	8c 84       	ldd	r8, Y+12	; 0x0c
    354a:	9b 84       	ldd	r9, Y+11	; 0x0b
    354c:	aa 84       	ldd	r10, Y+10	; 0x0a
    354e:	b9 84       	ldd	r11, Y+9	; 0x09
    3550:	c8 84       	ldd	r12, Y+8	; 0x08
    3552:	df 80       	ldd	r13, Y+7	; 0x07
    3554:	ee 80       	ldd	r14, Y+6	; 0x06
    3556:	fd 80       	ldd	r15, Y+5	; 0x05
    3558:	0c 81       	ldd	r16, Y+4	; 0x04
    355a:	1b 81       	ldd	r17, Y+3	; 0x03
    355c:	aa 81       	ldd	r26, Y+2	; 0x02
    355e:	b9 81       	ldd	r27, Y+1	; 0x01
    3560:	ce 0f       	add	r28, r30
    3562:	d1 1d       	adc	r29, r1
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	cd bf       	out	0x3d, r28	; 61
    356e:	ed 01       	movw	r28, r26
    3570:	08 95       	ret

00003572 <strlen>:
    3572:	fc 01       	movw	r30, r24
    3574:	01 90       	ld	r0, Z+
    3576:	00 20       	and	r0, r0
    3578:	e9 f7       	brne	.-6      	; 0x3574 <strlen+0x2>
    357a:	80 95       	com	r24
    357c:	90 95       	com	r25
    357e:	8e 0f       	add	r24, r30
    3580:	9f 1f       	adc	r25, r31
    3582:	08 95       	ret

00003584 <_exit>:
    3584:	f8 94       	cli

00003586 <__stop_program>:
    3586:	ff cf       	rjmp	.-2      	; 0x3586 <__stop_program>
