
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003426  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00003426  000034ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800082  00800082  000034dc  2**0
                  ALLOC
  3 .stab         000033f0  00000000  00000000  000034dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001212  00000000  00000000  000068cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000af13  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000be98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c2da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <main>
      8a:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GI_voidEnable>:
#include "GI_config.h"
#include "GI_private.h"
#include "GI_interface.h"

void GI_voidEnable(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, GI_Bit);
     ca6:	af e5       	ldi	r26, 0x5F	; 95
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e5       	ldi	r30, 0x5F	; 95
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <GI_voidDisable>:
void GI_voidDisable(void)
{
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG, GI_Bit);
     cc2:	af e5       	ldi	r26, 0x5F	; 95
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ef e5       	ldi	r30, 0x5F	; 95
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	8c 93       	st	X, r24
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <EXTI_voidEnable>:
//     CLR_BIT(EXTI_u8_MCUCR, ISC10);
//     /* 2- Enable EXTI0 ==> PIE*/
//     SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
// }
u8 EXTI_voidEnable(u8 Copy_u8EXTIIndex, u8 Copy_u8EdgeIndex)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2b 97       	sbiw	r28, 0x0b	; 11
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	8a 83       	std	Y+2, r24	; 0x02
     cec:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8EXTIIndex)
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	3b 87       	std	Y+11, r19	; 0x0b
     cfa:	2a 87       	std	Y+10, r18	; 0x0a
     cfc:	8a 85       	ldd	r24, Y+10	; 0x0a
     cfe:	9b 85       	ldd	r25, Y+11	; 0x0b
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	91 05       	cpc	r25, r1
     d04:	09 f4       	brne	.+2      	; 0xd08 <EXTI_voidEnable+0x32>
     d06:	85 c0       	rjmp	.+266    	; 0xe12 <EXTI_voidEnable+0x13c>
     d08:	2a 85       	ldd	r18, Y+10	; 0x0a
     d0a:	3b 85       	ldd	r19, Y+11	; 0x0b
     d0c:	22 30       	cpi	r18, 0x02	; 2
     d0e:	31 05       	cpc	r19, r1
     d10:	09 f4       	brne	.+2      	; 0xd14 <EXTI_voidEnable+0x3e>
     d12:	f9 c0       	rjmp	.+498    	; 0xf06 <EXTI_voidEnable+0x230>
     d14:	8a 85       	ldd	r24, Y+10	; 0x0a
     d16:	9b 85       	ldd	r25, Y+11	; 0x0b
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	09 f0       	breq	.+2      	; 0xd1e <EXTI_voidEnable+0x48>
     d1c:	1b c1       	rjmp	.+566    	; 0xf54 <EXTI_voidEnable+0x27e>
    {
    case EXTI_u8_IN0:
        switch (Copy_u8EdgeIndex)
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	39 87       	std	Y+9, r19	; 0x09
     d26:	28 87       	std	Y+8, r18	; 0x08
     d28:	88 85       	ldd	r24, Y+8	; 0x08
     d2a:	99 85       	ldd	r25, Y+9	; 0x09
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	91 05       	cpc	r25, r1
     d30:	61 f1       	breq	.+88     	; 0xd8a <EXTI_voidEnable+0xb4>
     d32:	28 85       	ldd	r18, Y+8	; 0x08
     d34:	39 85       	ldd	r19, Y+9	; 0x09
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	2c f4       	brge	.+10     	; 0xd46 <EXTI_voidEnable+0x70>
     d3c:	88 85       	ldd	r24, Y+8	; 0x08
     d3e:	99 85       	ldd	r25, Y+9	; 0x09
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	69 f0       	breq	.+26     	; 0xd5e <EXTI_voidEnable+0x88>
     d44:	64 c0       	rjmp	.+200    	; 0xe0e <EXTI_voidEnable+0x138>
     d46:	28 85       	ldd	r18, Y+8	; 0x08
     d48:	39 85       	ldd	r19, Y+9	; 0x09
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	99 f1       	breq	.+102    	; 0xdb6 <EXTI_voidEnable+0xe0>
     d50:	88 85       	ldd	r24, Y+8	; 0x08
     d52:	99 85       	ldd	r25, Y+9	; 0x09
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	91 05       	cpc	r25, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <EXTI_voidEnable+0x86>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <EXTI_voidEnable+0x10c>
     d5c:	58 c0       	rjmp	.+176    	; 0xe0e <EXTI_voidEnable+0x138>
        {
        case EXTI_u8_RAISING_EDGE:
            SET_BIT(EXTI_u8_MCUCR, 1);
     d5e:	a5 e5       	ldi	r26, 0x55	; 85
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e5 e5       	ldi	r30, 0x55	; 85
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	82 60       	ori	r24, 0x02	; 2
     d6a:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR, 0);
     d6c:	a5 e5       	ldi	r26, 0x55	; 85
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e5 e5       	ldi	r30, 0x55	; 85
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	81 60       	ori	r24, 0x01	; 1
     d78:	8c 93       	st	X, r24
            /* Enable EXTI0 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     d7a:	ab e5       	ldi	r26, 0x5B	; 91
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e5       	ldi	r30, 0x5B	; 91
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	80 64       	ori	r24, 0x40	; 64
     d86:	8c 93       	st	X, r24
     d88:	e5 c0       	rjmp	.+458    	; 0xf54 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_FLOATING_EDGE:
            SET_BIT(EXTI_u8_MCUCR, 1);
     d8a:	a5 e5       	ldi	r26, 0x55	; 85
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e5 e5       	ldi	r30, 0x55	; 85
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	82 60       	ori	r24, 0x02	; 2
     d96:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR, 0);
     d98:	a5 e5       	ldi	r26, 0x55	; 85
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e5 e5       	ldi	r30, 0x55	; 85
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8e 7f       	andi	r24, 0xFE	; 254
     da4:	8c 93       	st	X, r24
            /* Enable EXTI0 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     da6:	ab e5       	ldi	r26, 0x5B	; 91
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e5       	ldi	r30, 0x5B	; 91
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	80 64       	ori	r24, 0x40	; 64
     db2:	8c 93       	st	X, r24
     db4:	cf c0       	rjmp	.+414    	; 0xf54 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_ANY_LOGICAL_CHANGE:
            CLR_BIT(EXTI_u8_MCUCR, 1);
     db6:	a5 e5       	ldi	r26, 0x55	; 85
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e5 e5       	ldi	r30, 0x55	; 85
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8d 7f       	andi	r24, 0xFD	; 253
     dc2:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR, 0);
     dc4:	a5 e5       	ldi	r26, 0x55	; 85
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e5 e5       	ldi	r30, 0x55	; 85
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	81 60       	ori	r24, 0x01	; 1
     dd0:	8c 93       	st	X, r24
            /* Enable EXTI0 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     dd2:	ab e5       	ldi	r26, 0x5B	; 91
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	eb e5       	ldi	r30, 0x5B	; 91
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	80 64       	ori	r24, 0x40	; 64
     dde:	8c 93       	st	X, r24
     de0:	b9 c0       	rjmp	.+370    	; 0xf54 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_LOW_LEVEL:
            CLR_BIT(EXTI_u8_MCUCR, 1);
     de2:	a5 e5       	ldi	r26, 0x55	; 85
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e5 e5       	ldi	r30, 0x55	; 85
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8d 7f       	andi	r24, 0xFD	; 253
     dee:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR, 0);
     df0:	a5 e5       	ldi	r26, 0x55	; 85
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e5 e5       	ldi	r30, 0x55	; 85
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8e 7f       	andi	r24, 0xFE	; 254
     dfc:	8c 93       	st	X, r24
            /* Enable EXTI0 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     dfe:	ab e5       	ldi	r26, 0x5B	; 91
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	eb e5       	ldi	r30, 0x5B	; 91
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	80 64       	ori	r24, 0x40	; 64
     e0a:	8c 93       	st	X, r24
     e0c:	a3 c0       	rjmp	.+326    	; 0xf54 <EXTI_voidEnable+0x27e>
            break;
        default:
            Local_u8ErrorState = STD_TYPES_NOK;
     e0e:	19 82       	std	Y+1, r1	; 0x01
     e10:	a1 c0       	rjmp	.+322    	; 0xf54 <EXTI_voidEnable+0x27e>
            break;
        }
        break;
    /*****************************************************************/
    case EXTI_u8_IN1:
        switch (Copy_u8EdgeIndex)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	3f 83       	std	Y+7, r19	; 0x07
     e1a:	2e 83       	std	Y+6, r18	; 0x06
     e1c:	8e 81       	ldd	r24, Y+6	; 0x06
     e1e:	9f 81       	ldd	r25, Y+7	; 0x07
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	91 05       	cpc	r25, r1
     e24:	61 f1       	breq	.+88     	; 0xe7e <EXTI_voidEnable+0x1a8>
     e26:	2e 81       	ldd	r18, Y+6	; 0x06
     e28:	3f 81       	ldd	r19, Y+7	; 0x07
     e2a:	22 30       	cpi	r18, 0x02	; 2
     e2c:	31 05       	cpc	r19, r1
     e2e:	2c f4       	brge	.+10     	; 0xe3a <EXTI_voidEnable+0x164>
     e30:	8e 81       	ldd	r24, Y+6	; 0x06
     e32:	9f 81       	ldd	r25, Y+7	; 0x07
     e34:	00 97       	sbiw	r24, 0x00	; 0
     e36:	69 f0       	breq	.+26     	; 0xe52 <EXTI_voidEnable+0x17c>
     e38:	64 c0       	rjmp	.+200    	; 0xf02 <EXTI_voidEnable+0x22c>
     e3a:	2e 81       	ldd	r18, Y+6	; 0x06
     e3c:	3f 81       	ldd	r19, Y+7	; 0x07
     e3e:	22 30       	cpi	r18, 0x02	; 2
     e40:	31 05       	cpc	r19, r1
     e42:	99 f1       	breq	.+102    	; 0xeaa <EXTI_voidEnable+0x1d4>
     e44:	8e 81       	ldd	r24, Y+6	; 0x06
     e46:	9f 81       	ldd	r25, Y+7	; 0x07
     e48:	83 30       	cpi	r24, 0x03	; 3
     e4a:	91 05       	cpc	r25, r1
     e4c:	09 f4       	brne	.+2      	; 0xe50 <EXTI_voidEnable+0x17a>
     e4e:	43 c0       	rjmp	.+134    	; 0xed6 <EXTI_voidEnable+0x200>
     e50:	58 c0       	rjmp	.+176    	; 0xf02 <EXTI_voidEnable+0x22c>
        {
        case EXTI_u8_RAISING_EDGE:
            SET_BIT(EXTI_u8_MCUCR, 3);
     e52:	a5 e5       	ldi	r26, 0x55	; 85
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e5       	ldi	r30, 0x55	; 85
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 60       	ori	r24, 0x08	; 8
     e5e:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR, 2);
     e60:	a5 e5       	ldi	r26, 0x55	; 85
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e5       	ldi	r30, 0x55	; 85
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	84 60       	ori	r24, 0x04	; 4
     e6c:	8c 93       	st	X, r24
            /* Enable EXTI1 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
     e6e:	ab e5       	ldi	r26, 0x5B	; 91
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	eb e5       	ldi	r30, 0x5B	; 91
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 68       	ori	r24, 0x80	; 128
     e7a:	8c 93       	st	X, r24
     e7c:	6b c0       	rjmp	.+214    	; 0xf54 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_FLOATING_EDGE:
            SET_BIT(EXTI_u8_MCUCR, 3);
     e7e:	a5 e5       	ldi	r26, 0x55	; 85
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e5 e5       	ldi	r30, 0x55	; 85
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	88 60       	ori	r24, 0x08	; 8
     e8a:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR, 2);
     e8c:	a5 e5       	ldi	r26, 0x55	; 85
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e5       	ldi	r30, 0x55	; 85
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8b 7f       	andi	r24, 0xFB	; 251
     e98:	8c 93       	st	X, r24
            /* Enable EXTI1 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
     e9a:	ab e5       	ldi	r26, 0x5B	; 91
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	eb e5       	ldi	r30, 0x5B	; 91
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 68       	ori	r24, 0x80	; 128
     ea6:	8c 93       	st	X, r24
     ea8:	55 c0       	rjmp	.+170    	; 0xf54 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_ANY_LOGICAL_CHANGE:
            CLR_BIT(EXTI_u8_MCUCR, 3);
     eaa:	a5 e5       	ldi	r26, 0x55	; 85
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e5       	ldi	r30, 0x55	; 85
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	87 7f       	andi	r24, 0xF7	; 247
     eb6:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR, 2);
     eb8:	a5 e5       	ldi	r26, 0x55	; 85
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e5       	ldi	r30, 0x55	; 85
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	84 60       	ori	r24, 0x04	; 4
     ec4:	8c 93       	st	X, r24
            /* Enable EXTI1 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
     ec6:	ab e5       	ldi	r26, 0x5B	; 91
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e5       	ldi	r30, 0x5B	; 91
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 68       	ori	r24, 0x80	; 128
     ed2:	8c 93       	st	X, r24
     ed4:	3f c0       	rjmp	.+126    	; 0xf54 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_LOW_LEVEL:
            CLR_BIT(EXTI_u8_MCUCR, 3);
     ed6:	a5 e5       	ldi	r26, 0x55	; 85
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e5       	ldi	r30, 0x55	; 85
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	87 7f       	andi	r24, 0xF7	; 247
     ee2:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR, 2);
     ee4:	a5 e5       	ldi	r26, 0x55	; 85
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e5 e5       	ldi	r30, 0x55	; 85
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
            /* Enable EXTI1 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
     ef2:	ab e5       	ldi	r26, 0x5B	; 91
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	eb e5       	ldi	r30, 0x5B	; 91
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 68       	ori	r24, 0x80	; 128
     efe:	8c 93       	st	X, r24
     f00:	29 c0       	rjmp	.+82     	; 0xf54 <EXTI_voidEnable+0x27e>
            break;
        default:
            Local_u8ErrorState = STD_TYPES_NOK;
     f02:	19 82       	std	Y+1, r1	; 0x01
     f04:	27 c0       	rjmp	.+78     	; 0xf54 <EXTI_voidEnable+0x27e>
        }
        break;
    /*****************************************************************/
    case EXTI_u8_IN2:
        /* Enable EXTI2 */
        SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN2);
     f06:	ab e5       	ldi	r26, 0x5B	; 91
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	eb e5       	ldi	r30, 0x5B	; 91
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 62       	ori	r24, 0x20	; 32
     f12:	8c 93       	st	X, r24
        switch (Copy_u8EdgeIndex)
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3d 83       	std	Y+5, r19	; 0x05
     f1c:	2c 83       	std	Y+4, r18	; 0x04
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	31 f0       	breq	.+12     	; 0xf32 <EXTI_voidEnable+0x25c>
     f26:	2c 81       	ldd	r18, Y+4	; 0x04
     f28:	3d 81       	ldd	r19, Y+5	; 0x05
     f2a:	21 30       	cpi	r18, 0x01	; 1
     f2c:	31 05       	cpc	r19, r1
     f2e:	49 f0       	breq	.+18     	; 0xf42 <EXTI_voidEnable+0x26c>
     f30:	10 c0       	rjmp	.+32     	; 0xf52 <EXTI_voidEnable+0x27c>
        {
        case EXTI_u8_RAISING_EDGE:
            SET_BIT(EXTI_u8_MCUCSR, 6);
     f32:	a4 e5       	ldi	r26, 0x54	; 84
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e4 e5       	ldi	r30, 0x54	; 84
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 64       	ori	r24, 0x40	; 64
     f3e:	8c 93       	st	X, r24
     f40:	09 c0       	rjmp	.+18     	; 0xf54 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_FLOATING_EDGE:
            CLR_BIT(EXTI_u8_MCUCSR, 6);
     f42:	a4 e5       	ldi	r26, 0x54	; 84
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e4 e5       	ldi	r30, 0x54	; 84
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 7b       	andi	r24, 0xBF	; 191
     f4e:	8c 93       	st	X, r24
     f50:	01 c0       	rjmp	.+2      	; 0xf54 <EXTI_voidEnable+0x27e>
            // /* Enable EXTI2 */
            // SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN2);
            break;
        default:
            Local_u8ErrorState = STD_TYPES_NOK;
     f52:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
        break;
    }
    return Local_u8ErrorState;
     f54:	89 81       	ldd	r24, Y+1	; 0x01
}
     f56:	2b 96       	adiw	r28, 0x0b	; 11
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <EXTI_voidDisable>:
u8 EXTI_voidDisable(u8 Copy_u8EXTIIndex)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <EXTI_voidDisable+0x6>
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <EXTI_voidDisable+0x8>
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = STD_TYPES_OK;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8EXTIIndex)
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	3c 83       	std	Y+4, r19	; 0x04
     f82:	2b 83       	std	Y+3, r18	; 0x03
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	91 05       	cpc	r25, r1
     f8c:	89 f0       	breq	.+34     	; 0xfb0 <EXTI_voidDisable+0x48>
     f8e:	2b 81       	ldd	r18, Y+3	; 0x03
     f90:	3c 81       	ldd	r19, Y+4	; 0x04
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	a1 f0       	breq	.+40     	; 0xfc0 <EXTI_voidDisable+0x58>
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	c1 f4       	brne	.+48     	; 0xfd0 <EXTI_voidDisable+0x68>
    {
    case EXTI_u8_IN0:
        CLR_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     fa0:	ab e5       	ldi	r26, 0x5B	; 91
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	eb e5       	ldi	r30, 0x5B	; 91
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	8f 7b       	andi	r24, 0xBF	; 191
     fac:	8c 93       	st	X, r24
     fae:	11 c0       	rjmp	.+34     	; 0xfd2 <EXTI_voidDisable+0x6a>
        break;
    case EXTI_u8_IN1:
        CLR_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
     fb0:	ab e5       	ldi	r26, 0x5B	; 91
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	eb e5       	ldi	r30, 0x5B	; 91
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 77       	andi	r24, 0x7F	; 127
     fbc:	8c 93       	st	X, r24
     fbe:	09 c0       	rjmp	.+18     	; 0xfd2 <EXTI_voidDisable+0x6a>
        break;
    case EXTI_u8_IN2:
        CLR_BIT(EXTI_u8_GICR, EXTI_u8_PIN2);
     fc0:	ab e5       	ldi	r26, 0x5B	; 91
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	eb e5       	ldi	r30, 0x5B	; 91
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 7d       	andi	r24, 0xDF	; 223
     fcc:	8c 93       	st	X, r24
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <EXTI_voidDisable+0x6a>
        break;
    default:
        Local_u8ErrorState = STD_TYPES_NOK;
     fd0:	19 82       	std	Y+1, r1	; 0x01
        break;
    }

    return Local_u8ErrorState;
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <EXTI_u8Set_CallBack>:
/***************************************************************************/
/* Global Pointer to a function */
static void (*EXTI_pfEXTI[3])(void) = {NULL};

u8 EXTI_u8Set_CallBack(void (*lpf)(void), u8 Copy_u8EXTI_Index) // *lpf is the local pointer to the function
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <EXTI_u8Set_CallBack+0x6>
     fe8:	00 d0       	rcall	.+0      	; 0xfea <EXTI_u8Set_CallBack+0x8>
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	9b 83       	std	Y+3, r25	; 0x03
     ff0:	8a 83       	std	Y+2, r24	; 0x02
     ff2:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8ErrorState = STD_TYPES_OK;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8EXTI_Index <= EXTI_u8_IN2) && (lpf != NULL))
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	83 30       	cpi	r24, 0x03	; 3
     ffc:	88 f4       	brcc	.+34     	; 0x1020 <EXTI_u8Set_CallBack+0x3e>
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	9b 81       	ldd	r25, Y+3	; 0x03
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	69 f0       	breq	.+26     	; 0x1020 <EXTI_u8Set_CallBack+0x3e>
        EXTI_pfEXTI[Copy_u8EXTI_Index] = lpf;
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	fc 01       	movw	r30, r24
    1012:	ee 57       	subi	r30, 0x7E	; 126
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	9b 81       	ldd	r25, Y+3	; 0x03
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <EXTI_u8Set_CallBack+0x40>
    else
        Local_u8ErrorState = STD_TYPES_NOK;
    1020:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8ErrorState;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <__vector__1>:
/* Prototype fo ISR of EXTI0 */
void __vector__1(void) __attribute__((signal));
void __vector__1(void) // ISR(EXTI0)
{
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	2f 93       	push	r18
    103e:	3f 93       	push	r19
    1040:	4f 93       	push	r20
    1042:	5f 93       	push	r21
    1044:	6f 93       	push	r22
    1046:	7f 93       	push	r23
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	af 93       	push	r26
    104e:	bf 93       	push	r27
    1050:	ef 93       	push	r30
    1052:	ff 93       	push	r31
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    if (EXTI_pfEXTI[EXTI_u8_IN0 != NULL]) // to make sure that pointer is got a new address, and avoid a garbage value.
    105c:	80 91 82 00 	lds	r24, 0x0082
    1060:	90 91 83 00 	lds	r25, 0x0083
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	29 f0       	breq	.+10     	; 0x1072 <__vector__1+0x40>
        EXTI_pfEXTI[0]();
    1068:	e0 91 82 00 	lds	r30, 0x0082
    106c:	f0 91 83 00 	lds	r31, 0x0083
    1070:	09 95       	icall
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	ff 91       	pop	r31
    1078:	ef 91       	pop	r30
    107a:	bf 91       	pop	r27
    107c:	af 91       	pop	r26
    107e:	9f 91       	pop	r25
    1080:	8f 91       	pop	r24
    1082:	7f 91       	pop	r23
    1084:	6f 91       	pop	r22
    1086:	5f 91       	pop	r21
    1088:	4f 91       	pop	r20
    108a:	3f 91       	pop	r19
    108c:	2f 91       	pop	r18
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	0f 90       	pop	r0
    1094:	1f 90       	pop	r1
    1096:	18 95       	reti

00001098 <__vector__2>:
/* Prototype fo ISR of EXTI1 */
void __vector__2(void) __attribute__((signal));
void __vector__2(void) // ISR(EXTI1)
{
    1098:	1f 92       	push	r1
    109a:	0f 92       	push	r0
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	0f 92       	push	r0
    10a0:	11 24       	eor	r1, r1
    10a2:	2f 93       	push	r18
    10a4:	3f 93       	push	r19
    10a6:	4f 93       	push	r20
    10a8:	5f 93       	push	r21
    10aa:	6f 93       	push	r22
    10ac:	7f 93       	push	r23
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	ef 93       	push	r30
    10b8:	ff 93       	push	r31
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    if (EXTI_pfEXTI[EXTI_u8_IN1 != NULL]) // to make sure that pointer is got a new address, and avoid a garbage value.
    10c2:	80 91 84 00 	lds	r24, 0x0084
    10c6:	90 91 85 00 	lds	r25, 0x0085
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	29 f0       	breq	.+10     	; 0x10d8 <__vector__2+0x40>
        EXTI_pfEXTI[1]();
    10ce:	e0 91 84 00 	lds	r30, 0x0084
    10d2:	f0 91 85 00 	lds	r31, 0x0085
    10d6:	09 95       	icall
}
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	ff 91       	pop	r31
    10de:	ef 91       	pop	r30
    10e0:	bf 91       	pop	r27
    10e2:	af 91       	pop	r26
    10e4:	9f 91       	pop	r25
    10e6:	8f 91       	pop	r24
    10e8:	7f 91       	pop	r23
    10ea:	6f 91       	pop	r22
    10ec:	5f 91       	pop	r21
    10ee:	4f 91       	pop	r20
    10f0:	3f 91       	pop	r19
    10f2:	2f 91       	pop	r18
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	0f 90       	pop	r0
    10fa:	1f 90       	pop	r1
    10fc:	18 95       	reti

000010fe <__vector__3>:
/* Prototype fo ISR of EXTI2 */
void __vector__3(void) __attribute__((signal));
void __vector__3(void) // ISR(EXTI2)
{
    10fe:	1f 92       	push	r1
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	0f 92       	push	r0
    1106:	11 24       	eor	r1, r1
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    // if (EXTI_pfEXTI[EXTI_u8_IN2 != NULL]) // to make sure that pointer is got a new address, and avoid a garbage value.
    EXTI_pfEXTI[2]();
    1128:	e0 91 86 00 	lds	r30, 0x0086
    112c:	f0 91 87 00 	lds	r31, 0x0087
    1130:	09 95       	icall
}
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	ff 91       	pop	r31
    1138:	ef 91       	pop	r30
    113a:	bf 91       	pop	r27
    113c:	af 91       	pop	r26
    113e:	9f 91       	pop	r25
    1140:	8f 91       	pop	r24
    1142:	7f 91       	pop	r23
    1144:	6f 91       	pop	r22
    1146:	5f 91       	pop	r21
    1148:	4f 91       	pop	r20
    114a:	3f 91       	pop	r19
    114c:	2f 91       	pop	r18
    114e:	0f 90       	pop	r0
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	0f 90       	pop	r0
    1154:	1f 90       	pop	r1
    1156:	18 95       	reti

00001158 <DIO_voidInit>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidInit(void)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION,
    1160:	ea e3       	ldi	r30, 0x3A	; 58
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	8e e0       	ldi	r24, 0x0E	; 14
    1166:	80 83       	st	Z, r24
                           DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,
                           DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION,
                           DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);

    DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION,
    1168:	e7 e3       	ldi	r30, 0x37	; 55
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	10 82       	st	Z, r1
                           DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,
                           DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION,
                           DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);

    DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION,
    116e:	e4 e3       	ldi	r30, 0x34	; 52
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	87 e0       	ldi	r24, 0x07	; 7
    1174:	80 83       	st	Z, r24
                           DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,
                           DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION,
                           DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);

    DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION,
    1176:	e1 e3       	ldi	r30, 0x31	; 49
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	8f ef       	ldi	r24, 0xFF	; 255
    117c:	80 83       	st	Z, r24
                           DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION, DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);

    DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE,
    117e:	eb e3       	ldi	r30, 0x3B	; 59
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	8e ef       	ldi	r24, 0xFE	; 254
    1184:	80 83       	st	Z, r24
                            DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE, DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE,
    1186:	e8 e3       	ldi	r30, 0x38	; 56
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	10 82       	st	Z, r1
                            DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE, DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);

    DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE,
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	10 82       	st	Z, r1
                            DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE, DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);

    DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE,
    1192:	e2 e3       	ldi	r30, 0x32	; 50
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	10 82       	st	Z, r1
                            DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE, DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
}
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <DIO_voidSetPinDirection>:
u8 DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	2e 97       	sbiw	r28, 0x0e	; 14
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	8a 83       	std	Y+2, r24	; 0x02
    11b4:	6b 83       	std	Y+3, r22	; 0x03
    11b6:	4c 83       	std	Y+4, r20	; 0x04

    u8 Local_u8ErrorState = STD_TYPES_OK;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	84 30       	cpi	r24, 0x04	; 4
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <DIO_voidSetPinDirection+0x26>
    11c2:	0c c1       	rjmp	.+536    	; 0x13dc <DIO_voidSetPinDirection+0x23e>
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	88 30       	cpi	r24, 0x08	; 8
    11c8:	08 f0       	brcs	.+2      	; 0x11cc <DIO_voidSetPinDirection+0x2e>
    11ca:	08 c1       	rjmp	.+528    	; 0x13dc <DIO_voidSetPinDirection+0x23e>
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	21 f0       	breq	.+8      	; 0x11da <DIO_voidSetPinDirection+0x3c>
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	88 23       	and	r24, r24
    11d6:	09 f0       	breq	.+2      	; 0x11da <DIO_voidSetPinDirection+0x3c>
    11d8:	01 c1       	rjmp	.+514    	; 0x13dc <DIO_voidSetPinDirection+0x23e>
    {
        switch (Copy_u8PortId)
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3e 87       	std	Y+14, r19	; 0x0e
    11e2:	2d 87       	std	Y+13, r18	; 0x0d
    11e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <DIO_voidSetPinDirection+0x52>
    11ee:	4f c0       	rjmp	.+158    	; 0x128e <DIO_voidSetPinDirection+0xf0>
    11f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    11f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	2c f4       	brge	.+10     	; 0x1204 <DIO_voidSetPinDirection+0x66>
    11fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	71 f0       	breq	.+28     	; 0x121e <DIO_voidSetPinDirection+0x80>
    1202:	ed c0       	rjmp	.+474    	; 0x13de <DIO_voidSetPinDirection+0x240>
    1204:	2d 85       	ldd	r18, Y+13	; 0x0d
    1206:	3e 85       	ldd	r19, Y+14	; 0x0e
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <DIO_voidSetPinDirection+0x72>
    120e:	77 c0       	rjmp	.+238    	; 0x12fe <DIO_voidSetPinDirection+0x160>
    1210:	8d 85       	ldd	r24, Y+13	; 0x0d
    1212:	9e 85       	ldd	r25, Y+14	; 0x0e
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	91 05       	cpc	r25, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <DIO_voidSetPinDirection+0x7e>
    121a:	a9 c0       	rjmp	.+338    	; 0x136e <DIO_voidSetPinDirection+0x1d0>
    121c:	e0 c0       	rjmp	.+448    	; 0x13de <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PinDirection)
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	3c 87       	std	Y+12, r19	; 0x0c
    1226:	2b 87       	std	Y+11, r18	; 0x0b
    1228:	8b 85       	ldd	r24, Y+11	; 0x0b
    122a:	9c 85       	ldd	r25, Y+12	; 0x0c
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	d1 f0       	breq	.+52     	; 0x1264 <DIO_voidSetPinDirection+0xc6>
    1230:	2b 85       	ldd	r18, Y+11	; 0x0b
    1232:	3c 85       	ldd	r19, Y+12	; 0x0c
    1234:	21 30       	cpi	r18, 0x01	; 1
    1236:	31 05       	cpc	r19, r1
    1238:	09 f0       	breq	.+2      	; 0x123c <DIO_voidSetPinDirection+0x9e>
    123a:	d1 c0       	rjmp	.+418    	; 0x13de <DIO_voidSetPinDirection+0x240>
            {
            case DIO_u8_OUTPUT:
                SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinID);
    123c:	aa e3       	ldi	r26, 0x3A	; 58
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	ea e3       	ldi	r30, 0x3A	; 58
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_voidSetPinDirection+0xbc>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_voidSetPinDirection+0xb8>
    125e:	84 2b       	or	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	bd c0       	rjmp	.+378    	; 0x13de <DIO_voidSetPinDirection+0x240>
                break;
            case DIO_u8_INPUT:
                CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinID);
    1264:	aa e3       	ldi	r26, 0x3A	; 58
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ea e3       	ldi	r30, 0x3A	; 58
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_voidSetPinDirection+0xe4>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_voidSetPinDirection+0xe0>
    1286:	80 95       	com	r24
    1288:	84 23       	and	r24, r20
    128a:	8c 93       	st	X, r24
    128c:	a8 c0       	rjmp	.+336    	; 0x13de <DIO_voidSetPinDirection+0x240>
                break;
            }

            break;
        case DIO_u8_PORTB:
            switch (Copy_u8PinDirection)
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	3a 87       	std	Y+10, r19	; 0x0a
    1296:	29 87       	std	Y+9, r18	; 0x09
    1298:	89 85       	ldd	r24, Y+9	; 0x09
    129a:	9a 85       	ldd	r25, Y+10	; 0x0a
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	d1 f0       	breq	.+52     	; 0x12d4 <DIO_voidSetPinDirection+0x136>
    12a0:	29 85       	ldd	r18, Y+9	; 0x09
    12a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    12a4:	21 30       	cpi	r18, 0x01	; 1
    12a6:	31 05       	cpc	r19, r1
    12a8:	09 f0       	breq	.+2      	; 0x12ac <DIO_voidSetPinDirection+0x10e>
    12aa:	99 c0       	rjmp	.+306    	; 0x13de <DIO_voidSetPinDirection+0x240>
            {
            case DIO_u8_OUTPUT:
                SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinID);
    12ac:	a7 e3       	ldi	r26, 0x37	; 55
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e7 e3       	ldi	r30, 0x37	; 55
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_voidSetPinDirection+0x12c>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_voidSetPinDirection+0x128>
    12ce:	84 2b       	or	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	85 c0       	rjmp	.+266    	; 0x13de <DIO_voidSetPinDirection+0x240>
                break;
            case DIO_u8_INPUT:
                CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinID);
    12d4:	a7 e3       	ldi	r26, 0x37	; 55
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e7 e3       	ldi	r30, 0x37	; 55
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_voidSetPinDirection+0x154>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_voidSetPinDirection+0x150>
    12f6:	80 95       	com	r24
    12f8:	84 23       	and	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	70 c0       	rjmp	.+224    	; 0x13de <DIO_voidSetPinDirection+0x240>
                break;
            }

            break;
        case DIO_u8_PORTC:
            switch (Copy_u8PinDirection)
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	38 87       	std	Y+8, r19	; 0x08
    1306:	2f 83       	std	Y+7, r18	; 0x07
    1308:	8f 81       	ldd	r24, Y+7	; 0x07
    130a:	98 85       	ldd	r25, Y+8	; 0x08
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	d1 f0       	breq	.+52     	; 0x1344 <DIO_voidSetPinDirection+0x1a6>
    1310:	2f 81       	ldd	r18, Y+7	; 0x07
    1312:	38 85       	ldd	r19, Y+8	; 0x08
    1314:	21 30       	cpi	r18, 0x01	; 1
    1316:	31 05       	cpc	r19, r1
    1318:	09 f0       	breq	.+2      	; 0x131c <DIO_voidSetPinDirection+0x17e>
    131a:	61 c0       	rjmp	.+194    	; 0x13de <DIO_voidSetPinDirection+0x240>
            {
            case DIO_u8_OUTPUT:
                SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinID);
    131c:	a4 e3       	ldi	r26, 0x34	; 52
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e4 e3       	ldi	r30, 0x34	; 52
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_voidSetPinDirection+0x19c>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_voidSetPinDirection+0x198>
    133e:	84 2b       	or	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	4d c0       	rjmp	.+154    	; 0x13de <DIO_voidSetPinDirection+0x240>
                break;
            case DIO_u8_INPUT:
                CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinID);
    1344:	a4 e3       	ldi	r26, 0x34	; 52
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e4 e3       	ldi	r30, 0x34	; 52
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_voidSetPinDirection+0x1c4>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_voidSetPinDirection+0x1c0>
    1366:	80 95       	com	r24
    1368:	84 23       	and	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	38 c0       	rjmp	.+112    	; 0x13de <DIO_voidSetPinDirection+0x240>
                break;
            }

            break;
        case DIO_u8_PORTD:
            switch (Copy_u8PinDirection)
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3e 83       	std	Y+6, r19	; 0x06
    1376:	2d 83       	std	Y+5, r18	; 0x05
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	c9 f0       	breq	.+50     	; 0x13b2 <DIO_voidSetPinDirection+0x214>
    1380:	2d 81       	ldd	r18, Y+5	; 0x05
    1382:	3e 81       	ldd	r19, Y+6	; 0x06
    1384:	21 30       	cpi	r18, 0x01	; 1
    1386:	31 05       	cpc	r19, r1
    1388:	51 f5       	brne	.+84     	; 0x13de <DIO_voidSetPinDirection+0x240>
            {
            case DIO_u8_OUTPUT:
                SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinID);
    138a:	a1 e3       	ldi	r26, 0x31	; 49
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e1 e3       	ldi	r30, 0x31	; 49
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_voidSetPinDirection+0x20a>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_voidSetPinDirection+0x206>
    13ac:	84 2b       	or	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	16 c0       	rjmp	.+44     	; 0x13de <DIO_voidSetPinDirection+0x240>
                break;
            case DIO_u8_INPUT:
                CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinID);
    13b2:	a1 e3       	ldi	r26, 0x31	; 49
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e1 e3       	ldi	r30, 0x31	; 49
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_voidSetPinDirection+0x232>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_voidSetPinDirection+0x22e>
    13d4:	80 95       	com	r24
    13d6:	84 23       	and	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	01 c0       	rjmp	.+2      	; 0x13de <DIO_voidSetPinDirection+0x240>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    13dc:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ErrorState;
    13de:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e0:	2e 96       	adiw	r28, 0x0e	; 14
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <DIO_voidSetPinValue>:
u8 DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_PinID, u8 Copy_u8PinValue)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	2e 97       	sbiw	r28, 0x0e	; 14
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	8a 83       	std	Y+2, r24	; 0x02
    1408:	6b 83       	std	Y+3, r22	; 0x03
    140a:	4c 83       	std	Y+4, r20	; 0x04
    u8 local_u8ErrorState = STD_TYPES_OK;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_PinID <= DIO_u8_PIN7)
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 30       	cpi	r24, 0x08	; 8
    1414:	08 f0       	brcs	.+2      	; 0x1418 <DIO_voidSetPinValue+0x26>
    1416:	08 c1       	rjmp	.+528    	; 0x1628 <DIO_voidSetPinValue+0x236>
    {

        switch (Copy_u8PortId)
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	3e 87       	std	Y+14, r19	; 0x0e
    1420:	2d 87       	std	Y+13, r18	; 0x0d
    1422:	8d 85       	ldd	r24, Y+13	; 0x0d
    1424:	9e 85       	ldd	r25, Y+14	; 0x0e
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	91 05       	cpc	r25, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <DIO_voidSetPinValue+0x3c>
    142c:	50 c0       	rjmp	.+160    	; 0x14ce <DIO_voidSetPinValue+0xdc>
    142e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1430:	3e 85       	ldd	r19, Y+14	; 0x0e
    1432:	22 30       	cpi	r18, 0x02	; 2
    1434:	31 05       	cpc	r19, r1
    1436:	2c f4       	brge	.+10     	; 0x1442 <DIO_voidSetPinValue+0x50>
    1438:	8d 85       	ldd	r24, Y+13	; 0x0d
    143a:	9e 85       	ldd	r25, Y+14	; 0x0e
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	71 f0       	breq	.+28     	; 0x145c <DIO_voidSetPinValue+0x6a>
    1440:	f1 c0       	rjmp	.+482    	; 0x1624 <DIO_voidSetPinValue+0x232>
    1442:	2d 85       	ldd	r18, Y+13	; 0x0d
    1444:	3e 85       	ldd	r19, Y+14	; 0x0e
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <DIO_voidSetPinValue+0x5c>
    144c:	79 c0       	rjmp	.+242    	; 0x1540 <DIO_voidSetPinValue+0x14e>
    144e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1450:	9e 85       	ldd	r25, Y+14	; 0x0e
    1452:	83 30       	cpi	r24, 0x03	; 3
    1454:	91 05       	cpc	r25, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <DIO_voidSetPinValue+0x68>
    1458:	ac c0       	rjmp	.+344    	; 0x15b2 <DIO_voidSetPinValue+0x1c0>
    145a:	e4 c0       	rjmp	.+456    	; 0x1624 <DIO_voidSetPinValue+0x232>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PinValue)
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	3c 87       	std	Y+12, r19	; 0x0c
    1464:	2b 87       	std	Y+11, r18	; 0x0b
    1466:	8b 85       	ldd	r24, Y+11	; 0x0b
    1468:	9c 85       	ldd	r25, Y+12	; 0x0c
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	c9 f0       	breq	.+50     	; 0x14a0 <DIO_voidSetPinValue+0xae>
    146e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1470:	3c 85       	ldd	r19, Y+12	; 0x0c
    1472:	21 30       	cpi	r18, 0x01	; 1
    1474:	31 05       	cpc	r19, r1
    1476:	49 f5       	brne	.+82     	; 0x14ca <DIO_voidSetPinValue+0xd8>
            {
            case DIO_u8_HIGH:
                SET_BIT(DIO_u8_PORTA_REG, Copy_PinID);
    1478:	ab e3       	ldi	r26, 0x3B	; 59
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	eb e3       	ldi	r30, 0x3B	; 59
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_voidSetPinValue+0xa4>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_voidSetPinValue+0xa0>
    149a:	84 2b       	or	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	c5 c0       	rjmp	.+394    	; 0x162a <DIO_voidSetPinValue+0x238>
                break;
            case DIO_u8_LOW:
                CLR_BIT(DIO_u8_PORTA_REG, Copy_PinID);
    14a0:	ab e3       	ldi	r26, 0x3B	; 59
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	eb e3       	ldi	r30, 0x3B	; 59
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	48 2f       	mov	r20, r24
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 2e       	mov	r0, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <DIO_voidSetPinValue+0xcc>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <DIO_voidSetPinValue+0xc8>
    14c2:	80 95       	com	r24
    14c4:	84 23       	and	r24, r20
    14c6:	8c 93       	st	X, r24
    14c8:	b0 c0       	rjmp	.+352    	; 0x162a <DIO_voidSetPinValue+0x238>
                break;
            default:
                local_u8ErrorState = STD_TYPES_NOK;
    14ca:	19 82       	std	Y+1, r1	; 0x01
    14cc:	ae c0       	rjmp	.+348    	; 0x162a <DIO_voidSetPinValue+0x238>
                break;
            }
            break;
        case DIO_u8_PORTB:
            switch (Copy_u8PinValue)
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	3a 87       	std	Y+10, r19	; 0x0a
    14d6:	29 87       	std	Y+9, r18	; 0x09
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	c9 f0       	breq	.+50     	; 0x1512 <DIO_voidSetPinValue+0x120>
    14e0:	29 85       	ldd	r18, Y+9	; 0x09
    14e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    14e4:	21 30       	cpi	r18, 0x01	; 1
    14e6:	31 05       	cpc	r19, r1
    14e8:	49 f5       	brne	.+82     	; 0x153c <DIO_voidSetPinValue+0x14a>
            {
            case DIO_u8_HIGH:
                SET_BIT(DIO_u8_PORTB_REG, Copy_PinID);
    14ea:	a8 e3       	ldi	r26, 0x38	; 56
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e8 e3       	ldi	r30, 0x38	; 56
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_voidSetPinValue+0x116>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_voidSetPinValue+0x112>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	8c c0       	rjmp	.+280    	; 0x162a <DIO_voidSetPinValue+0x238>
                break;
            case DIO_u8_LOW:
                CLR_BIT(DIO_u8_PORTB_REG, Copy_PinID);
    1512:	a8 e3       	ldi	r26, 0x38	; 56
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e8 e3       	ldi	r30, 0x38	; 56
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_voidSetPinValue+0x13e>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_voidSetPinValue+0x13a>
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	77 c0       	rjmp	.+238    	; 0x162a <DIO_voidSetPinValue+0x238>
                break;
            default:
                local_u8ErrorState = STD_TYPES_NOK;
    153c:	19 82       	std	Y+1, r1	; 0x01
    153e:	75 c0       	rjmp	.+234    	; 0x162a <DIO_voidSetPinValue+0x238>
                break;
            }
            break;

        case DIO_u8_PORTC:
            switch (Copy_u8PinValue)
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	38 87       	std	Y+8, r19	; 0x08
    1548:	2f 83       	std	Y+7, r18	; 0x07
    154a:	8f 81       	ldd	r24, Y+7	; 0x07
    154c:	98 85       	ldd	r25, Y+8	; 0x08
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	c9 f0       	breq	.+50     	; 0x1584 <DIO_voidSetPinValue+0x192>
    1552:	2f 81       	ldd	r18, Y+7	; 0x07
    1554:	38 85       	ldd	r19, Y+8	; 0x08
    1556:	21 30       	cpi	r18, 0x01	; 1
    1558:	31 05       	cpc	r19, r1
    155a:	49 f5       	brne	.+82     	; 0x15ae <DIO_voidSetPinValue+0x1bc>
            {
            case DIO_u8_HIGH:
                SET_BIT(DIO_u8_PORTC_REG, Copy_PinID);
    155c:	a5 e3       	ldi	r26, 0x35	; 53
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e5 e3       	ldi	r30, 0x35	; 53
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_voidSetPinValue+0x188>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <DIO_voidSetPinValue+0x184>
    157e:	84 2b       	or	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	53 c0       	rjmp	.+166    	; 0x162a <DIO_voidSetPinValue+0x238>
                break;
            case DIO_u8_LOW:
                CLR_BIT(DIO_u8_PORTC_REG, Copy_PinID);
    1584:	a5 e3       	ldi	r26, 0x35	; 53
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e5 e3       	ldi	r30, 0x35	; 53
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_voidSetPinValue+0x1b0>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <DIO_voidSetPinValue+0x1ac>
    15a6:	80 95       	com	r24
    15a8:	84 23       	and	r24, r20
    15aa:	8c 93       	st	X, r24
    15ac:	3e c0       	rjmp	.+124    	; 0x162a <DIO_voidSetPinValue+0x238>
                break;
            default:
                local_u8ErrorState = STD_TYPES_NOK;
    15ae:	19 82       	std	Y+1, r1	; 0x01
    15b0:	3c c0       	rjmp	.+120    	; 0x162a <DIO_voidSetPinValue+0x238>
                break;
            }
            break;

        case DIO_u8_PORTD:
            switch (Copy_u8PinValue)
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	3e 83       	std	Y+6, r19	; 0x06
    15ba:	2d 83       	std	Y+5, r18	; 0x05
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	c9 f0       	breq	.+50     	; 0x15f6 <DIO_voidSetPinValue+0x204>
    15c4:	2d 81       	ldd	r18, Y+5	; 0x05
    15c6:	3e 81       	ldd	r19, Y+6	; 0x06
    15c8:	21 30       	cpi	r18, 0x01	; 1
    15ca:	31 05       	cpc	r19, r1
    15cc:	49 f5       	brne	.+82     	; 0x1620 <DIO_voidSetPinValue+0x22e>
            {
            case DIO_u8_HIGH:
                SET_BIT(DIO_u8_PORTD_REG, Copy_PinID);
    15ce:	a2 e3       	ldi	r26, 0x32	; 50
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e2 e3       	ldi	r30, 0x32	; 50
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_voidSetPinValue+0x1fa>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_voidSetPinValue+0x1f6>
    15f0:	84 2b       	or	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	1a c0       	rjmp	.+52     	; 0x162a <DIO_voidSetPinValue+0x238>
                break;
            case DIO_u8_LOW:
                CLR_BIT(DIO_u8_PORTD_REG, Copy_PinID);
    15f6:	a2 e3       	ldi	r26, 0x32	; 50
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e2 e3       	ldi	r30, 0x32	; 50
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_voidSetPinValue+0x222>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_voidSetPinValue+0x21e>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	05 c0       	rjmp	.+10     	; 0x162a <DIO_voidSetPinValue+0x238>
                break;
            default:
                local_u8ErrorState = STD_TYPES_NOK;
    1620:	19 82       	std	Y+1, r1	; 0x01
    1622:	03 c0       	rjmp	.+6      	; 0x162a <DIO_voidSetPinValue+0x238>
                break;
            }
            break;

        default:
            local_u8ErrorState = STD_TYPES_NOK;
    1624:	19 82       	std	Y+1, r1	; 0x01
    1626:	01 c0       	rjmp	.+2      	; 0x162a <DIO_voidSetPinValue+0x238>
        }
    }
    else
    {
        local_u8ErrorState = STD_TYPES_NOK;
    1628:	19 82       	std	Y+1, r1	; 0x01
    }
    return local_u8ErrorState;
    162a:	89 81       	ldd	r24, Y+1	; 0x01
}
    162c:	2e 96       	adiw	r28, 0x0e	; 14
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_PinID, u8 *Copy_pu8PinValue)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	28 97       	sbiw	r28, 0x08	; 8
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	8b 83       	std	Y+3, r24	; 0x03
    1654:	6c 83       	std	Y+4, r22	; 0x04
    1656:	5e 83       	std	Y+6, r21	; 0x06
    1658:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ErrorState = STD_TYPES_OK;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue;
    if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_PinID <= DIO_u8_PIN7) && (Copy_pu8PinValue != NULL))
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	84 30       	cpi	r24, 0x04	; 4
    1662:	08 f0       	brcs	.+2      	; 0x1666 <DIO_u8GetPinValue+0x28>
    1664:	9f c0       	rjmp	.+318    	; 0x17a4 <DIO_u8GetPinValue+0x166>
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	88 30       	cpi	r24, 0x08	; 8
    166a:	08 f0       	brcs	.+2      	; 0x166e <DIO_u8GetPinValue+0x30>
    166c:	9b c0       	rjmp	.+310    	; 0x17a4 <DIO_u8GetPinValue+0x166>
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	09 f4       	brne	.+2      	; 0x1678 <DIO_u8GetPinValue+0x3a>
    1676:	96 c0       	rjmp	.+300    	; 0x17a4 <DIO_u8GetPinValue+0x166>
    {
        switch (Copy_u8PortId)
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	38 87       	std	Y+8, r19	; 0x08
    1680:	2f 83       	std	Y+7, r18	; 0x07
    1682:	4f 81       	ldd	r20, Y+7	; 0x07
    1684:	58 85       	ldd	r21, Y+8	; 0x08
    1686:	41 30       	cpi	r20, 0x01	; 1
    1688:	51 05       	cpc	r21, r1
    168a:	a9 f1       	breq	.+106    	; 0x16f6 <DIO_u8GetPinValue+0xb8>
    168c:	8f 81       	ldd	r24, Y+7	; 0x07
    168e:	98 85       	ldd	r25, Y+8	; 0x08
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	91 05       	cpc	r25, r1
    1694:	34 f4       	brge	.+12     	; 0x16a2 <DIO_u8GetPinValue+0x64>
    1696:	2f 81       	ldd	r18, Y+7	; 0x07
    1698:	38 85       	ldd	r19, Y+8	; 0x08
    169a:	21 15       	cp	r18, r1
    169c:	31 05       	cpc	r19, r1
    169e:	71 f0       	breq	.+28     	; 0x16bc <DIO_u8GetPinValue+0x7e>
    16a0:	82 c0       	rjmp	.+260    	; 0x17a6 <DIO_u8GetPinValue+0x168>
    16a2:	4f 81       	ldd	r20, Y+7	; 0x07
    16a4:	58 85       	ldd	r21, Y+8	; 0x08
    16a6:	42 30       	cpi	r20, 0x02	; 2
    16a8:	51 05       	cpc	r21, r1
    16aa:	09 f4       	brne	.+2      	; 0x16ae <DIO_u8GetPinValue+0x70>
    16ac:	41 c0       	rjmp	.+130    	; 0x1730 <DIO_u8GetPinValue+0xf2>
    16ae:	8f 81       	ldd	r24, Y+7	; 0x07
    16b0:	98 85       	ldd	r25, Y+8	; 0x08
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	91 05       	cpc	r25, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <DIO_u8GetPinValue+0x7c>
    16b8:	58 c0       	rjmp	.+176    	; 0x176a <DIO_u8GetPinValue+0x12c>
    16ba:	75 c0       	rjmp	.+234    	; 0x17a6 <DIO_u8GetPinValue+0x168>
        {
        case DIO_u8_PORTA:
            Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_PinID);
    16bc:	e9 e3       	ldi	r30, 0x39	; 57
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a9 01       	movw	r20, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_u8GetPinValue+0x96>
    16d0:	55 95       	asr	r21
    16d2:	47 95       	ror	r20
    16d4:	8a 95       	dec	r24
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_u8GetPinValue+0x92>
    16d8:	ca 01       	movw	r24, r20
    16da:	81 70       	andi	r24, 0x01	; 1
    16dc:	89 83       	std	Y+1, r24	; 0x01
            if (Local_u8PinValue == 0)
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	88 23       	and	r24, r24
    16e2:	21 f4       	brne	.+8      	; 0x16ec <DIO_u8GetPinValue+0xae>
            {
                *Copy_pu8PinValue = DIO_u8_LOW;
    16e4:	ed 81       	ldd	r30, Y+5	; 0x05
    16e6:	fe 81       	ldd	r31, Y+6	; 0x06
    16e8:	10 82       	st	Z, r1
    16ea:	5d c0       	rjmp	.+186    	; 0x17a6 <DIO_u8GetPinValue+0x168>
            }
            else
            {
                *Copy_pu8PinValue = DIO_u8_HIGH;
    16ec:	ed 81       	ldd	r30, Y+5	; 0x05
    16ee:	fe 81       	ldd	r31, Y+6	; 0x06
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	80 83       	st	Z, r24
    16f4:	58 c0       	rjmp	.+176    	; 0x17a6 <DIO_u8GetPinValue+0x168>
            }

            break;
        case DIO_u8_PORTB:
            Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_PinID);
    16f6:	e6 e3       	ldi	r30, 0x36	; 54
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	8c 81       	ldd	r24, Y+4	; 0x04
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	a9 01       	movw	r20, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_u8GetPinValue+0xd0>
    170a:	55 95       	asr	r21
    170c:	47 95       	ror	r20
    170e:	8a 95       	dec	r24
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_u8GetPinValue+0xcc>
    1712:	ca 01       	movw	r24, r20
    1714:	81 70       	andi	r24, 0x01	; 1
    1716:	89 83       	std	Y+1, r24	; 0x01
            if (Local_u8PinValue == 0)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	88 23       	and	r24, r24
    171c:	21 f4       	brne	.+8      	; 0x1726 <DIO_u8GetPinValue+0xe8>
            {
                *Copy_pu8PinValue = DIO_u8_LOW;
    171e:	ed 81       	ldd	r30, Y+5	; 0x05
    1720:	fe 81       	ldd	r31, Y+6	; 0x06
    1722:	10 82       	st	Z, r1
    1724:	40 c0       	rjmp	.+128    	; 0x17a6 <DIO_u8GetPinValue+0x168>
            }
            else
            {
                *Copy_pu8PinValue = DIO_u8_HIGH;
    1726:	ed 81       	ldd	r30, Y+5	; 0x05
    1728:	fe 81       	ldd	r31, Y+6	; 0x06
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	80 83       	st	Z, r24
    172e:	3b c0       	rjmp	.+118    	; 0x17a6 <DIO_u8GetPinValue+0x168>
            }

            break;
        case DIO_u8_PORTC:
            Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_PinID);
    1730:	e3 e3       	ldi	r30, 0x33	; 51
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	a9 01       	movw	r20, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_u8GetPinValue+0x10a>
    1744:	55 95       	asr	r21
    1746:	47 95       	ror	r20
    1748:	8a 95       	dec	r24
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <DIO_u8GetPinValue+0x106>
    174c:	ca 01       	movw	r24, r20
    174e:	81 70       	andi	r24, 0x01	; 1
    1750:	89 83       	std	Y+1, r24	; 0x01
            if (Local_u8PinValue == 0)
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	88 23       	and	r24, r24
    1756:	21 f4       	brne	.+8      	; 0x1760 <DIO_u8GetPinValue+0x122>
            {
                *Copy_pu8PinValue = DIO_u8_LOW;
    1758:	ed 81       	ldd	r30, Y+5	; 0x05
    175a:	fe 81       	ldd	r31, Y+6	; 0x06
    175c:	10 82       	st	Z, r1
    175e:	23 c0       	rjmp	.+70     	; 0x17a6 <DIO_u8GetPinValue+0x168>
            }
            else
            {
                *Copy_pu8PinValue = DIO_u8_HIGH;
    1760:	ed 81       	ldd	r30, Y+5	; 0x05
    1762:	fe 81       	ldd	r31, Y+6	; 0x06
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	80 83       	st	Z, r24
    1768:	1e c0       	rjmp	.+60     	; 0x17a6 <DIO_u8GetPinValue+0x168>
            }

            break;
        case DIO_u8_PORTD:
            Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_PinID);
    176a:	e0 e3       	ldi	r30, 0x30	; 48
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	88 2f       	mov	r24, r24
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a9 01       	movw	r20, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <DIO_u8GetPinValue+0x144>
    177e:	55 95       	asr	r21
    1780:	47 95       	ror	r20
    1782:	8a 95       	dec	r24
    1784:	e2 f7       	brpl	.-8      	; 0x177e <DIO_u8GetPinValue+0x140>
    1786:	ca 01       	movw	r24, r20
    1788:	81 70       	andi	r24, 0x01	; 1
    178a:	89 83       	std	Y+1, r24	; 0x01
            if (Local_u8PinValue == 0)
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	88 23       	and	r24, r24
    1790:	21 f4       	brne	.+8      	; 0x179a <DIO_u8GetPinValue+0x15c>
            {
                *Copy_pu8PinValue = DIO_u8_LOW;
    1792:	ed 81       	ldd	r30, Y+5	; 0x05
    1794:	fe 81       	ldd	r31, Y+6	; 0x06
    1796:	10 82       	st	Z, r1
    1798:	06 c0       	rjmp	.+12     	; 0x17a6 <DIO_u8GetPinValue+0x168>
            }
            else
            {
                *Copy_pu8PinValue = DIO_u8_HIGH;
    179a:	ed 81       	ldd	r30, Y+5	; 0x05
    179c:	fe 81       	ldd	r31, Y+6	; 0x06
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	80 83       	st	Z, r24
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <DIO_u8GetPinValue+0x168>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    17a4:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ErrorState;
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17a8:	28 96       	adiw	r28, 0x08	; 8
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	2d 97       	sbiw	r28, 0x0d	; 13
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	8a 83       	std	Y+2, r24	; 0x02
    17d0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	21 f0       	breq	.+8      	; 0x17e4 <DIO_u8SetPortDirection+0x2a>
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	88 23       	and	r24, r24
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <DIO_u8SetPortDirection+0x2a>
    17e2:	7f c0       	rjmp	.+254    	; 0x18e2 <DIO_u8SetPortDirection+0x128>
    {
        switch (Copy_u8PortID)
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	3d 87       	std	Y+13, r19	; 0x0d
    17ec:	2c 87       	std	Y+12, r18	; 0x0c
    17ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    17f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	91 05       	cpc	r25, r1
    17f6:	71 f1       	breq	.+92     	; 0x1854 <DIO_u8SetPortDirection+0x9a>
    17f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    17fa:	3d 85       	ldd	r19, Y+13	; 0x0d
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	2c f4       	brge	.+10     	; 0x180c <DIO_u8SetPortDirection+0x52>
    1802:	8c 85       	ldd	r24, Y+12	; 0x0c
    1804:	9d 85       	ldd	r25, Y+13	; 0x0d
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	69 f0       	breq	.+26     	; 0x1824 <DIO_u8SetPortDirection+0x6a>
    180a:	69 c0       	rjmp	.+210    	; 0x18de <DIO_u8SetPortDirection+0x124>
    180c:	2c 85       	ldd	r18, Y+12	; 0x0c
    180e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1810:	22 30       	cpi	r18, 0x02	; 2
    1812:	31 05       	cpc	r19, r1
    1814:	b1 f1       	breq	.+108    	; 0x1882 <DIO_u8SetPortDirection+0xc8>
    1816:	8c 85       	ldd	r24, Y+12	; 0x0c
    1818:	9d 85       	ldd	r25, Y+13	; 0x0d
    181a:	83 30       	cpi	r24, 0x03	; 3
    181c:	91 05       	cpc	r25, r1
    181e:	09 f4       	brne	.+2      	; 0x1822 <DIO_u8SetPortDirection+0x68>
    1820:	47 c0       	rjmp	.+142    	; 0x18b0 <DIO_u8SetPortDirection+0xf6>
    1822:	5d c0       	rjmp	.+186    	; 0x18de <DIO_u8SetPortDirection+0x124>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PortDirection)
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	3b 87       	std	Y+11, r19	; 0x0b
    182c:	2a 87       	std	Y+10, r18	; 0x0a
    182e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1830:	9b 85       	ldd	r25, Y+11	; 0x0b
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	59 f0       	breq	.+22     	; 0x184c <DIO_u8SetPortDirection+0x92>
    1836:	2a 85       	ldd	r18, Y+10	; 0x0a
    1838:	3b 85       	ldd	r19, Y+11	; 0x0b
    183a:	21 30       	cpi	r18, 0x01	; 1
    183c:	31 05       	cpc	r19, r1
    183e:	09 f0       	breq	.+2      	; 0x1842 <DIO_u8SetPortDirection+0x88>
    1840:	51 c0       	rjmp	.+162    	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRA_REG = 0xff;
    1842:	ea e3       	ldi	r30, 0x3A	; 58
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	8f ef       	ldi	r24, 0xFF	; 255
    1848:	80 83       	st	Z, r24
    184a:	4c c0       	rjmp	.+152    	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
                break;
            case DIO_u8_INPUT:
                DIO_u8_DDRA_REG = 0x00;
    184c:	ea e3       	ldi	r30, 0x3A	; 58
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	10 82       	st	Z, r1
    1852:	48 c0       	rjmp	.+144    	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
        case DIO_u8_PORTB:
            switch (Copy_u8PortDirection)
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	39 87       	std	Y+9, r19	; 0x09
    185c:	28 87       	std	Y+8, r18	; 0x08
    185e:	88 85       	ldd	r24, Y+8	; 0x08
    1860:	99 85       	ldd	r25, Y+9	; 0x09
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	51 f0       	breq	.+20     	; 0x187a <DIO_u8SetPortDirection+0xc0>
    1866:	28 85       	ldd	r18, Y+8	; 0x08
    1868:	39 85       	ldd	r19, Y+9	; 0x09
    186a:	21 30       	cpi	r18, 0x01	; 1
    186c:	31 05       	cpc	r19, r1
    186e:	d1 f5       	brne	.+116    	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRB_REG = 0xff;
    1870:	e7 e3       	ldi	r30, 0x37	; 55
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	8f ef       	ldi	r24, 0xFF	; 255
    1876:	80 83       	st	Z, r24
    1878:	35 c0       	rjmp	.+106    	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
                break;
            case DIO_u8_INPUT:
                DIO_u8_DDRB_REG = 0x00;
    187a:	e7 e3       	ldi	r30, 0x37	; 55
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	10 82       	st	Z, r1
    1880:	31 c0       	rjmp	.+98     	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
        case DIO_u8_PORTC:
            switch (Copy_u8PortDirection)
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	3f 83       	std	Y+7, r19	; 0x07
    188a:	2e 83       	std	Y+6, r18	; 0x06
    188c:	8e 81       	ldd	r24, Y+6	; 0x06
    188e:	9f 81       	ldd	r25, Y+7	; 0x07
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	51 f0       	breq	.+20     	; 0x18a8 <DIO_u8SetPortDirection+0xee>
    1894:	2e 81       	ldd	r18, Y+6	; 0x06
    1896:	3f 81       	ldd	r19, Y+7	; 0x07
    1898:	21 30       	cpi	r18, 0x01	; 1
    189a:	31 05       	cpc	r19, r1
    189c:	19 f5       	brne	.+70     	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRC_REG = 0xff;
    189e:	e4 e3       	ldi	r30, 0x34	; 52
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	80 83       	st	Z, r24
    18a6:	1e c0       	rjmp	.+60     	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
                break;
            case DIO_u8_INPUT:
                DIO_u8_DDRC_REG = 0x00;
    18a8:	e4 e3       	ldi	r30, 0x34	; 52
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	10 82       	st	Z, r1
    18ae:	1a c0       	rjmp	.+52     	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
        case DIO_u8_PORTD:
            switch (Copy_u8PortDirection)
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	3d 83       	std	Y+5, r19	; 0x05
    18b8:	2c 83       	std	Y+4, r18	; 0x04
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	9d 81       	ldd	r25, Y+5	; 0x05
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	51 f0       	breq	.+20     	; 0x18d6 <DIO_u8SetPortDirection+0x11c>
    18c2:	2c 81       	ldd	r18, Y+4	; 0x04
    18c4:	3d 81       	ldd	r19, Y+5	; 0x05
    18c6:	21 30       	cpi	r18, 0x01	; 1
    18c8:	31 05       	cpc	r19, r1
    18ca:	61 f4       	brne	.+24     	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRD_REG = 0xff;
    18cc:	e1 e3       	ldi	r30, 0x31	; 49
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	8f ef       	ldi	r24, 0xFF	; 255
    18d2:	80 83       	st	Z, r24
    18d4:	07 c0       	rjmp	.+14     	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
                break;
            case DIO_u8_INPUT:
                DIO_u8_DDRD_REG = 0x00;
    18d6:	e1 e3       	ldi	r30, 0x31	; 49
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	10 82       	st	Z, r1
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
        default:
            Local_u8ErrorState = STD_TYPES_NOK;
    18de:	19 82       	std	Y+1, r1	; 0x01
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <DIO_u8SetPortDirection+0x12a>
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    18e2:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8ErrorState;
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e6:	2d 96       	adiw	r28, 0x0d	; 13
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <DIO_u8SetPortValue+0x6>
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <DIO_u8SetPortValue+0x8>
    1900:	0f 92       	push	r0
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	8a 83       	std	Y+2, r24	; 0x02
    1908:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortID)
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	3d 83       	std	Y+5, r19	; 0x05
    1916:	2c 83       	std	Y+4, r18	; 0x04
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	9d 81       	ldd	r25, Y+5	; 0x05
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	91 05       	cpc	r25, r1
    1920:	d1 f0       	breq	.+52     	; 0x1956 <DIO_u8SetPortValue+0x5e>
    1922:	2c 81       	ldd	r18, Y+4	; 0x04
    1924:	3d 81       	ldd	r19, Y+5	; 0x05
    1926:	22 30       	cpi	r18, 0x02	; 2
    1928:	31 05       	cpc	r19, r1
    192a:	2c f4       	brge	.+10     	; 0x1936 <DIO_u8SetPortValue+0x3e>
    192c:	8c 81       	ldd	r24, Y+4	; 0x04
    192e:	9d 81       	ldd	r25, Y+5	; 0x05
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	61 f0       	breq	.+24     	; 0x194c <DIO_u8SetPortValue+0x54>
    1934:	1f c0       	rjmp	.+62     	; 0x1974 <DIO_u8SetPortValue+0x7c>
    1936:	2c 81       	ldd	r18, Y+4	; 0x04
    1938:	3d 81       	ldd	r19, Y+5	; 0x05
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	31 05       	cpc	r19, r1
    193e:	81 f0       	breq	.+32     	; 0x1960 <DIO_u8SetPortValue+0x68>
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	9d 81       	ldd	r25, Y+5	; 0x05
    1944:	83 30       	cpi	r24, 0x03	; 3
    1946:	91 05       	cpc	r25, r1
    1948:	81 f0       	breq	.+32     	; 0x196a <DIO_u8SetPortValue+0x72>
    194a:	14 c0       	rjmp	.+40     	; 0x1974 <DIO_u8SetPortValue+0x7c>
    {
    case DIO_u8_PORTA:
        DIO_u8_PORTA_REG = Copy_u8PortValue;
    194c:	eb e3       	ldi	r30, 0x3B	; 59
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	80 83       	st	Z, r24
    1954:	10 c0       	rjmp	.+32     	; 0x1976 <DIO_u8SetPortValue+0x7e>
        break;
    case DIO_u8_PORTB:
        DIO_u8_PORTB_REG = Copy_u8PortValue;
    1956:	e8 e3       	ldi	r30, 0x38	; 56
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	80 83       	st	Z, r24
    195e:	0b c0       	rjmp	.+22     	; 0x1976 <DIO_u8SetPortValue+0x7e>
        break;
    case DIO_u8_PORTC:
        DIO_u8_PORTC_REG = Copy_u8PortValue;
    1960:	e5 e3       	ldi	r30, 0x35	; 53
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	80 83       	st	Z, r24
    1968:	06 c0       	rjmp	.+12     	; 0x1976 <DIO_u8SetPortValue+0x7e>
        break;
    case DIO_u8_PORTD:
        DIO_u8_PORTD_REG = Copy_u8PortValue;
    196a:	e2 e3       	ldi	r30, 0x32	; 50
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	80 83       	st	Z, r24
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <DIO_u8SetPortValue+0x7e>
        break;

    default:
        Local_u8ErrorState = STD_TYPES_NOK;
    1974:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8ErrorState;
    1976:	89 81       	ldd	r24, Y+1	; 0x01
}
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	00 d0       	rcall	.+0      	; 0x198e <DIO_u8GetPortValue+0x6>
    198e:	00 d0       	rcall	.+0      	; 0x1990 <DIO_u8GetPortValue+0x8>
    1990:	00 d0       	rcall	.+0      	; 0x1992 <DIO_u8GetPortValue+0xa>
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	8a 83       	std	Y+2, r24	; 0x02
    1998:	7c 83       	std	Y+4, r23	; 0x04
    199a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu8ReturnedPortValue != NULL)
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	e9 f1       	breq	.+122    	; 0x1a22 <DIO_u8GetPortValue+0x9a>
    {
        switch (Copy_u8PortId)
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	3e 83       	std	Y+6, r19	; 0x06
    19b0:	2d 83       	std	Y+5, r18	; 0x05
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	9e 81       	ldd	r25, Y+6	; 0x06
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	91 05       	cpc	r25, r1
    19ba:	e1 f0       	breq	.+56     	; 0x19f4 <DIO_u8GetPortValue+0x6c>
    19bc:	2d 81       	ldd	r18, Y+5	; 0x05
    19be:	3e 81       	ldd	r19, Y+6	; 0x06
    19c0:	22 30       	cpi	r18, 0x02	; 2
    19c2:	31 05       	cpc	r19, r1
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <DIO_u8GetPortValue+0x48>
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	61 f0       	breq	.+24     	; 0x19e6 <DIO_u8GetPortValue+0x5e>
    19ce:	27 c0       	rjmp	.+78     	; 0x1a1e <DIO_u8GetPortValue+0x96>
    19d0:	2d 81       	ldd	r18, Y+5	; 0x05
    19d2:	3e 81       	ldd	r19, Y+6	; 0x06
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	a1 f0       	breq	.+40     	; 0x1a02 <DIO_u8GetPortValue+0x7a>
    19da:	8d 81       	ldd	r24, Y+5	; 0x05
    19dc:	9e 81       	ldd	r25, Y+6	; 0x06
    19de:	83 30       	cpi	r24, 0x03	; 3
    19e0:	91 05       	cpc	r25, r1
    19e2:	b1 f0       	breq	.+44     	; 0x1a10 <DIO_u8GetPortValue+0x88>
    19e4:	1c c0       	rjmp	.+56     	; 0x1a1e <DIO_u8GetPortValue+0x96>
        {
        case DIO_u8_PORTA:
            *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    19e6:	e9 e3       	ldi	r30, 0x39	; 57
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	eb 81       	ldd	r30, Y+3	; 0x03
    19ee:	fc 81       	ldd	r31, Y+4	; 0x04
    19f0:	80 83       	st	Z, r24
    19f2:	18 c0       	rjmp	.+48     	; 0x1a24 <DIO_u8GetPortValue+0x9c>
            break;
        case DIO_u8_PORTB:
            *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    19f4:	e6 e3       	ldi	r30, 0x36	; 54
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	eb 81       	ldd	r30, Y+3	; 0x03
    19fc:	fc 81       	ldd	r31, Y+4	; 0x04
    19fe:	80 83       	st	Z, r24
    1a00:	11 c0       	rjmp	.+34     	; 0x1a24 <DIO_u8GetPortValue+0x9c>
            break;
        case DIO_u8_PORTC:
            *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1a02:	e3 e3       	ldi	r30, 0x33	; 51
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	eb 81       	ldd	r30, Y+3	; 0x03
    1a0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a0c:	80 83       	st	Z, r24
    1a0e:	0a c0       	rjmp	.+20     	; 0x1a24 <DIO_u8GetPortValue+0x9c>
            break;
        case DIO_u8_PORTD:
            *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    1a10:	e0 e3       	ldi	r30, 0x30	; 48
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	eb 81       	ldd	r30, Y+3	; 0x03
    1a18:	fc 81       	ldd	r31, Y+4	; 0x04
    1a1a:	80 83       	st	Z, r24
    1a1c:	03 c0       	rjmp	.+6      	; 0x1a24 <DIO_u8GetPortValue+0x9c>
            break;

        default:
            Local_u8ErrorState = STD_TYPES_NOK;
    1a1e:	19 82       	std	Y+1, r1	; 0x01
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <DIO_u8GetPortValue+0x9c>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1a22:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8ErrorState;
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a26:	26 96       	adiw	r28, 0x06	; 6
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <ADC_VoidInit>:
static void (*ADC_pfNotification)(u16) = NULL;
// ADC Busy Flag
static u8 ADC_u8BusyFlag = 0;
/**********************************************************************/
void ADC_VoidInit(void)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_REFS0_BIT);
#elif Voltage_Ref_ADMUX == reserved
    SET_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_REFS1_BIT);
    CLR_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_REFS0_BIT);
#elif Voltage_Ref_ADMUX == Internal_Voltage_Ref
    SET_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_REFS1_BIT);
    1a40:	a7 e2       	ldi	r26, 0x27	; 39
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e7 e2       	ldi	r30, 0x27	; 39
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 68       	ori	r24, 0x80	; 128
    1a4c:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_REFS0_BIT);
    1a4e:	a7 e2       	ldi	r26, 0x27	; 39
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e7 e2       	ldi	r30, 0x27	; 39
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	80 64       	ori	r24, 0x40	; 64
    1a5a:	8c 93       	st	X, r24
#endif
/*************************** Adjecter control ***************************/
#if Adjecter == Right_adj
    CLR_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_ADLAR_BIT);
    1a5c:	a7 e2       	ldi	r26, 0x27	; 39
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e7 e2       	ldi	r30, 0x27	; 39
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	8f 7d       	andi	r24, 0xDF	; 223
    1a68:	8c 93       	st	X, r24
#elif Adjecter == Left_adj
    SET_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_ADLAR_BIT);
#endif
/*********************** conversion mode control ***********************/
#if Conversion_options == Starting_Conversion
    SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADEN_BIT);
    1a6a:	a6 e2       	ldi	r26, 0x26	; 38
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e6 e2       	ldi	r30, 0x26	; 38
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	80 68       	ori	r24, 0x80	; 128
    1a76:	8c 93       	st	X, r24
#elif CLK_options == CLK_4MKHz
    CLR_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS2_BIT);
    SET_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS1_BIT);
    CLR_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS0_BIT);
#elif CLK_options == CLK_8MKHz
    CLR_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS2_BIT);
    1a78:	a0 e5       	ldi	r26, 0x50	; 80
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e0 e5       	ldi	r30, 0x50	; 80
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8f 77       	andi	r24, 0x7F	; 127
    1a84:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS1_BIT);
    1a86:	a0 e5       	ldi	r26, 0x50	; 80
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e0 e5       	ldi	r30, 0x50	; 80
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	80 64       	ori	r24, 0x40	; 64
    1a92:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS0_BIT);
    1a94:	a0 e5       	ldi	r26, 0x50	; 80
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e0 e5       	ldi	r30, 0x50	; 80
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	80 62       	ori	r24, 0x20	; 32
    1aa0:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS2_BIT);
    SET_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS1_BIT);
    SET_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS0_BIT);
#endif
    /***************************** Enable ADC *****************************/
    SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADEN_BIT);
    1aa2:	a6 e2       	ldi	r26, 0x26	; 38
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e6 e2       	ldi	r30, 0x26	; 38
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	80 68       	ori	r24, 0x80	; 128
    1aae:	8c 93       	st	X, r24
}
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <ADC_u8GetDigitalValueSynchNonBlocking>:

/**********************************************************************/
u8 ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNum, u16 *Copy_pu16DigitalValue)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	28 97       	sbiw	r28, 0x08	; 8
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	8e 83       	std	Y+6, r24	; 0x06
    1acc:	78 87       	std	Y+8, r23	; 0x08
    1ace:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32TimeOutCounter = 0;
    1ad4:	19 82       	std	Y+1, r1	; 0x01
    1ad6:	1a 82       	std	Y+2, r1	; 0x02
    1ad8:	1b 82       	std	Y+3, r1	; 0x03
    1ada:	1c 82       	std	Y+4, r1	; 0x04
    if ((Copy_u8ChannelNum < 32) && (Copy_pu16DigitalValue != NULL) && (ADC_u8BusyFlag == 0))
    1adc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ade:	80 32       	cpi	r24, 0x20	; 32
    1ae0:	08 f0       	brcs	.+2      	; 0x1ae4 <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
    1ae2:	65 c0       	rjmp	.+202    	; 0x1bae <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
    1ae4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae6:	98 85       	ldd	r25, Y+8	; 0x08
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	09 f4       	brne	.+2      	; 0x1aee <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
    1aec:	60 c0       	rjmp	.+192    	; 0x1bae <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
    1aee:	80 91 8a 00 	lds	r24, 0x008A
    1af2:	88 23       	and	r24, r24
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <ADC_u8GetDigitalValueSynchNonBlocking+0x42>
    1af6:	5b c0       	rjmp	.+182    	; 0x1bae <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
    {
        // Clear the channel selection bits and set the new channel number
        ADC_u8_ADMUX_REG &= 0xE0;
    1af8:	a7 e2       	ldi	r26, 0x27	; 39
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e7 e2       	ldi	r30, 0x27	; 39
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	80 7e       	andi	r24, 0xE0	; 224
    1b04:	8c 93       	st	X, r24
        ADC_u8_ADMUX_REG |= (Copy_u8ChannelNum & 0x1F);
    1b06:	a7 e2       	ldi	r26, 0x27	; 39
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e7 e2       	ldi	r30, 0x27	; 39
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	98 2f       	mov	r25, r24
    1b12:	8e 81       	ldd	r24, Y+6	; 0x06
    1b14:	8f 71       	andi	r24, 0x1F	; 31
    1b16:	89 2b       	or	r24, r25
    1b18:	8c 93       	st	X, r24
        /* Start Conversion */
        SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADSC_BIT);
    1b1a:	a6 e2       	ldi	r26, 0x26	; 38
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e6 e2       	ldi	r30, 0x26	; 38
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	80 64       	ori	r24, 0x40	; 64
    1b26:	8c 93       	st	X, r24
    1b28:	0b c0       	rjmp	.+22     	; 0x1b40 <ADC_u8GetDigitalValueSynchNonBlocking+0x8a>
        /* wait flag = 1 */
        while ((GET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADIF_BIT) == 0) && (Local_u32TimeOutCounter < ADC_u32_TimeOut_MaxValue))
        {
            Local_u32TimeOutCounter++;
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	ab 81       	ldd	r26, Y+3	; 0x03
    1b30:	bc 81       	ldd	r27, Y+4	; 0x04
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	a1 1d       	adc	r26, r1
    1b36:	b1 1d       	adc	r27, r1
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	ab 83       	std	Y+3, r26	; 0x03
    1b3e:	bc 83       	std	Y+4, r27	; 0x04
        ADC_u8_ADMUX_REG &= 0xE0;
        ADC_u8_ADMUX_REG |= (Copy_u8ChannelNum & 0x1F);
        /* Start Conversion */
        SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADSC_BIT);
        /* wait flag = 1 */
        while ((GET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADIF_BIT) == 0) && (Local_u32TimeOutCounter < ADC_u32_TimeOut_MaxValue))
    1b40:	e6 e2       	ldi	r30, 0x26	; 38
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	82 95       	swap	r24
    1b48:	8f 70       	andi	r24, 0x0F	; 15
    1b4a:	88 2f       	mov	r24, r24
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	81 70       	andi	r24, 0x01	; 1
    1b50:	90 70       	andi	r25, 0x00	; 0
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	61 f4       	brne	.+24     	; 0x1b6e <ADC_u8GetDigitalValueSynchNonBlocking+0xb8>
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	ab 81       	ldd	r26, Y+3	; 0x03
    1b5c:	bc 81       	ldd	r27, Y+4	; 0x04
    1b5e:	80 35       	cpi	r24, 0x50	; 80
    1b60:	23 ec       	ldi	r18, 0xC3	; 195
    1b62:	92 07       	cpc	r25, r18
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	a2 07       	cpc	r26, r18
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	b2 07       	cpc	r27, r18
    1b6c:	f0 f2       	brcs	.-68     	; 0x1b2a <ADC_u8GetDigitalValueSynchNonBlocking+0x74>
        ************************** Clear Flag **********************
        ! flag is cleared automatically when it is at EXTI
        % In our situation, we have to clear the flag by ourselves
        ************************************************************
        */
        if (GET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADIF_BIT) != 0) //(Local_u32TimeOutCounter < ADC_u32_TimeOut_MaxValue)
    1b6e:	e6 e2       	ldi	r30, 0x26	; 38
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	82 95       	swap	r24
    1b76:	8f 70       	andi	r24, 0x0F	; 15
    1b78:	88 2f       	mov	r24, r24
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	81 70       	andi	r24, 0x01	; 1
    1b7e:	90 70       	andi	r25, 0x00	; 0
    1b80:	88 23       	and	r24, r24
    1b82:	99 f0       	breq	.+38     	; 0x1baa <ADC_u8GetDigitalValueSynchNonBlocking+0xf4>
        {
            // Clear conversion complete flag
            SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADIF_BIT);
    1b84:	a6 e2       	ldi	r26, 0x26	; 38
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e6 e2       	ldi	r30, 0x26	; 38
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 61       	ori	r24, 0x10	; 16
    1b90:	8c 93       	st	X, r24
            // clear busy flag
            ADC_u8BusyFlag = 1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	80 93 8a 00 	sts	0x008A, r24
            /* Read Digital Value */
            *Copy_pu16DigitalValue = ADC_u16_ADC_REG;
    1b98:	e4 e2       	ldi	r30, 0x24	; 36
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	ef 81       	ldd	r30, Y+7	; 0x07
    1ba2:	f8 85       	ldd	r31, Y+8	; 0x08
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
        }
        else
        {
            Local_u8ErrorState = STD_TYPES_NOK;
    1baa:	1d 82       	std	Y+5, r1	; 0x05
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
        }
    }
    else
        Local_u8ErrorState = STD_TYPES_NOK;
    1bae:	1d 82       	std	Y+5, r1	; 0x05
    return Local_u8ErrorState;
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bb2:	28 96       	adiw	r28, 0x08	; 8
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <ADC_u8GetDigitalValue_A_Synch>:
u8 ADC_u8GetDigitalValue_A_Synch(u8 Copy_u8ChannelNum, void(*Copy_pfNotificiation(u16)))
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <ADC_u8GetDigitalValue_A_Synch+0x6>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <ADC_u8GetDigitalValue_A_Synch+0x8>
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	8a 83       	std	Y+2, r24	; 0x02
    1bd2:	7c 83       	std	Y+4, r23	; 0x04
    1bd4:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8ErrorState = STD_TYPES_OK;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8ChannelNum < 32) && (Copy_pfNotificiation != NULL) && (ADC_u8BusyFlag == 0))
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	80 32       	cpi	r24, 0x20	; 32
    1bde:	88 f5       	brcc	.+98     	; 0x1c42 <ADC_u8GetDigitalValue_A_Synch+0x7e>
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	69 f1       	breq	.+90     	; 0x1c42 <ADC_u8GetDigitalValue_A_Synch+0x7e>
    1be8:	80 91 8a 00 	lds	r24, 0x008A
    1bec:	88 23       	and	r24, r24
    1bee:	49 f5       	brne	.+82     	; 0x1c42 <ADC_u8GetDigitalValue_A_Synch+0x7e>
    {
        // Set Flag to make ADC is Busy
        ADC_u8BusyFlag = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	80 93 8a 00 	sts	0x008A, r24
        // Update Golable Pointer To A Function
        ADC_pfNotification = Copy_pfNotificiation;
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	90 93 89 00 	sts	0x0089, r25
    1bfe:	80 93 88 00 	sts	0x0088, r24
        // Enable ADC Interrupt
        SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADIE_BIT);
    1c02:	a6 e2       	ldi	r26, 0x26	; 38
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e6 e2       	ldi	r30, 0x26	; 38
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	88 60       	ori	r24, 0x08	; 8
    1c0e:	8c 93       	st	X, r24
        // Clear the channel selection bits and set the new channel number
        ADC_u8_ADMUX_REG &= 0xE0;
    1c10:	a7 e2       	ldi	r26, 0x27	; 39
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e7 e2       	ldi	r30, 0x27	; 39
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	80 7e       	andi	r24, 0xE0	; 224
    1c1c:	8c 93       	st	X, r24
        ADC_u8_ADMUX_REG |= (Copy_u8ChannelNum & 0x1F);
    1c1e:	a7 e2       	ldi	r26, 0x27	; 39
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e7 e2       	ldi	r30, 0x27	; 39
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	98 2f       	mov	r25, r24
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	8f 71       	andi	r24, 0x1F	; 31
    1c2e:	89 2b       	or	r24, r25
    1c30:	8c 93       	st	X, r24
        /* Start Conversion */
        SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADSC_BIT);
    1c32:	a6 e2       	ldi	r26, 0x26	; 38
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e6 e2       	ldi	r30, 0x26	; 38
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	80 64       	ori	r24, 0x40	; 64
    1c3e:	8c 93       	st	X, r24
    1c40:	01 c0       	rjmp	.+2      	; 0x1c44 <ADC_u8GetDigitalValue_A_Synch+0x80>
    }
    else
    {
        local_u8ErrorState = STD_TYPES_NOK;
    1c42:	19 82       	std	Y+1, r1	; 0x01
    }
    return local_u8ErrorState;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <ADC_u8GetADC_DigitalValue>:
u8 ADC_u8GetADC_DigitalValue(u16 *Copy_pu16DigitalValue)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <ADC_u8GetADC_DigitalValue+0x6>
    1c5a:	0f 92       	push	r0
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	9b 83       	std	Y+3, r25	; 0x03
    1c62:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu16DigitalValue != NULL)
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	49 f0       	breq	.+18     	; 0x1c82 <ADC_u8GetADC_DigitalValue+0x2e>
    {
        // Read ADC Register
        *Copy_pu16DigitalValue = ADC_u16_ADC_REG;
    1c70:	e4 e2       	ldi	r30, 0x24	; 36
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	91 81       	ldd	r25, Z+1	; 0x01
    1c78:	ea 81       	ldd	r30, Y+2	; 0x02
    1c7a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	80 83       	st	Z, r24
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <ADC_u8GetADC_DigitalValue+0x30>
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1c82:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ErrorState;
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <__vector_16>:

// Prototype for ADC ISR
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    1c92:	1f 92       	push	r1
    1c94:	0f 92       	push	r0
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	0f 92       	push	r0
    1c9a:	11 24       	eor	r1, r1
    1c9c:	2f 93       	push	r18
    1c9e:	3f 93       	push	r19
    1ca0:	4f 93       	push	r20
    1ca2:	5f 93       	push	r21
    1ca4:	6f 93       	push	r22
    1ca6:	7f 93       	push	r23
    1ca8:	8f 93       	push	r24
    1caa:	9f 93       	push	r25
    1cac:	af 93       	push	r26
    1cae:	bf 93       	push	r27
    1cb0:	ef 93       	push	r30
    1cb2:	ff 93       	push	r31
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    if (ADC_pfNotification != NULL)
    1cbc:	80 91 88 00 	lds	r24, 0x0088
    1cc0:	90 91 89 00 	lds	r25, 0x0089
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	99 f0       	breq	.+38     	; 0x1cee <__vector_16+0x5c>
    {
        // Clear ADC Flag
        ADC_u8BusyFlag = 0;
    1cc8:	10 92 8a 00 	sts	0x008A, r1
        // Clear PIE of ADC
        CLR_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADIE_BIT);
    1ccc:	a6 e2       	ldi	r26, 0x26	; 38
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e6 e2       	ldi	r30, 0x26	; 38
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	87 7f       	andi	r24, 0xF7	; 247
    1cd8:	8c 93       	st	X, r24
        // Call Notification Function
        ADC_pfNotification(ADC_u16_ADC_REG);
    1cda:	20 91 88 00 	lds	r18, 0x0088
    1cde:	30 91 89 00 	lds	r19, 0x0089
    1ce2:	e4 e2       	ldi	r30, 0x24	; 36
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	f9 01       	movw	r30, r18
    1cec:	09 95       	icall
    }
}
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	ff 91       	pop	r31
    1cf4:	ef 91       	pop	r30
    1cf6:	bf 91       	pop	r27
    1cf8:	af 91       	pop	r26
    1cfa:	9f 91       	pop	r25
    1cfc:	8f 91       	pop	r24
    1cfe:	7f 91       	pop	r23
    1d00:	6f 91       	pop	r22
    1d02:	5f 91       	pop	r21
    1d04:	4f 91       	pop	r20
    1d06:	3f 91       	pop	r19
    1d08:	2f 91       	pop	r18
    1d0a:	0f 90       	pop	r0
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	0f 90       	pop	r0
    1d10:	1f 90       	pop	r1
    1d12:	18 95       	reti

00001d14 <StepperMotor_move>:
#include "stepper_private.h"
/***************************************************************************/

// Function to control the stepper motor movement
void StepperMotor_move(u8 direction, u16 angle)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	a5 97       	sbiw	r28, 0x25	; 37
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	8b a3       	std	Y+35, r24	; 0x23
    1d2a:	7d a3       	std	Y+37, r23	; 0x25
    1d2c:	6c a3       	std	Y+36, r22	; 0x24
    // Set direction pins as OUTPUT
    DIO_voidSetPinDirection(stepper_motor_port, stepper_motor_blue, DIO_u8_OUTPUT);
    1d2e:	83 e0       	ldi	r24, 0x03	; 3
    1d30:	64 e0       	ldi	r22, 0x04	; 4
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(stepper_motor_port, stepper_motor_pink, DIO_u8_OUTPUT);
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	65 e0       	ldi	r22, 0x05	; 5
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(stepper_motor_port, stepper_motor_yellow, DIO_u8_OUTPUT);
    1d42:	83 e0       	ldi	r24, 0x03	; 3
    1d44:	66 e0       	ldi	r22, 0x06	; 6
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(stepper_motor_port, stepper_motor_orange, DIO_u8_OUTPUT);
    1d4c:	83 e0       	ldi	r24, 0x03	; 3
    1d4e:	67 e0       	ldi	r22, 0x07	; 7
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>

    // Calculate the number of steps based on the motor's step angle and microstepping settings
    u16 steps = ((angle * STEPS_PER_REVOLUTION) / 360) / 4;
    1d56:	8c a1       	ldd	r24, Y+36	; 0x24
    1d58:	9d a1       	ldd	r25, Y+37	; 0x25
    1d5a:	98 2f       	mov	r25, r24
    1d5c:	88 27       	eor	r24, r24
    1d5e:	99 0f       	add	r25, r25
    1d60:	99 0f       	add	r25, r25
    1d62:	99 0f       	add	r25, r25
    1d64:	20 ea       	ldi	r18, 0xA0	; 160
    1d66:	35 e0       	ldi	r19, 0x05	; 5
    1d68:	b9 01       	movw	r22, r18
    1d6a:	0e 94 c6 19 	call	0x338c	; 0x338c <__udivmodhi4>
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9a a3       	std	Y+34, r25	; 0x22
    1d72:	89 a3       	std	Y+33, r24	; 0x21

    if (direction == CW)
    1d74:	8b a1       	ldd	r24, Y+35	; 0x23
    1d76:	88 23       	and	r24, r24
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <StepperMotor_move+0x68>
    1d7a:	d3 c0       	rjmp	.+422    	; 0x1f22 <StepperMotor_move+0x20e>
    {
        for (u16 i = 0; i < steps; i++)
    1d7c:	18 a2       	std	Y+32, r1	; 0x20
    1d7e:	1f 8e       	std	Y+31, r1	; 0x1f
    1d80:	c7 c0       	rjmp	.+398    	; 0x1f10 <StepperMotor_move+0x1fc>
        {
            // Define the step sequence for clockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_HIGH);
    1d82:	83 e0       	ldi	r24, 0x03	; 3
    1d84:	64 e0       	ldi	r22, 0x04	; 4
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1d8c:	83 e0       	ldi	r24, 0x03	; 3
    1d8e:	65 e0       	ldi	r22, 0x05	; 5
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1d96:	83 e0       	ldi	r24, 0x03	; 3
    1d98:	66 e0       	ldi	r22, 0x06	; 6
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1da0:	83 e0       	ldi	r24, 0x03	; 3
    1da2:	67 e0       	ldi	r22, 0x07	; 7
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            // Define the step sequence for clockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	64 e0       	ldi	r22, 0x04	; 4
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_HIGH);
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	65 e0       	ldi	r22, 0x05	; 5
    1db8:	41 e0       	ldi	r20, 0x01	; 1
    1dba:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1dbe:	83 e0       	ldi	r24, 0x03	; 3
    1dc0:	66 e0       	ldi	r22, 0x06	; 6
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1dc8:	83 e0       	ldi	r24, 0x03	; 3
    1dca:	67 e0       	ldi	r22, 0x07	; 7
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            // Define the step sequence for clockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1dd2:	83 e0       	ldi	r24, 0x03	; 3
    1dd4:	64 e0       	ldi	r22, 0x04	; 4
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1ddc:	83 e0       	ldi	r24, 0x03	; 3
    1dde:	65 e0       	ldi	r22, 0x05	; 5
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_HIGH);
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	66 e0       	ldi	r22, 0x06	; 6
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1df0:	83 e0       	ldi	r24, 0x03	; 3
    1df2:	67 e0       	ldi	r22, 0x07	; 7
    1df4:	40 e0       	ldi	r20, 0x00	; 0
    1df6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            // Define the step sequence for clockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	64 e0       	ldi	r22, 0x04	; 4
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1e04:	83 e0       	ldi	r24, 0x03	; 3
    1e06:	65 e0       	ldi	r22, 0x05	; 5
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1e0e:	83 e0       	ldi	r24, 0x03	; 3
    1e10:	66 e0       	ldi	r22, 0x06	; 6
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_HIGH);
    1e18:	83 e0       	ldi	r24, 0x03	; 3
    1e1a:	67 e0       	ldi	r22, 0x07	; 7
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	a0 e2       	ldi	r26, 0x20	; 32
    1e28:	b1 e4       	ldi	r27, 0x41	; 65
    1e2a:	89 8f       	std	Y+25, r24	; 0x19
    1e2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e32:	69 8d       	ldd	r22, Y+25	; 0x19
    1e34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	4a e7       	ldi	r20, 0x7A	; 122
    1e40:	53 e4       	ldi	r21, 0x43	; 67
    1e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	8d 8b       	std	Y+21, r24	; 0x15
    1e4c:	9e 8b       	std	Y+22, r25	; 0x16
    1e4e:	af 8b       	std	Y+23, r26	; 0x17
    1e50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e52:	6d 89       	ldd	r22, Y+21	; 0x15
    1e54:	7e 89       	ldd	r23, Y+22	; 0x16
    1e56:	8f 89       	ldd	r24, Y+23	; 0x17
    1e58:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e8       	ldi	r20, 0x80	; 128
    1e60:	5f e3       	ldi	r21, 0x3F	; 63
    1e62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e66:	88 23       	and	r24, r24
    1e68:	2c f4       	brge	.+10     	; 0x1e74 <StepperMotor_move+0x160>
		__ticks = 1;
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9c 8b       	std	Y+20, r25	; 0x14
    1e70:	8b 8b       	std	Y+19, r24	; 0x13
    1e72:	3f c0       	rjmp	.+126    	; 0x1ef2 <StepperMotor_move+0x1de>
	else if (__tmp > 65535)
    1e74:	6d 89       	ldd	r22, Y+21	; 0x15
    1e76:	7e 89       	ldd	r23, Y+22	; 0x16
    1e78:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	3f ef       	ldi	r19, 0xFF	; 255
    1e80:	4f e7       	ldi	r20, 0x7F	; 127
    1e82:	57 e4       	ldi	r21, 0x47	; 71
    1e84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e88:	18 16       	cp	r1, r24
    1e8a:	4c f5       	brge	.+82     	; 0x1ede <StepperMotor_move+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e2       	ldi	r20, 0x20	; 32
    1e9a:	51 e4       	ldi	r21, 0x41	; 65
    1e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	9c 8b       	std	Y+20, r25	; 0x14
    1eb2:	8b 8b       	std	Y+19, r24	; 0x13
    1eb4:	0f c0       	rjmp	.+30     	; 0x1ed4 <StepperMotor_move+0x1c0>
    1eb6:	89 e1       	ldi	r24, 0x19	; 25
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9a 8b       	std	Y+18, r25	; 0x12
    1ebc:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ebe:	89 89       	ldd	r24, Y+17	; 0x11
    1ec0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <StepperMotor_move+0x1ae>
    1ec6:	9a 8b       	std	Y+18, r25	; 0x12
    1ec8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	9c 8b       	std	Y+20, r25	; 0x14
    1ed2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	69 f7       	brne	.-38     	; 0x1eb6 <StepperMotor_move+0x1a2>
    1edc:	14 c0       	rjmp	.+40     	; 0x1f06 <StepperMotor_move+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ede:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9c 8b       	std	Y+20, r25	; 0x14
    1ef0:	8b 8b       	std	Y+19, r24	; 0x13
    1ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef6:	98 8b       	std	Y+16, r25	; 0x10
    1ef8:	8f 87       	std	Y+15, r24	; 0x0f
    1efa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1efc:	98 89       	ldd	r25, Y+16	; 0x10
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <StepperMotor_move+0x1ea>
    1f02:	98 8b       	std	Y+16, r25	; 0x10
    1f04:	8f 87       	std	Y+15, r24	; 0x0f
    // Calculate the number of steps based on the motor's step angle and microstepping settings
    u16 steps = ((angle * STEPS_PER_REVOLUTION) / 360) / 4;

    if (direction == CW)
    {
        for (u16 i = 0; i < steps; i++)
    1f06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f08:	98 a1       	ldd	r25, Y+32	; 0x20
    1f0a:	01 96       	adiw	r24, 0x01	; 1
    1f0c:	98 a3       	std	Y+32, r25	; 0x20
    1f0e:	8f 8f       	std	Y+31, r24	; 0x1f
    1f10:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1f12:	38 a1       	ldd	r19, Y+32	; 0x20
    1f14:	89 a1       	ldd	r24, Y+33	; 0x21
    1f16:	9a a1       	ldd	r25, Y+34	; 0x22
    1f18:	28 17       	cp	r18, r24
    1f1a:	39 07       	cpc	r19, r25
    1f1c:	08 f4       	brcc	.+2      	; 0x1f20 <StepperMotor_move+0x20c>
    1f1e:	31 cf       	rjmp	.-414    	; 0x1d82 <StepperMotor_move+0x6e>
    1f20:	d6 c0       	rjmp	.+428    	; 0x20ce <StepperMotor_move+0x3ba>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_HIGH);

            _delay_ms(StepperDelay); // Add a delay to control the motor speed
        }
    }
    else if (direction == CCW)
    1f22:	8b a1       	ldd	r24, Y+35	; 0x23
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <StepperMotor_move+0x216>
    1f28:	d2 c0       	rjmp	.+420    	; 0x20ce <StepperMotor_move+0x3ba>
    {
        for (u16 i = 0; i < steps; i++)
    1f2a:	1e 8e       	std	Y+30, r1	; 0x1e
    1f2c:	1d 8e       	std	Y+29, r1	; 0x1d
    1f2e:	c7 c0       	rjmp	.+398    	; 0x20be <StepperMotor_move+0x3aa>
        {
            // Define the step sequence for counterclockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1f30:	83 e0       	ldi	r24, 0x03	; 3
    1f32:	64 e0       	ldi	r22, 0x04	; 4
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	65 e0       	ldi	r22, 0x05	; 5
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1f44:	83 e0       	ldi	r24, 0x03	; 3
    1f46:	66 e0       	ldi	r22, 0x06	; 6
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_HIGH);
    1f4e:	83 e0       	ldi	r24, 0x03	; 3
    1f50:	67 e0       	ldi	r22, 0x07	; 7
    1f52:	41 e0       	ldi	r20, 0x01	; 1
    1f54:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            // Define the step sequence for counterclockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1f58:	83 e0       	ldi	r24, 0x03	; 3
    1f5a:	64 e0       	ldi	r22, 0x04	; 4
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1f62:	83 e0       	ldi	r24, 0x03	; 3
    1f64:	65 e0       	ldi	r22, 0x05	; 5
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_HIGH);
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	66 e0       	ldi	r22, 0x06	; 6
    1f70:	41 e0       	ldi	r20, 0x01	; 1
    1f72:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	67 e0       	ldi	r22, 0x07	; 7
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            // Define the step sequence for counterclockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	64 e0       	ldi	r22, 0x04	; 4
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_HIGH);
    1f8a:	83 e0       	ldi	r24, 0x03	; 3
    1f8c:	65 e0       	ldi	r22, 0x05	; 5
    1f8e:	41 e0       	ldi	r20, 0x01	; 1
    1f90:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1f94:	83 e0       	ldi	r24, 0x03	; 3
    1f96:	66 e0       	ldi	r22, 0x06	; 6
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1f9e:	83 e0       	ldi	r24, 0x03	; 3
    1fa0:	67 e0       	ldi	r22, 0x07	; 7
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            // Define the step sequence for counterclockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_HIGH);
    1fa8:	83 e0       	ldi	r24, 0x03	; 3
    1faa:	64 e0       	ldi	r22, 0x04	; 4
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1fb2:	83 e0       	ldi	r24, 0x03	; 3
    1fb4:	65 e0       	ldi	r22, 0x05	; 5
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1fbc:	83 e0       	ldi	r24, 0x03	; 3
    1fbe:	66 e0       	ldi	r22, 0x06	; 6
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	67 e0       	ldi	r22, 0x07	; 7
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	a0 e2       	ldi	r26, 0x20	; 32
    1fd6:	b1 e4       	ldi	r27, 0x41	; 65
    1fd8:	8b 87       	std	Y+11, r24	; 0x0b
    1fda:	9c 87       	std	Y+12, r25	; 0x0c
    1fdc:	ad 87       	std	Y+13, r26	; 0x0d
    1fde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	4a e7       	ldi	r20, 0x7A	; 122
    1fee:	53 e4       	ldi	r21, 0x43	; 67
    1ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	8f 83       	std	Y+7, r24	; 0x07
    1ffa:	98 87       	std	Y+8, r25	; 0x08
    1ffc:	a9 87       	std	Y+9, r26	; 0x09
    1ffe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2000:	6f 81       	ldd	r22, Y+7	; 0x07
    2002:	78 85       	ldd	r23, Y+8	; 0x08
    2004:	89 85       	ldd	r24, Y+9	; 0x09
    2006:	9a 85       	ldd	r25, Y+10	; 0x0a
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	5f e3       	ldi	r21, 0x3F	; 63
    2010:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2014:	88 23       	and	r24, r24
    2016:	2c f4       	brge	.+10     	; 0x2022 <StepperMotor_move+0x30e>
		__ticks = 1;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9e 83       	std	Y+6, r25	; 0x06
    201e:	8d 83       	std	Y+5, r24	; 0x05
    2020:	3f c0       	rjmp	.+126    	; 0x20a0 <StepperMotor_move+0x38c>
	else if (__tmp > 65535)
    2022:	6f 81       	ldd	r22, Y+7	; 0x07
    2024:	78 85       	ldd	r23, Y+8	; 0x08
    2026:	89 85       	ldd	r24, Y+9	; 0x09
    2028:	9a 85       	ldd	r25, Y+10	; 0x0a
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	3f ef       	ldi	r19, 0xFF	; 255
    202e:	4f e7       	ldi	r20, 0x7F	; 127
    2030:	57 e4       	ldi	r21, 0x47	; 71
    2032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2036:	18 16       	cp	r1, r24
    2038:	4c f5       	brge	.+82     	; 0x208c <StepperMotor_move+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203a:	6b 85       	ldd	r22, Y+11	; 0x0b
    203c:	7c 85       	ldd	r23, Y+12	; 0x0c
    203e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2040:	9e 85       	ldd	r25, Y+14	; 0x0e
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e2       	ldi	r20, 0x20	; 32
    2048:	51 e4       	ldi	r21, 0x41	; 65
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	9e 83       	std	Y+6, r25	; 0x06
    2060:	8d 83       	std	Y+5, r24	; 0x05
    2062:	0f c0       	rjmp	.+30     	; 0x2082 <StepperMotor_move+0x36e>
    2064:	89 e1       	ldi	r24, 0x19	; 25
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9c 83       	std	Y+4, r25	; 0x04
    206a:	8b 83       	std	Y+3, r24	; 0x03
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <StepperMotor_move+0x35c>
    2074:	9c 83       	std	Y+4, r25	; 0x04
    2076:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2078:	8d 81       	ldd	r24, Y+5	; 0x05
    207a:	9e 81       	ldd	r25, Y+6	; 0x06
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	9e 81       	ldd	r25, Y+6	; 0x06
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	69 f7       	brne	.-38     	; 0x2064 <StepperMotor_move+0x350>
    208a:	14 c0       	rjmp	.+40     	; 0x20b4 <StepperMotor_move+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208c:	6f 81       	ldd	r22, Y+7	; 0x07
    208e:	78 85       	ldd	r23, Y+8	; 0x08
    2090:	89 85       	ldd	r24, Y+9	; 0x09
    2092:	9a 85       	ldd	r25, Y+10	; 0x0a
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9e 83       	std	Y+6, r25	; 0x06
    209e:	8d 83       	std	Y+5, r24	; 0x05
    20a0:	8d 81       	ldd	r24, Y+5	; 0x05
    20a2:	9e 81       	ldd	r25, Y+6	; 0x06
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	9a 81       	ldd	r25, Y+2	; 0x02
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <StepperMotor_move+0x398>
    20b0:	9a 83       	std	Y+2, r25	; 0x02
    20b2:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(StepperDelay); // Add a delay to control the motor speed
        }
    }
    else if (direction == CCW)
    {
        for (u16 i = 0; i < steps; i++)
    20b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20b8:	01 96       	adiw	r24, 0x01	; 1
    20ba:	9e 8f       	std	Y+30, r25	; 0x1e
    20bc:	8d 8f       	std	Y+29, r24	; 0x1d
    20be:	2d 8d       	ldd	r18, Y+29	; 0x1d
    20c0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    20c2:	89 a1       	ldd	r24, Y+33	; 0x21
    20c4:	9a a1       	ldd	r25, Y+34	; 0x22
    20c6:	28 17       	cp	r18, r24
    20c8:	39 07       	cpc	r19, r25
    20ca:	08 f4       	brcc	.+2      	; 0x20ce <StepperMotor_move+0x3ba>
    20cc:	31 cf       	rjmp	.-414    	; 0x1f30 <StepperMotor_move+0x21c>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);

            _delay_ms(StepperDelay); // Add a delay to control the motor speed
        }
    }
}
    20ce:	a5 96       	adiw	r28, 0x25	; 37
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <motor_rotate_cw>:
#include "Motor_interface.h"
#include "Motor_config.h"
#include "Motor_private.h"
/***************************************************************************/
void motor_rotate_cw()
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    // Set the directions
    DIO_voidSetPinDirection(motor_port, motor_u8_pin1, DIO_u8_OUTPUT);
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	63 e0       	ldi	r22, 0x03	; 3
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(motor_port, motor_u8_pin2, DIO_u8_OUTPUT);
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	64 e0       	ldi	r22, 0x04	; 4
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>

    // Set one pin high and the other low to rotate the motor clockwise (CW)
    DIO_voidSetPinValue(motor_port, motor_u8_pin1, DIO_u8_HIGH);
    20fc:	82 e0       	ldi	r24, 0x02	; 2
    20fe:	63 e0       	ldi	r22, 0x03	; 3
    2100:	41 e0       	ldi	r20, 0x01	; 1
    2102:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(motor_port, motor_u8_pin2, DIO_u8_LOW);
    2106:	82 e0       	ldi	r24, 0x02	; 2
    2108:	64 e0       	ldi	r22, 0x04	; 4
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
}
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <motor_rotate_ccw>:

void motor_rotate_ccw()
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    // Set the directions
    DIO_voidSetPinDirection(motor_port, motor_u8_pin1, DIO_u8_OUTPUT);
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	63 e0       	ldi	r22, 0x03	; 3
    2122:	41 e0       	ldi	r20, 0x01	; 1
    2124:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(motor_port, motor_u8_pin2, DIO_u8_OUTPUT);
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	64 e0       	ldi	r22, 0x04	; 4
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>

    // Set one pin high and the other low to rotate the motor counterclockwise (CCW)
    DIO_voidSetPinValue(motor_port, motor_u8_pin1, DIO_u8_LOW);
    2132:	82 e0       	ldi	r24, 0x02	; 2
    2134:	63 e0       	ldi	r22, 0x03	; 3
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(motor_port, motor_u8_pin2, DIO_u8_HIGH);
    213c:	82 e0       	ldi	r24, 0x02	; 2
    213e:	64 e0       	ldi	r22, 0x04	; 4
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
}
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <stopDCmotor>:
void stopDCmotor(){
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(motor_port, motor_u8_pin1, DIO_u8_LOW);
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	63 e0       	ldi	r22, 0x03	; 3
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor_port, motor_u8_pin2, DIO_u8_LOW);
    215e:	82 e0       	ldi	r24, 0x02	; 2
    2160:	64 e0       	ldi	r22, 0x04	; 4
    2162:	40 e0       	ldi	r20, 0x00	; 0
    2164:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
}
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <KPD_u8getKeystate>:
    KPD_u8_C3_PIN,
    KPD_u8_C4_PIN,
};
/***************************************************************************/
u8 KPD_u8getKeystate(u8 *copy_pu8Returnedkey)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	a3 97       	sbiw	r28, 0x23	; 35
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	9b a3       	std	Y+35, r25	; 0x23
    2184:	8a a3       	std	Y+34, r24	; 0x22
    u8 Local_u8ErrorState = STD_TYPES_OK;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	88 a3       	std	Y+32, r24	; 0x20
    u8 Local_u8RowsCounter, Local_u8ColumnsCounter, Local_u8PinValue, Local_u8Flag = 0;
    218a:	1d 8e       	std	Y+29, r1	; 0x1d

    if (copy_pu8Returnedkey != NULL)
    218c:	8a a1       	ldd	r24, Y+34	; 0x22
    218e:	9b a1       	ldd	r25, Y+35	; 0x23
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	09 f4       	brne	.+2      	; 0x2196 <KPD_u8getKeystate+0x28>
    2194:	62 c1       	rjmp	.+708    	; 0x245a <KPD_u8getKeystate+0x2ec>
    {
        *copy_pu8Returnedkey = KPD_u8_KEY_NOT_PRESSED;
    2196:	ea a1       	ldd	r30, Y+34	; 0x22
    2198:	fb a1       	ldd	r31, Y+35	; 0x23
    219a:	8f ef       	ldi	r24, 0xFF	; 255
    219c:	80 83       	st	Z, r24
        /* Activate each row ==> for loop on the pins of the rows */
        for (Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    219e:	1f 8e       	std	Y+31, r1	; 0x1f
    21a0:	57 c1       	rjmp	.+686    	; 0x2450 <KPD_u8getKeystate+0x2e2>
        {
            DIO_voidSetPinValue(KPD_u8_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
    21a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21a4:	88 2f       	mov	r24, r24
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	fc 01       	movw	r30, r24
    21aa:	e6 58       	subi	r30, 0x86	; 134
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	90 81       	ld	r25, Z
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	69 2f       	mov	r22, r25
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	a0 e8       	ldi	r26, 0x80	; 128
    21c0:	bf e3       	ldi	r27, 0x3F	; 63
    21c2:	89 8f       	std	Y+25, r24	; 0x19
    21c4:	9a 8f       	std	Y+26, r25	; 0x1a
    21c6:	ab 8f       	std	Y+27, r26	; 0x1b
    21c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ca:	69 8d       	ldd	r22, Y+25	; 0x19
    21cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a e7       	ldi	r20, 0x7A	; 122
    21d8:	53 e4       	ldi	r21, 0x43	; 67
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	8d 8b       	std	Y+21, r24	; 0x15
    21e4:	9e 8b       	std	Y+22, r25	; 0x16
    21e6:	af 8b       	std	Y+23, r26	; 0x17
    21e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ea:	6d 89       	ldd	r22, Y+21	; 0x15
    21ec:	7e 89       	ldd	r23, Y+22	; 0x16
    21ee:	8f 89       	ldd	r24, Y+23	; 0x17
    21f0:	98 8d       	ldd	r25, Y+24	; 0x18
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21fe:	88 23       	and	r24, r24
    2200:	2c f4       	brge	.+10     	; 0x220c <KPD_u8getKeystate+0x9e>
		__ticks = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9c 8b       	std	Y+20, r25	; 0x14
    2208:	8b 8b       	std	Y+19, r24	; 0x13
    220a:	3f c0       	rjmp	.+126    	; 0x228a <KPD_u8getKeystate+0x11c>
	else if (__tmp > 65535)
    220c:	6d 89       	ldd	r22, Y+21	; 0x15
    220e:	7e 89       	ldd	r23, Y+22	; 0x16
    2210:	8f 89       	ldd	r24, Y+23	; 0x17
    2212:	98 8d       	ldd	r25, Y+24	; 0x18
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	4f e7       	ldi	r20, 0x7F	; 127
    221a:	57 e4       	ldi	r21, 0x47	; 71
    221c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2220:	18 16       	cp	r1, r24
    2222:	4c f5       	brge	.+82     	; 0x2276 <KPD_u8getKeystate+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2224:	69 8d       	ldd	r22, Y+25	; 0x19
    2226:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2228:	8b 8d       	ldd	r24, Y+27	; 0x1b
    222a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e2       	ldi	r20, 0x20	; 32
    2232:	51 e4       	ldi	r21, 0x41	; 65
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9c 8b       	std	Y+20, r25	; 0x14
    224a:	8b 8b       	std	Y+19, r24	; 0x13
    224c:	0f c0       	rjmp	.+30     	; 0x226c <KPD_u8getKeystate+0xfe>
    224e:	89 e1       	ldi	r24, 0x19	; 25
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9a 8b       	std	Y+18, r25	; 0x12
    2254:	89 8b       	std	Y+17, r24	; 0x11
    2256:	89 89       	ldd	r24, Y+17	; 0x11
    2258:	9a 89       	ldd	r25, Y+18	; 0x12
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <KPD_u8getKeystate+0xec>
    225e:	9a 8b       	std	Y+18, r25	; 0x12
    2260:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2262:	8b 89       	ldd	r24, Y+19	; 0x13
    2264:	9c 89       	ldd	r25, Y+20	; 0x14
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	9c 8b       	std	Y+20, r25	; 0x14
    226a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226c:	8b 89       	ldd	r24, Y+19	; 0x13
    226e:	9c 89       	ldd	r25, Y+20	; 0x14
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	69 f7       	brne	.-38     	; 0x224e <KPD_u8getKeystate+0xe0>
    2274:	14 c0       	rjmp	.+40     	; 0x229e <KPD_u8getKeystate+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2276:	6d 89       	ldd	r22, Y+21	; 0x15
    2278:	7e 89       	ldd	r23, Y+22	; 0x16
    227a:	8f 89       	ldd	r24, Y+23	; 0x17
    227c:	98 8d       	ldd	r25, Y+24	; 0x18
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	9c 8b       	std	Y+20, r25	; 0x14
    2288:	8b 8b       	std	Y+19, r24	; 0x13
    228a:	8b 89       	ldd	r24, Y+19	; 0x13
    228c:	9c 89       	ldd	r25, Y+20	; 0x14
    228e:	98 8b       	std	Y+16, r25	; 0x10
    2290:	8f 87       	std	Y+15, r24	; 0x0f
    2292:	8f 85       	ldd	r24, Y+15	; 0x0f
    2294:	98 89       	ldd	r25, Y+16	; 0x10
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <KPD_u8getKeystate+0x128>
    229a:	98 8b       	std	Y+16, r25	; 0x10
    229c:	8f 87       	std	Y+15, r24	; 0x0f

            /* Delay to stabilize the row activation */
            _delay_ms(1);

            /* Check which i/p pin has zero */
            for (Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter <= 3; Local_u8ColumnsCounter++)
    229e:	1e 8e       	std	Y+30, r1	; 0x1e
    22a0:	c1 c0       	rjmp	.+386    	; 0x2424 <KPD_u8getKeystate+0x2b6>
            {
                DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);
    22a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	fc 01       	movw	r30, r24
    22aa:	e2 58       	subi	r30, 0x82	; 130
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	90 81       	ld	r25, Z
    22b0:	9e 01       	movw	r18, r28
    22b2:	2f 5d       	subi	r18, 0xDF	; 223
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	69 2f       	mov	r22, r25
    22ba:	a9 01       	movw	r20, r18
    22bc:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8GetPinValue>

                if (Local_u8PinValue == DIO_u8_LOW) /* Switch is Pressed */
    22c0:	89 a1       	ldd	r24, Y+33	; 0x21
    22c2:	88 23       	and	r24, r24
    22c4:	09 f0       	breq	.+2      	; 0x22c8 <KPD_u8getKeystate+0x15a>
    22c6:	ab c0       	rjmp	.+342    	; 0x241e <KPD_u8getKeystate+0x2b0>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a0 ea       	ldi	r26, 0xA0	; 160
    22ce:	b1 e4       	ldi	r27, 0x41	; 65
    22d0:	8b 87       	std	Y+11, r24	; 0x0b
    22d2:	9c 87       	std	Y+12, r25	; 0x0c
    22d4:	ad 87       	std	Y+13, r26	; 0x0d
    22d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22da:	7c 85       	ldd	r23, Y+12	; 0x0c
    22dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22de:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	4a e7       	ldi	r20, 0x7A	; 122
    22e6:	53 e4       	ldi	r21, 0x43	; 67
    22e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	8f 83       	std	Y+7, r24	; 0x07
    22f2:	98 87       	std	Y+8, r25	; 0x08
    22f4:	a9 87       	std	Y+9, r26	; 0x09
    22f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22f8:	6f 81       	ldd	r22, Y+7	; 0x07
    22fa:	78 85       	ldd	r23, Y+8	; 0x08
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e8       	ldi	r20, 0x80	; 128
    2306:	5f e3       	ldi	r21, 0x3F	; 63
    2308:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    230c:	88 23       	and	r24, r24
    230e:	2c f4       	brge	.+10     	; 0x231a <KPD_u8getKeystate+0x1ac>
		__ticks = 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	3f c0       	rjmp	.+126    	; 0x2398 <KPD_u8getKeystate+0x22a>
	else if (__tmp > 65535)
    231a:	6f 81       	ldd	r22, Y+7	; 0x07
    231c:	78 85       	ldd	r23, Y+8	; 0x08
    231e:	89 85       	ldd	r24, Y+9	; 0x09
    2320:	9a 85       	ldd	r25, Y+10	; 0x0a
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	3f ef       	ldi	r19, 0xFF	; 255
    2326:	4f e7       	ldi	r20, 0x7F	; 127
    2328:	57 e4       	ldi	r21, 0x47	; 71
    232a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    232e:	18 16       	cp	r1, r24
    2330:	4c f5       	brge	.+82     	; 0x2384 <KPD_u8getKeystate+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2332:	6b 85       	ldd	r22, Y+11	; 0x0b
    2334:	7c 85       	ldd	r23, Y+12	; 0x0c
    2336:	8d 85       	ldd	r24, Y+13	; 0x0d
    2338:	9e 85       	ldd	r25, Y+14	; 0x0e
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e2       	ldi	r20, 0x20	; 32
    2340:	51 e4       	ldi	r21, 0x41	; 65
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	0f c0       	rjmp	.+30     	; 0x237a <KPD_u8getKeystate+0x20c>
    235c:	89 e1       	ldi	r24, 0x19	; 25
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9c 83       	std	Y+4, r25	; 0x04
    2362:	8b 83       	std	Y+3, r24	; 0x03
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <KPD_u8getKeystate+0x1fa>
    236c:	9c 83       	std	Y+4, r25	; 0x04
    236e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2370:	8d 81       	ldd	r24, Y+5	; 0x05
    2372:	9e 81       	ldd	r25, Y+6	; 0x06
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	9e 83       	std	Y+6, r25	; 0x06
    2378:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237a:	8d 81       	ldd	r24, Y+5	; 0x05
    237c:	9e 81       	ldd	r25, Y+6	; 0x06
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	69 f7       	brne	.-38     	; 0x235c <KPD_u8getKeystate+0x1ee>
    2382:	14 c0       	rjmp	.+40     	; 0x23ac <KPD_u8getKeystate+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2384:	6f 81       	ldd	r22, Y+7	; 0x07
    2386:	78 85       	ldd	r23, Y+8	; 0x08
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	9a 85       	ldd	r25, Y+10	; 0x0a
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	9a 83       	std	Y+2, r25	; 0x02
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	9a 81       	ldd	r25, Y+2	; 0x02
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <KPD_u8getKeystate+0x236>
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	89 83       	std	Y+1, r24	; 0x01
                {
                    /* Debouncing */
                    _delay_ms(20);

                    DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);
    23ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	fc 01       	movw	r30, r24
    23b4:	e2 58       	subi	r30, 0x82	; 130
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	90 81       	ld	r25, Z
    23ba:	9e 01       	movw	r18, r28
    23bc:	2f 5d       	subi	r18, 0xDF	; 223
    23be:	3f 4f       	sbci	r19, 0xFF	; 255
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	69 2f       	mov	r22, r25
    23c4:	a9 01       	movw	r20, r18
    23c6:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8GetPinValue>
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <KPD_u8getKeystate+0x27c>

                    /* Check if the pin is still equal to LOW */
                    while (Local_u8PinValue == DIO_u8_LOW)
                    {
                        DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);
    23cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	fc 01       	movw	r30, r24
    23d4:	e2 58       	subi	r30, 0x82	; 130
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	90 81       	ld	r25, Z
    23da:	9e 01       	movw	r18, r28
    23dc:	2f 5d       	subi	r18, 0xDF	; 223
    23de:	3f 4f       	sbci	r19, 0xFF	; 255
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	69 2f       	mov	r22, r25
    23e4:	a9 01       	movw	r20, r18
    23e6:	0e 94 1f 0b 	call	0x163e	; 0x163e <DIO_u8GetPinValue>
                    _delay_ms(20);

                    DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);

                    /* Check if the pin is still equal to LOW */
                    while (Local_u8PinValue == DIO_u8_LOW)
    23ea:	89 a1       	ldd	r24, Y+33	; 0x21
    23ec:	88 23       	and	r24, r24
    23ee:	71 f3       	breq	.-36     	; 0x23cc <KPD_u8getKeystate+0x25e>
                    {
                        DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);
                    }

                    *copy_pu8Returnedkey = KPD_Au8keys[Local_u8RowsCounter][Local_u8ColumnsCounter];
    23f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23f2:	48 2f       	mov	r20, r24
    23f4:	50 e0       	ldi	r21, 0x00	; 0
    23f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	ca 01       	movw	r24, r20
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	82 0f       	add	r24, r18
    2408:	93 1f       	adc	r25, r19
    240a:	fc 01       	movw	r30, r24
    240c:	e6 59       	subi	r30, 0x96	; 150
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	ea a1       	ldd	r30, Y+34	; 0x22
    2414:	fb a1       	ldd	r31, Y+35	; 0x23
    2416:	80 83       	st	Z, r24
                    Local_u8Flag = 1;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	8d 8f       	std	Y+29, r24	; 0x1d
    241c:	07 c0       	rjmp	.+14     	; 0x242c <KPD_u8getKeystate+0x2be>

            /* Delay to stabilize the row activation */
            _delay_ms(1);

            /* Check which i/p pin has zero */
            for (Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter <= 3; Local_u8ColumnsCounter++)
    241e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2420:	8f 5f       	subi	r24, 0xFF	; 255
    2422:	8e 8f       	std	Y+30, r24	; 0x1e
    2424:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2426:	84 30       	cpi	r24, 0x04	; 4
    2428:	08 f4       	brcc	.+2      	; 0x242c <KPD_u8getKeystate+0x2be>
    242a:	3b cf       	rjmp	.-394    	; 0x22a2 <KPD_u8getKeystate+0x134>
                    break;
                }
            }

            /* Deactivate Row */
            DIO_voidSetPinValue(KPD_u8_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_HIGH);
    242c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    242e:	88 2f       	mov	r24, r24
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	fc 01       	movw	r30, r24
    2434:	e6 58       	subi	r30, 0x86	; 134
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	90 81       	ld	r25, Z
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	69 2f       	mov	r22, r25
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>

            if (Local_u8Flag == 1)
    2444:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2446:	81 30       	cpi	r24, 0x01	; 1
    2448:	49 f0       	breq	.+18     	; 0x245c <KPD_u8getKeystate+0x2ee>

    if (copy_pu8Returnedkey != NULL)
    {
        *copy_pu8Returnedkey = KPD_u8_KEY_NOT_PRESSED;
        /* Activate each row ==> for loop on the pins of the rows */
        for (Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    244a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    244c:	8f 5f       	subi	r24, 0xFF	; 255
    244e:	8f 8f       	std	Y+31, r24	; 0x1f
    2450:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2452:	84 30       	cpi	r24, 0x04	; 4
    2454:	08 f4       	brcc	.+2      	; 0x2458 <KPD_u8getKeystate+0x2ea>
    2456:	a5 ce       	rjmp	.-694    	; 0x21a2 <KPD_u8getKeystate+0x34>
    2458:	01 c0       	rjmp	.+2      	; 0x245c <KPD_u8getKeystate+0x2ee>
            }
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    245a:	18 a2       	std	Y+32, r1	; 0x20
    }
    return Local_u8ErrorState;
    245c:	88 a1       	ldd	r24, Y+32	; 0x20
}
    245e:	a3 96       	adiw	r28, 0x23	; 35
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <KPD_enuInit>:

u8 KPD_enuInit(void)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_R1_PIN, DIO_u8_OUTPUT);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_R2_PIN, DIO_u8_OUTPUT);
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_R3_PIN, DIO_u8_OUTPUT);
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	62 e0       	ldi	r22, 0x02	; 2
    2490:	41 e0       	ldi	r20, 0x01	; 1
    2492:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_R4_PIN, DIO_u8_OUTPUT);
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	63 e0       	ldi	r22, 0x03	; 3
    249a:	41 e0       	ldi	r20, 0x01	; 1
    249c:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>

    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_C1_PIN, DIO_u8_INPUT);
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	64 e0       	ldi	r22, 0x04	; 4
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_C2_PIN, DIO_u8_INPUT);
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	65 e0       	ldi	r22, 0x05	; 5
    24ae:	40 e0       	ldi	r20, 0x00	; 0
    24b0:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_C3_PIN, DIO_u8_INPUT);
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	66 e0       	ldi	r22, 0x06	; 6
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_C4_PIN, DIO_u8_INPUT);
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	67 e0       	ldi	r22, 0x07	; 7
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	0e 94 cf 08 	call	0x119e	; 0x119e <DIO_voidSetPinDirection>

    DIO_u8SetPortValue(KPD_u8_PORT, DIO_u8_HIGH);
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	61 e0       	ldi	r22, 0x01	; 1
    24cc:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_u8SetPortValue>

    return STD_TYPES_OK;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
}
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <LCD_voidSendCmnd>:
#include "LCD_config.h"
#include "LCD_private.h"
#include "LCD_interface.h"

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	69 97       	sbiw	r28, 0x19	; 25
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	89 8f       	std	Y+25, r24	; 0x19
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Rs = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN0, DIO_u8_LOW);
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>

	/*Rw = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN1, DIO_u8_LOW);
    24f8:	82 e0       	ldi	r24, 0x02	; 2
    24fa:	61 e0       	ldi	r22, 0x01	; 1
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>

	/*Write Command*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd);
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	69 8d       	ldd	r22, Y+25	; 0x19
    2506:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_u8SetPortValue>

	/*E = 1*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_HIGH);
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	62 e0       	ldi	r22, 0x02	; 2
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	a0 e8       	ldi	r26, 0x80	; 128
    251a:	bf e3       	ldi	r27, 0x3F	; 63
    251c:	8d 8b       	std	Y+21, r24	; 0x15
    251e:	9e 8b       	std	Y+22, r25	; 0x16
    2520:	af 8b       	std	Y+23, r26	; 0x17
    2522:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2524:	6d 89       	ldd	r22, Y+21	; 0x15
    2526:	7e 89       	ldd	r23, Y+22	; 0x16
    2528:	8f 89       	ldd	r24, Y+23	; 0x17
    252a:	98 8d       	ldd	r25, Y+24	; 0x18
    252c:	2b ea       	ldi	r18, 0xAB	; 171
    252e:	3a ea       	ldi	r19, 0xAA	; 170
    2530:	4a ea       	ldi	r20, 0xAA	; 170
    2532:	5e e3       	ldi	r21, 0x3E	; 62
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	89 8b       	std	Y+17, r24	; 0x11
    253e:	9a 8b       	std	Y+18, r25	; 0x12
    2540:	ab 8b       	std	Y+19, r26	; 0x13
    2542:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2544:	69 89       	ldd	r22, Y+17	; 0x11
    2546:	7a 89       	ldd	r23, Y+18	; 0x12
    2548:	8b 89       	ldd	r24, Y+19	; 0x13
    254a:	9c 89       	ldd	r25, Y+20	; 0x14
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e8       	ldi	r20, 0x80	; 128
    2552:	5f e3       	ldi	r21, 0x3F	; 63
    2554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2558:	88 23       	and	r24, r24
    255a:	1c f4       	brge	.+6      	; 0x2562 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	88 8b       	std	Y+16, r24	; 0x10
    2560:	91 c0       	rjmp	.+290    	; 0x2684 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2562:	69 89       	ldd	r22, Y+17	; 0x11
    2564:	7a 89       	ldd	r23, Y+18	; 0x12
    2566:	8b 89       	ldd	r24, Y+19	; 0x13
    2568:	9c 89       	ldd	r25, Y+20	; 0x14
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	4f e7       	ldi	r20, 0x7F	; 127
    2570:	53 e4       	ldi	r21, 0x43	; 67
    2572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2576:	18 16       	cp	r1, r24
    2578:	0c f0       	brlt	.+2      	; 0x257c <LCD_voidSendCmnd+0xa4>
    257a:	7b c0       	rjmp	.+246    	; 0x2672 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    257c:	6d 89       	ldd	r22, Y+21	; 0x15
    257e:	7e 89       	ldd	r23, Y+22	; 0x16
    2580:	8f 89       	ldd	r24, Y+23	; 0x17
    2582:	98 8d       	ldd	r25, Y+24	; 0x18
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	4a e7       	ldi	r20, 0x7A	; 122
    258a:	54 e4       	ldi	r21, 0x44	; 68
    258c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	8c 87       	std	Y+12, r24	; 0x0c
    2596:	9d 87       	std	Y+13, r25	; 0x0d
    2598:	ae 87       	std	Y+14, r26	; 0x0e
    259a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259c:	6c 85       	ldd	r22, Y+12	; 0x0c
    259e:	7d 85       	ldd	r23, Y+13	; 0x0d
    25a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a e7       	ldi	r20, 0x7A	; 122
    25aa:	53 e4       	ldi	r21, 0x43	; 67
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	88 87       	std	Y+8, r24	; 0x08
    25b6:	99 87       	std	Y+9, r25	; 0x09
    25b8:	aa 87       	std	Y+10, r26	; 0x0a
    25ba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25bc:	68 85       	ldd	r22, Y+8	; 0x08
    25be:	79 85       	ldd	r23, Y+9	; 0x09
    25c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	2c f4       	brge	.+10     	; 0x25de <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	9f 83       	std	Y+7, r25	; 0x07
    25da:	8e 83       	std	Y+6, r24	; 0x06
    25dc:	3f c0       	rjmp	.+126    	; 0x265c <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    25de:	68 85       	ldd	r22, Y+8	; 0x08
    25e0:	79 85       	ldd	r23, Y+9	; 0x09
    25e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	3f ef       	ldi	r19, 0xFF	; 255
    25ea:	4f e7       	ldi	r20, 0x7F	; 127
    25ec:	57 e4       	ldi	r21, 0x47	; 71
    25ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25f2:	18 16       	cp	r1, r24
    25f4:	4c f5       	brge	.+82     	; 0x2648 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    25f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    25fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    25fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e2       	ldi	r20, 0x20	; 32
    2604:	51 e4       	ldi	r21, 0x41	; 65
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	9f 83       	std	Y+7, r25	; 0x07
    261c:	8e 83       	std	Y+6, r24	; 0x06
    261e:	0f c0       	rjmp	.+30     	; 0x263e <LCD_voidSendCmnd+0x166>
    2620:	89 e1       	ldi	r24, 0x19	; 25
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9d 83       	std	Y+5, r25	; 0x05
    2626:	8c 83       	std	Y+4, r24	; 0x04
    2628:	8c 81       	ldd	r24, Y+4	; 0x04
    262a:	9d 81       	ldd	r25, Y+5	; 0x05
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <LCD_voidSendCmnd+0x154>
    2630:	9d 83       	std	Y+5, r25	; 0x05
    2632:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2634:	8e 81       	ldd	r24, Y+6	; 0x06
    2636:	9f 81       	ldd	r25, Y+7	; 0x07
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	9f 83       	std	Y+7, r25	; 0x07
    263c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	8e 81       	ldd	r24, Y+6	; 0x06
    2640:	9f 81       	ldd	r25, Y+7	; 0x07
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	69 f7       	brne	.-38     	; 0x2620 <LCD_voidSendCmnd+0x148>
    2646:	24 c0       	rjmp	.+72     	; 0x2690 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2648:	68 85       	ldd	r22, Y+8	; 0x08
    264a:	79 85       	ldd	r23, Y+9	; 0x09
    264c:	8a 85       	ldd	r24, Y+10	; 0x0a
    264e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	9f 83       	std	Y+7, r25	; 0x07
    265a:	8e 83       	std	Y+6, r24	; 0x06
    265c:	8e 81       	ldd	r24, Y+6	; 0x06
    265e:	9f 81       	ldd	r25, Y+7	; 0x07
    2660:	9b 83       	std	Y+3, r25	; 0x03
    2662:	8a 83       	std	Y+2, r24	; 0x02
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	9b 81       	ldd	r25, Y+3	; 0x03
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <LCD_voidSendCmnd+0x190>
    266c:	9b 83       	std	Y+3, r25	; 0x03
    266e:	8a 83       	std	Y+2, r24	; 0x02
    2670:	0f c0       	rjmp	.+30     	; 0x2690 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2672:	69 89       	ldd	r22, Y+17	; 0x11
    2674:	7a 89       	ldd	r23, Y+18	; 0x12
    2676:	8b 89       	ldd	r24, Y+19	; 0x13
    2678:	9c 89       	ldd	r25, Y+20	; 0x14
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	88 8b       	std	Y+16, r24	; 0x10
    2684:	88 89       	ldd	r24, Y+16	; 0x10
    2686:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	8a 95       	dec	r24
    268c:	f1 f7       	brne	.-4      	; 0x268a <LCD_voidSendCmnd+0x1b2>
    268e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

	/*E = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_LOW);
    2690:	82 e0       	ldi	r24, 0x02	; 2
    2692:	62 e0       	ldi	r22, 0x02	; 2
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
	_delay_us(1);

	/*E = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_LOW);
#endif
}
    269a:	69 96       	adiw	r28, 0x19	; 25
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	69 97       	sbiw	r28, 0x19	; 25
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	89 8f       	std	Y+25, r24	; 0x19

#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Rs = 1*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN0, DIO_u8_HIGH);
    26c2:	82 e0       	ldi	r24, 0x02	; 2
    26c4:	60 e0       	ldi	r22, 0x00	; 0
    26c6:	41 e0       	ldi	r20, 0x01	; 1
    26c8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>

	/*Rw = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN1, DIO_u8_LOW);
    26cc:	82 e0       	ldi	r24, 0x02	; 2
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>

	/*Write Command*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Char);
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	69 8d       	ldd	r22, Y+25	; 0x19
    26da:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_u8SetPortValue>

	/*E = 1*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_HIGH);
    26de:	82 e0       	ldi	r24, 0x02	; 2
    26e0:	62 e0       	ldi	r22, 0x02	; 2
    26e2:	41 e0       	ldi	r20, 0x01	; 1
    26e4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	a0 e8       	ldi	r26, 0x80	; 128
    26ee:	bf e3       	ldi	r27, 0x3F	; 63
    26f0:	8d 8b       	std	Y+21, r24	; 0x15
    26f2:	9e 8b       	std	Y+22, r25	; 0x16
    26f4:	af 8b       	std	Y+23, r26	; 0x17
    26f6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26f8:	6d 89       	ldd	r22, Y+21	; 0x15
    26fa:	7e 89       	ldd	r23, Y+22	; 0x16
    26fc:	8f 89       	ldd	r24, Y+23	; 0x17
    26fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2700:	2b ea       	ldi	r18, 0xAB	; 171
    2702:	3a ea       	ldi	r19, 0xAA	; 170
    2704:	4a ea       	ldi	r20, 0xAA	; 170
    2706:	5e e3       	ldi	r21, 0x3E	; 62
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	89 8b       	std	Y+17, r24	; 0x11
    2712:	9a 8b       	std	Y+18, r25	; 0x12
    2714:	ab 8b       	std	Y+19, r26	; 0x13
    2716:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2718:	69 89       	ldd	r22, Y+17	; 0x11
    271a:	7a 89       	ldd	r23, Y+18	; 0x12
    271c:	8b 89       	ldd	r24, Y+19	; 0x13
    271e:	9c 89       	ldd	r25, Y+20	; 0x14
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e8       	ldi	r20, 0x80	; 128
    2726:	5f e3       	ldi	r21, 0x3F	; 63
    2728:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    272c:	88 23       	and	r24, r24
    272e:	1c f4       	brge	.+6      	; 0x2736 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	88 8b       	std	Y+16, r24	; 0x10
    2734:	91 c0       	rjmp	.+290    	; 0x2858 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2736:	69 89       	ldd	r22, Y+17	; 0x11
    2738:	7a 89       	ldd	r23, Y+18	; 0x12
    273a:	8b 89       	ldd	r24, Y+19	; 0x13
    273c:	9c 89       	ldd	r25, Y+20	; 0x14
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	53 e4       	ldi	r21, 0x43	; 67
    2746:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	0c f0       	brlt	.+2      	; 0x2750 <LCD_voidSendChar+0xa4>
    274e:	7b c0       	rjmp	.+246    	; 0x2846 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2750:	6d 89       	ldd	r22, Y+21	; 0x15
    2752:	7e 89       	ldd	r23, Y+22	; 0x16
    2754:	8f 89       	ldd	r24, Y+23	; 0x17
    2756:	98 8d       	ldd	r25, Y+24	; 0x18
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4a e7       	ldi	r20, 0x7A	; 122
    275e:	54 e4       	ldi	r21, 0x44	; 68
    2760:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	8c 87       	std	Y+12, r24	; 0x0c
    276a:	9d 87       	std	Y+13, r25	; 0x0d
    276c:	ae 87       	std	Y+14, r26	; 0x0e
    276e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2770:	6c 85       	ldd	r22, Y+12	; 0x0c
    2772:	7d 85       	ldd	r23, Y+13	; 0x0d
    2774:	8e 85       	ldd	r24, Y+14	; 0x0e
    2776:	9f 85       	ldd	r25, Y+15	; 0x0f
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	4a e7       	ldi	r20, 0x7A	; 122
    277e:	53 e4       	ldi	r21, 0x43	; 67
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	88 87       	std	Y+8, r24	; 0x08
    278a:	99 87       	std	Y+9, r25	; 0x09
    278c:	aa 87       	std	Y+10, r26	; 0x0a
    278e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2790:	68 85       	ldd	r22, Y+8	; 0x08
    2792:	79 85       	ldd	r23, Y+9	; 0x09
    2794:	8a 85       	ldd	r24, Y+10	; 0x0a
    2796:	9b 85       	ldd	r25, Y+11	; 0x0b
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e8       	ldi	r20, 0x80	; 128
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	2c f4       	brge	.+10     	; 0x27b2 <LCD_voidSendChar+0x106>
		__ticks = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9f 83       	std	Y+7, r25	; 0x07
    27ae:	8e 83       	std	Y+6, r24	; 0x06
    27b0:	3f c0       	rjmp	.+126    	; 0x2830 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    27b2:	68 85       	ldd	r22, Y+8	; 0x08
    27b4:	79 85       	ldd	r23, Y+9	; 0x09
    27b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	3f ef       	ldi	r19, 0xFF	; 255
    27be:	4f e7       	ldi	r20, 0x7F	; 127
    27c0:	57 e4       	ldi	r21, 0x47	; 71
    27c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c6:	18 16       	cp	r1, r24
    27c8:	4c f5       	brge	.+82     	; 0x281c <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    27cc:	7d 85       	ldd	r23, Y+13	; 0x0d
    27ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    27d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e2       	ldi	r20, 0x20	; 32
    27d8:	51 e4       	ldi	r21, 0x41	; 65
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9f 83       	std	Y+7, r25	; 0x07
    27f0:	8e 83       	std	Y+6, r24	; 0x06
    27f2:	0f c0       	rjmp	.+30     	; 0x2812 <LCD_voidSendChar+0x166>
    27f4:	89 e1       	ldi	r24, 0x19	; 25
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	9d 83       	std	Y+5, r25	; 0x05
    27fa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27fc:	8c 81       	ldd	r24, Y+4	; 0x04
    27fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <LCD_voidSendChar+0x154>
    2804:	9d 83       	std	Y+5, r25	; 0x05
    2806:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2808:	8e 81       	ldd	r24, Y+6	; 0x06
    280a:	9f 81       	ldd	r25, Y+7	; 0x07
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	9f 83       	std	Y+7, r25	; 0x07
    2810:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2812:	8e 81       	ldd	r24, Y+6	; 0x06
    2814:	9f 81       	ldd	r25, Y+7	; 0x07
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	69 f7       	brne	.-38     	; 0x27f4 <LCD_voidSendChar+0x148>
    281a:	24 c0       	rjmp	.+72     	; 0x2864 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281c:	68 85       	ldd	r22, Y+8	; 0x08
    281e:	79 85       	ldd	r23, Y+9	; 0x09
    2820:	8a 85       	ldd	r24, Y+10	; 0x0a
    2822:	9b 85       	ldd	r25, Y+11	; 0x0b
    2824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	9f 83       	std	Y+7, r25	; 0x07
    282e:	8e 83       	std	Y+6, r24	; 0x06
    2830:	8e 81       	ldd	r24, Y+6	; 0x06
    2832:	9f 81       	ldd	r25, Y+7	; 0x07
    2834:	9b 83       	std	Y+3, r25	; 0x03
    2836:	8a 83       	std	Y+2, r24	; 0x02
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	9b 81       	ldd	r25, Y+3	; 0x03
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <LCD_voidSendChar+0x190>
    2840:	9b 83       	std	Y+3, r25	; 0x03
    2842:	8a 83       	std	Y+2, r24	; 0x02
    2844:	0f c0       	rjmp	.+30     	; 0x2864 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2846:	69 89       	ldd	r22, Y+17	; 0x11
    2848:	7a 89       	ldd	r23, Y+18	; 0x12
    284a:	8b 89       	ldd	r24, Y+19	; 0x13
    284c:	9c 89       	ldd	r25, Y+20	; 0x14
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	88 8b       	std	Y+16, r24	; 0x10
    2858:	88 89       	ldd	r24, Y+16	; 0x10
    285a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	8a 95       	dec	r24
    2860:	f1 f7       	brne	.-4      	; 0x285e <LCD_voidSendChar+0x1b2>
    2862:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

	/*E = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_LOW);
    2864:	82 e0       	ldi	r24, 0x02	; 2
    2866:	62 e0       	ldi	r22, 0x02	; 2
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <DIO_voidSetPinValue>

	/*E = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_LOW);

#endif
}
    286e:	69 96       	adiw	r28, 0x19	; 25
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <LCD_voideInit>:
void LCD_voideInit(void)
{
    2880:	0f 93       	push	r16
    2882:	1f 93       	push	r17
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	cc 54       	subi	r28, 0x4C	; 76
    288e:	d0 40       	sbci	r29, 0x00	; 0
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	cd bf       	out	0x3d, r28	; 61
    289a:	fe 01       	movw	r30, r28
    289c:	e7 5b       	subi	r30, 0xB7	; 183
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	ac e0       	ldi	r26, 0x0C	; 12
    28a6:	b2 e4       	ldi	r27, 0x42	; 66
    28a8:	80 83       	st	Z, r24
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	a2 83       	std	Z+2, r26	; 0x02
    28ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b0:	8e 01       	movw	r16, r28
    28b2:	0b 5b       	subi	r16, 0xBB	; 187
    28b4:	1f 4f       	sbci	r17, 0xFF	; 255
    28b6:	fe 01       	movw	r30, r28
    28b8:	e7 5b       	subi	r30, 0xB7	; 183
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	60 81       	ld	r22, Z
    28be:	71 81       	ldd	r23, Z+1	; 0x01
    28c0:	82 81       	ldd	r24, Z+2	; 0x02
    28c2:	93 81       	ldd	r25, Z+3	; 0x03
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	4a e7       	ldi	r20, 0x7A	; 122
    28ca:	53 e4       	ldi	r21, 0x43	; 67
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	f8 01       	movw	r30, r16
    28d6:	80 83       	st	Z, r24
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	a2 83       	std	Z+2, r26	; 0x02
    28dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28de:	fe 01       	movw	r30, r28
    28e0:	eb 5b       	subi	r30, 0xBB	; 187
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	82 81       	ldd	r24, Z+2	; 0x02
    28ea:	93 81       	ldd	r25, Z+3	; 0x03
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e8       	ldi	r20, 0x80	; 128
    28f2:	5f e3       	ldi	r21, 0x3F	; 63
    28f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f8:	88 23       	and	r24, r24
    28fa:	44 f4       	brge	.+16     	; 0x290c <LCD_voideInit+0x8c>
		__ticks = 1;
    28fc:	fe 01       	movw	r30, r28
    28fe:	ed 5b       	subi	r30, 0xBD	; 189
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
    290a:	64 c0       	rjmp	.+200    	; 0x29d4 <LCD_voideInit+0x154>
	else if (__tmp > 65535)
    290c:	fe 01       	movw	r30, r28
    290e:	eb 5b       	subi	r30, 0xBB	; 187
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	60 81       	ld	r22, Z
    2914:	71 81       	ldd	r23, Z+1	; 0x01
    2916:	82 81       	ldd	r24, Z+2	; 0x02
    2918:	93 81       	ldd	r25, Z+3	; 0x03
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	3f ef       	ldi	r19, 0xFF	; 255
    291e:	4f e7       	ldi	r20, 0x7F	; 127
    2920:	57 e4       	ldi	r21, 0x47	; 71
    2922:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2926:	18 16       	cp	r1, r24
    2928:	0c f0       	brlt	.+2      	; 0x292c <LCD_voideInit+0xac>
    292a:	43 c0       	rjmp	.+134    	; 0x29b2 <LCD_voideInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292c:	fe 01       	movw	r30, r28
    292e:	e7 5b       	subi	r30, 0xB7	; 183
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e2       	ldi	r20, 0x20	; 32
    2940:	51 e4       	ldi	r21, 0x41	; 65
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	8e 01       	movw	r16, r28
    294c:	0d 5b       	subi	r16, 0xBD	; 189
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	f8 01       	movw	r30, r16
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	80 83       	st	Z, r24
    2962:	1f c0       	rjmp	.+62     	; 0x29a2 <LCD_voideInit+0x122>
    2964:	fe 01       	movw	r30, r28
    2966:	ef 5b       	subi	r30, 0xBF	; 191
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	89 e1       	ldi	r24, 0x19	; 25
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2972:	fe 01       	movw	r30, r28
    2974:	ef 5b       	subi	r30, 0xBF	; 191
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 81       	ld	r24, Z
    297a:	91 81       	ldd	r25, Z+1	; 0x01
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	f1 f7       	brne	.-4      	; 0x297c <LCD_voideInit+0xfc>
    2980:	fe 01       	movw	r30, r28
    2982:	ef 5b       	subi	r30, 0xBF	; 191
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	91 83       	std	Z+1, r25	; 0x01
    2988:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298a:	de 01       	movw	r26, r28
    298c:	ad 5b       	subi	r26, 0xBD	; 189
    298e:	bf 4f       	sbci	r27, 0xFF	; 255
    2990:	fe 01       	movw	r30, r28
    2992:	ed 5b       	subi	r30, 0xBD	; 189
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	80 81       	ld	r24, Z
    2998:	91 81       	ldd	r25, Z+1	; 0x01
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	11 96       	adiw	r26, 0x01	; 1
    299e:	9c 93       	st	X, r25
    29a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a2:	fe 01       	movw	r30, r28
    29a4:	ed 5b       	subi	r30, 0xBD	; 189
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	d1 f6       	brne	.-76     	; 0x2964 <LCD_voideInit+0xe4>
    29b0:	24 c0       	rjmp	.+72     	; 0x29fa <LCD_voideInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b2:	8e 01       	movw	r16, r28
    29b4:	0d 5b       	subi	r16, 0xBD	; 189
    29b6:	1f 4f       	sbci	r17, 0xFF	; 255
    29b8:	fe 01       	movw	r30, r28
    29ba:	eb 5b       	subi	r30, 0xBB	; 187
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	60 81       	ld	r22, Z
    29c0:	71 81       	ldd	r23, Z+1	; 0x01
    29c2:	82 81       	ldd	r24, Z+2	; 0x02
    29c4:	93 81       	ldd	r25, Z+3	; 0x03
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	f8 01       	movw	r30, r16
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24
    29d4:	fe 01       	movw	r30, r28
    29d6:	ed 5b       	subi	r30, 0xBD	; 189
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
    29de:	fe 01       	movw	r30, r28
    29e0:	ff 96       	adiw	r30, 0x3f	; 63
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	80 83       	st	Z, r24
    29e6:	fe 01       	movw	r30, r28
    29e8:	ff 96       	adiw	r30, 0x3f	; 63
    29ea:	80 81       	ld	r24, Z
    29ec:	91 81       	ldd	r25, Z+1	; 0x01
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <LCD_voideInit+0x16e>
    29f2:	fe 01       	movw	r30, r28
    29f4:	ff 96       	adiw	r30, 0x3f	; 63
    29f6:	91 83       	std	Z+1, r25	; 0x01
    29f8:	80 83       	st	Z, r24
#if LCD_u8_MODE == LCD_u8_MODE_8BIT
	_delay_ms(35);
	// Function set cmd
	LCD_voidSendCmnd(0b00111000); // set for 8bits
    29fa:	88 e3       	ldi	r24, 0x38	; 56
    29fc:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_voidSendCmnd>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	a0 e2       	ldi	r26, 0x20	; 32
    2a06:	b2 e4       	ldi	r27, 0x42	; 66
    2a08:	8b af       	std	Y+59, r24	; 0x3b
    2a0a:	9c af       	std	Y+60, r25	; 0x3c
    2a0c:	ad af       	std	Y+61, r26	; 0x3d
    2a0e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a10:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a12:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a14:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a16:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a18:	2b ea       	ldi	r18, 0xAB	; 171
    2a1a:	3a ea       	ldi	r19, 0xAA	; 170
    2a1c:	4a ea       	ldi	r20, 0xAA	; 170
    2a1e:	5e e3       	ldi	r21, 0x3E	; 62
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	8f ab       	std	Y+55, r24	; 0x37
    2a2a:	98 af       	std	Y+56, r25	; 0x38
    2a2c:	a9 af       	std	Y+57, r26	; 0x39
    2a2e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2a30:	6f a9       	ldd	r22, Y+55	; 0x37
    2a32:	78 ad       	ldd	r23, Y+56	; 0x38
    2a34:	89 ad       	ldd	r24, Y+57	; 0x39
    2a36:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e8       	ldi	r20, 0x80	; 128
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a44:	88 23       	and	r24, r24
    2a46:	1c f4       	brge	.+6      	; 0x2a4e <LCD_voideInit+0x1ce>
		__ticks = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	8e ab       	std	Y+54, r24	; 0x36
    2a4c:	91 c0       	rjmp	.+290    	; 0x2b70 <LCD_voideInit+0x2f0>
	else if (__tmp > 255)
    2a4e:	6f a9       	ldd	r22, Y+55	; 0x37
    2a50:	78 ad       	ldd	r23, Y+56	; 0x38
    2a52:	89 ad       	ldd	r24, Y+57	; 0x39
    2a54:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	4f e7       	ldi	r20, 0x7F	; 127
    2a5c:	53 e4       	ldi	r21, 0x43	; 67
    2a5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a62:	18 16       	cp	r1, r24
    2a64:	0c f0       	brlt	.+2      	; 0x2a68 <LCD_voideInit+0x1e8>
    2a66:	7b c0       	rjmp	.+246    	; 0x2b5e <LCD_voideInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    2a68:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a6a:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	4a e7       	ldi	r20, 0x7A	; 122
    2a76:	54 e4       	ldi	r21, 0x44	; 68
    2a78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	8a ab       	std	Y+50, r24	; 0x32
    2a82:	9b ab       	std	Y+51, r25	; 0x33
    2a84:	ac ab       	std	Y+52, r26	; 0x34
    2a86:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a88:	6a a9       	ldd	r22, Y+50	; 0x32
    2a8a:	7b a9       	ldd	r23, Y+51	; 0x33
    2a8c:	8c a9       	ldd	r24, Y+52	; 0x34
    2a8e:	9d a9       	ldd	r25, Y+53	; 0x35
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	4a e7       	ldi	r20, 0x7A	; 122
    2a96:	53 e4       	ldi	r21, 0x43	; 67
    2a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	8e a7       	std	Y+46, r24	; 0x2e
    2aa2:	9f a7       	std	Y+47, r25	; 0x2f
    2aa4:	a8 ab       	std	Y+48, r26	; 0x30
    2aa6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2aa8:	6e a5       	ldd	r22, Y+46	; 0x2e
    2aaa:	7f a5       	ldd	r23, Y+47	; 0x2f
    2aac:	88 a9       	ldd	r24, Y+48	; 0x30
    2aae:	99 a9       	ldd	r25, Y+49	; 0x31
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e8       	ldi	r20, 0x80	; 128
    2ab6:	5f e3       	ldi	r21, 0x3F	; 63
    2ab8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2abc:	88 23       	and	r24, r24
    2abe:	2c f4       	brge	.+10     	; 0x2aca <LCD_voideInit+0x24a>
		__ticks = 1;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	9d a7       	std	Y+45, r25	; 0x2d
    2ac6:	8c a7       	std	Y+44, r24	; 0x2c
    2ac8:	3f c0       	rjmp	.+126    	; 0x2b48 <LCD_voideInit+0x2c8>
	else if (__tmp > 65535)
    2aca:	6e a5       	ldd	r22, Y+46	; 0x2e
    2acc:	7f a5       	ldd	r23, Y+47	; 0x2f
    2ace:	88 a9       	ldd	r24, Y+48	; 0x30
    2ad0:	99 a9       	ldd	r25, Y+49	; 0x31
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	3f ef       	ldi	r19, 0xFF	; 255
    2ad6:	4f e7       	ldi	r20, 0x7F	; 127
    2ad8:	57 e4       	ldi	r21, 0x47	; 71
    2ada:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ade:	18 16       	cp	r1, r24
    2ae0:	4c f5       	brge	.+82     	; 0x2b34 <LCD_voideInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae2:	6a a9       	ldd	r22, Y+50	; 0x32
    2ae4:	7b a9       	ldd	r23, Y+51	; 0x33
    2ae6:	8c a9       	ldd	r24, Y+52	; 0x34
    2ae8:	9d a9       	ldd	r25, Y+53	; 0x35
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e2       	ldi	r20, 0x20	; 32
    2af0:	51 e4       	ldi	r21, 0x41	; 65
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9d a7       	std	Y+45, r25	; 0x2d
    2b08:	8c a7       	std	Y+44, r24	; 0x2c
    2b0a:	0f c0       	rjmp	.+30     	; 0x2b2a <LCD_voideInit+0x2aa>
    2b0c:	89 e1       	ldi	r24, 0x19	; 25
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9b a7       	std	Y+43, r25	; 0x2b
    2b12:	8a a7       	std	Y+42, r24	; 0x2a
    2b14:	8a a5       	ldd	r24, Y+42	; 0x2a
    2b16:	9b a5       	ldd	r25, Y+43	; 0x2b
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <LCD_voideInit+0x298>
    2b1c:	9b a7       	std	Y+43, r25	; 0x2b
    2b1e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b20:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b22:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	9d a7       	std	Y+45, r25	; 0x2d
    2b28:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b2c:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	69 f7       	brne	.-38     	; 0x2b0c <LCD_voideInit+0x28c>
    2b32:	24 c0       	rjmp	.+72     	; 0x2b7c <LCD_voideInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b34:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b36:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b38:	88 a9       	ldd	r24, Y+48	; 0x30
    2b3a:	99 a9       	ldd	r25, Y+49	; 0x31
    2b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	9d a7       	std	Y+45, r25	; 0x2d
    2b46:	8c a7       	std	Y+44, r24	; 0x2c
    2b48:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b4a:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b4c:	99 a7       	std	Y+41, r25	; 0x29
    2b4e:	88 a7       	std	Y+40, r24	; 0x28
    2b50:	88 a5       	ldd	r24, Y+40	; 0x28
    2b52:	99 a5       	ldd	r25, Y+41	; 0x29
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <LCD_voideInit+0x2d4>
    2b58:	99 a7       	std	Y+41, r25	; 0x29
    2b5a:	88 a7       	std	Y+40, r24	; 0x28
    2b5c:	0f c0       	rjmp	.+30     	; 0x2b7c <LCD_voideInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b5e:	6f a9       	ldd	r22, Y+55	; 0x37
    2b60:	78 ad       	ldd	r23, Y+56	; 0x38
    2b62:	89 ad       	ldd	r24, Y+57	; 0x39
    2b64:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8e ab       	std	Y+54, r24	; 0x36
    2b70:	8e a9       	ldd	r24, Y+54	; 0x36
    2b72:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b74:	8f a1       	ldd	r24, Y+39	; 0x27
    2b76:	8a 95       	dec	r24
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <LCD_voideInit+0x2f6>
    2b7a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111); // display ON/OFF command
    2b7c:	8f e0       	ldi	r24, 0x0F	; 15
    2b7e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_voidSendCmnd>
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	a0 e2       	ldi	r26, 0x20	; 32
    2b88:	b2 e4       	ldi	r27, 0x42	; 66
    2b8a:	8b a3       	std	Y+35, r24	; 0x23
    2b8c:	9c a3       	std	Y+36, r25	; 0x24
    2b8e:	ad a3       	std	Y+37, r26	; 0x25
    2b90:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b92:	6b a1       	ldd	r22, Y+35	; 0x23
    2b94:	7c a1       	ldd	r23, Y+36	; 0x24
    2b96:	8d a1       	ldd	r24, Y+37	; 0x25
    2b98:	9e a1       	ldd	r25, Y+38	; 0x26
    2b9a:	2b ea       	ldi	r18, 0xAB	; 171
    2b9c:	3a ea       	ldi	r19, 0xAA	; 170
    2b9e:	4a ea       	ldi	r20, 0xAA	; 170
    2ba0:	5e e3       	ldi	r21, 0x3E	; 62
    2ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	8f 8f       	std	Y+31, r24	; 0x1f
    2bac:	98 a3       	std	Y+32, r25	; 0x20
    2bae:	a9 a3       	std	Y+33, r26	; 0x21
    2bb0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2bb2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bb4:	78 a1       	ldd	r23, Y+32	; 0x20
    2bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e8       	ldi	r20, 0x80	; 128
    2bc0:	5f e3       	ldi	r21, 0x3F	; 63
    2bc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bc6:	88 23       	and	r24, r24
    2bc8:	1c f4       	brge	.+6      	; 0x2bd0 <LCD_voideInit+0x350>
		__ticks = 1;
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	8e 8f       	std	Y+30, r24	; 0x1e
    2bce:	91 c0       	rjmp	.+290    	; 0x2cf2 <LCD_voideInit+0x472>
	else if (__tmp > 255)
    2bd0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bd2:	78 a1       	ldd	r23, Y+32	; 0x20
    2bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	4f e7       	ldi	r20, 0x7F	; 127
    2bde:	53 e4       	ldi	r21, 0x43	; 67
    2be0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2be4:	18 16       	cp	r1, r24
    2be6:	0c f0       	brlt	.+2      	; 0x2bea <LCD_voideInit+0x36a>
    2be8:	7b c0       	rjmp	.+246    	; 0x2ce0 <LCD_voideInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2bea:	6b a1       	ldd	r22, Y+35	; 0x23
    2bec:	7c a1       	ldd	r23, Y+36	; 0x24
    2bee:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	4a e7       	ldi	r20, 0x7A	; 122
    2bf8:	54 e4       	ldi	r21, 0x44	; 68
    2bfa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	8a 8f       	std	Y+26, r24	; 0x1a
    2c04:	9b 8f       	std	Y+27, r25	; 0x1b
    2c06:	ac 8f       	std	Y+28, r26	; 0x1c
    2c08:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c0a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c0c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2c0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c10:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	4a e7       	ldi	r20, 0x7A	; 122
    2c18:	53 e4       	ldi	r21, 0x43	; 67
    2c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	8e 8b       	std	Y+22, r24	; 0x16
    2c24:	9f 8b       	std	Y+23, r25	; 0x17
    2c26:	a8 8f       	std	Y+24, r26	; 0x18
    2c28:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2c2a:	6e 89       	ldd	r22, Y+22	; 0x16
    2c2c:	7f 89       	ldd	r23, Y+23	; 0x17
    2c2e:	88 8d       	ldd	r24, Y+24	; 0x18
    2c30:	99 8d       	ldd	r25, Y+25	; 0x19
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e8       	ldi	r20, 0x80	; 128
    2c38:	5f e3       	ldi	r21, 0x3F	; 63
    2c3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c3e:	88 23       	and	r24, r24
    2c40:	2c f4       	brge	.+10     	; 0x2c4c <LCD_voideInit+0x3cc>
		__ticks = 1;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	9d 8b       	std	Y+21, r25	; 0x15
    2c48:	8c 8b       	std	Y+20, r24	; 0x14
    2c4a:	3f c0       	rjmp	.+126    	; 0x2cca <LCD_voideInit+0x44a>
	else if (__tmp > 65535)
    2c4c:	6e 89       	ldd	r22, Y+22	; 0x16
    2c4e:	7f 89       	ldd	r23, Y+23	; 0x17
    2c50:	88 8d       	ldd	r24, Y+24	; 0x18
    2c52:	99 8d       	ldd	r25, Y+25	; 0x19
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	3f ef       	ldi	r19, 0xFF	; 255
    2c58:	4f e7       	ldi	r20, 0x7F	; 127
    2c5a:	57 e4       	ldi	r21, 0x47	; 71
    2c5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c60:	18 16       	cp	r1, r24
    2c62:	4c f5       	brge	.+82     	; 0x2cb6 <LCD_voideInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c64:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c66:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2c68:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c6a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e2       	ldi	r20, 0x20	; 32
    2c72:	51 e4       	ldi	r21, 0x41	; 65
    2c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	bc 01       	movw	r22, r24
    2c7e:	cd 01       	movw	r24, r26
    2c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	9d 8b       	std	Y+21, r25	; 0x15
    2c8a:	8c 8b       	std	Y+20, r24	; 0x14
    2c8c:	0f c0       	rjmp	.+30     	; 0x2cac <LCD_voideInit+0x42c>
    2c8e:	89 e1       	ldi	r24, 0x19	; 25
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	9b 8b       	std	Y+19, r25	; 0x13
    2c94:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c96:	8a 89       	ldd	r24, Y+18	; 0x12
    2c98:	9b 89       	ldd	r25, Y+19	; 0x13
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	f1 f7       	brne	.-4      	; 0x2c9a <LCD_voideInit+0x41a>
    2c9e:	9b 8b       	std	Y+19, r25	; 0x13
    2ca0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca2:	8c 89       	ldd	r24, Y+20	; 0x14
    2ca4:	9d 89       	ldd	r25, Y+21	; 0x15
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	9d 8b       	std	Y+21, r25	; 0x15
    2caa:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cac:	8c 89       	ldd	r24, Y+20	; 0x14
    2cae:	9d 89       	ldd	r25, Y+21	; 0x15
    2cb0:	00 97       	sbiw	r24, 0x00	; 0
    2cb2:	69 f7       	brne	.-38     	; 0x2c8e <LCD_voideInit+0x40e>
    2cb4:	24 c0       	rjmp	.+72     	; 0x2cfe <LCD_voideInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb6:	6e 89       	ldd	r22, Y+22	; 0x16
    2cb8:	7f 89       	ldd	r23, Y+23	; 0x17
    2cba:	88 8d       	ldd	r24, Y+24	; 0x18
    2cbc:	99 8d       	ldd	r25, Y+25	; 0x19
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	9d 8b       	std	Y+21, r25	; 0x15
    2cc8:	8c 8b       	std	Y+20, r24	; 0x14
    2cca:	8c 89       	ldd	r24, Y+20	; 0x14
    2ccc:	9d 89       	ldd	r25, Y+21	; 0x15
    2cce:	99 8b       	std	Y+17, r25	; 0x11
    2cd0:	88 8b       	std	Y+16, r24	; 0x10
    2cd2:	88 89       	ldd	r24, Y+16	; 0x10
    2cd4:	99 89       	ldd	r25, Y+17	; 0x11
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <LCD_voideInit+0x456>
    2cda:	99 8b       	std	Y+17, r25	; 0x11
    2cdc:	88 8b       	std	Y+16, r24	; 0x10
    2cde:	0f c0       	rjmp	.+30     	; 0x2cfe <LCD_voideInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ce0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ce2:	78 a1       	ldd	r23, Y+32	; 0x20
    2ce4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	8e 8f       	std	Y+30, r24	; 0x1e
    2cf2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cf4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf8:	8a 95       	dec	r24
    2cfa:	f1 f7       	brne	.-4      	; 0x2cf8 <LCD_voideInit+0x478>
    2cfc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0x01); // clear 8 bits
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_voidSendCmnd>
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	a0 ea       	ldi	r26, 0xA0	; 160
    2d0a:	b0 e4       	ldi	r27, 0x40	; 64
    2d0c:	8b 87       	std	Y+11, r24	; 0x0b
    2d0e:	9c 87       	std	Y+12, r25	; 0x0c
    2d10:	ad 87       	std	Y+13, r26	; 0x0d
    2d12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	4a e7       	ldi	r20, 0x7A	; 122
    2d22:	53 e4       	ldi	r21, 0x43	; 67
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	8f 83       	std	Y+7, r24	; 0x07
    2d2e:	98 87       	std	Y+8, r25	; 0x08
    2d30:	a9 87       	std	Y+9, r26	; 0x09
    2d32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d34:	6f 81       	ldd	r22, Y+7	; 0x07
    2d36:	78 85       	ldd	r23, Y+8	; 0x08
    2d38:	89 85       	ldd	r24, Y+9	; 0x09
    2d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e8       	ldi	r20, 0x80	; 128
    2d42:	5f e3       	ldi	r21, 0x3F	; 63
    2d44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d48:	88 23       	and	r24, r24
    2d4a:	2c f4       	brge	.+10     	; 0x2d56 <LCD_voideInit+0x4d6>
		__ticks = 1;
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	9e 83       	std	Y+6, r25	; 0x06
    2d52:	8d 83       	std	Y+5, r24	; 0x05
    2d54:	3f c0       	rjmp	.+126    	; 0x2dd4 <LCD_voideInit+0x554>
	else if (__tmp > 65535)
    2d56:	6f 81       	ldd	r22, Y+7	; 0x07
    2d58:	78 85       	ldd	r23, Y+8	; 0x08
    2d5a:	89 85       	ldd	r24, Y+9	; 0x09
    2d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	3f ef       	ldi	r19, 0xFF	; 255
    2d62:	4f e7       	ldi	r20, 0x7F	; 127
    2d64:	57 e4       	ldi	r21, 0x47	; 71
    2d66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d6a:	18 16       	cp	r1, r24
    2d6c:	4c f5       	brge	.+82     	; 0x2dc0 <LCD_voideInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e2       	ldi	r20, 0x20	; 32
    2d7c:	51 e4       	ldi	r21, 0x41	; 65
    2d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	bc 01       	movw	r22, r24
    2d88:	cd 01       	movw	r24, r26
    2d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	9e 83       	std	Y+6, r25	; 0x06
    2d94:	8d 83       	std	Y+5, r24	; 0x05
    2d96:	0f c0       	rjmp	.+30     	; 0x2db6 <LCD_voideInit+0x536>
    2d98:	89 e1       	ldi	r24, 0x19	; 25
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	9c 83       	std	Y+4, r25	; 0x04
    2d9e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	9c 81       	ldd	r25, Y+4	; 0x04
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	f1 f7       	brne	.-4      	; 0x2da4 <LCD_voideInit+0x524>
    2da8:	9c 83       	std	Y+4, r25	; 0x04
    2daa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dac:	8d 81       	ldd	r24, Y+5	; 0x05
    2dae:	9e 81       	ldd	r25, Y+6	; 0x06
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	9e 83       	std	Y+6, r25	; 0x06
    2db4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db6:	8d 81       	ldd	r24, Y+5	; 0x05
    2db8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	69 f7       	brne	.-38     	; 0x2d98 <LCD_voideInit+0x518>
    2dbe:	14 c0       	rjmp	.+40     	; 0x2de8 <LCD_voideInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc2:	78 85       	ldd	r23, Y+8	; 0x08
    2dc4:	89 85       	ldd	r24, Y+9	; 0x09
    2dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	9e 83       	std	Y+6, r25	; 0x06
    2dd2:	8d 83       	std	Y+5, r24	; 0x05
    2dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd8:	9a 83       	std	Y+2, r25	; 0x02
    2dda:	89 83       	std	Y+1, r24	; 0x01
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	9a 81       	ldd	r25, Y+2	; 0x02
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	f1 f7       	brne	.-4      	; 0x2de0 <LCD_voideInit+0x560>
    2de4:	9a 83       	std	Y+2, r25	; 0x02
    2de6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	LCD_voidSendCmnd(0b00000110); // set mood for 8 bits
    2de8:	86 e0       	ldi	r24, 0x06	; 6
    2dea:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_voidSendCmnd>
	LCD_voidSendCmnd(0x01); // clear 8 bits
	_delay_ms(5);
	LCD_voidSendCmnd(0b00000110); // set mood for 8 bits

#endif
}
    2dee:	c4 5b       	subi	r28, 0xB4	; 180
    2df0:	df 4f       	sbci	r29, 0xFF	; 255
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	de bf       	out	0x3e, r29	; 62
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	cd bf       	out	0x3d, r28	; 61
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	1f 91       	pop	r17
    2e02:	0f 91       	pop	r16
    2e04:	08 95       	ret

00002e06 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 COPY_u8LineNum, u8 Copy_u8location)
{
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <LCD_u8GoToXY+0x6>
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <LCD_u8GoToXY+0x8>
    2e0e:	0f 92       	push	r0
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	8a 83       	std	Y+2, r24	; 0x02
    2e16:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8Errorstate = STD_TYPES_OK;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	89 83       	std	Y+1, r24	; 0x01
	if (COPY_u8LineNum <= 39)
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	88 32       	cpi	r24, 0x28	; 40
    2e20:	e0 f4       	brcc	.+56     	; 0x2e5a <LCD_u8GoToXY+0x54>
	{
		switch (COPY_u8LineNum)
    2e22:	8a 81       	ldd	r24, Y+2	; 0x02
    2e24:	28 2f       	mov	r18, r24
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	3d 83       	std	Y+5, r19	; 0x05
    2e2a:	2c 83       	std	Y+4, r18	; 0x04
    2e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e30:	00 97       	sbiw	r24, 0x00	; 0
    2e32:	31 f0       	breq	.+12     	; 0x2e40 <LCD_u8GoToXY+0x3a>
    2e34:	2c 81       	ldd	r18, Y+4	; 0x04
    2e36:	3d 81       	ldd	r19, Y+5	; 0x05
    2e38:	21 30       	cpi	r18, 0x01	; 1
    2e3a:	31 05       	cpc	r19, r1
    2e3c:	31 f0       	breq	.+12     	; 0x2e4a <LCD_u8GoToXY+0x44>
    2e3e:	0a c0       	rjmp	.+20     	; 0x2e54 <LCD_u8GoToXY+0x4e>
		{
		case LCD_u8_LINE1:
			LCD_voidSendCmnd(0x80 + Copy_u8location);
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	80 58       	subi	r24, 0x80	; 128
    2e44:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_voidSendCmnd>
    2e48:	0a c0       	rjmp	.+20     	; 0x2e5e <LCD_u8GoToXY+0x58>
			break;
		case LCD_u8_LINE2:
			LCD_voidSendCmnd(0xC0 + Copy_u8location);
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	80 54       	subi	r24, 0x40	; 64
    2e4e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_voidSendCmnd>
    2e52:	05 c0       	rjmp	.+10     	; 0x2e5e <LCD_u8GoToXY+0x58>
			break;
		default:
			local_u8Errorstate = STD_TYPES_OK;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	89 83       	std	Y+1, r24	; 0x01
    2e58:	02 c0       	rjmp	.+4      	; 0x2e5e <LCD_u8GoToXY+0x58>
		}
	}
	else
	{
		local_u8Errorstate = STD_TYPES_OK;
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8Errorstate;
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	cf 91       	pop	r28
    2e6c:	df 91       	pop	r29
    2e6e:	08 95       	ret

00002e70 <LCD_voidClearScreen>:
void LCD_voidClearScreen()
{
    2e70:	df 93       	push	r29
    2e72:	cf 93       	push	r28
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	2e 97       	sbiw	r28, 0x0e	; 14
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0x01);
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_voidSendCmnd>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	a0 e0       	ldi	r26, 0x00	; 0
    2e90:	b0 e4       	ldi	r27, 0x40	; 64
    2e92:	8b 87       	std	Y+11, r24	; 0x0b
    2e94:	9c 87       	std	Y+12, r25	; 0x0c
    2e96:	ad 87       	std	Y+13, r26	; 0x0d
    2e98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	4a e7       	ldi	r20, 0x7A	; 122
    2ea8:	53 e4       	ldi	r21, 0x43	; 67
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	8f 83       	std	Y+7, r24	; 0x07
    2eb4:	98 87       	std	Y+8, r25	; 0x08
    2eb6:	a9 87       	std	Y+9, r26	; 0x09
    2eb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eba:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebc:	78 85       	ldd	r23, Y+8	; 0x08
    2ebe:	89 85       	ldd	r24, Y+9	; 0x09
    2ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e8       	ldi	r20, 0x80	; 128
    2ec8:	5f e3       	ldi	r21, 0x3F	; 63
    2eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ece:	88 23       	and	r24, r24
    2ed0:	2c f4       	brge	.+10     	; 0x2edc <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	3f c0       	rjmp	.+126    	; 0x2f5a <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2edc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ede:	78 85       	ldd	r23, Y+8	; 0x08
    2ee0:	89 85       	ldd	r24, Y+9	; 0x09
    2ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	3f ef       	ldi	r19, 0xFF	; 255
    2ee8:	4f e7       	ldi	r20, 0x7F	; 127
    2eea:	57 e4       	ldi	r21, 0x47	; 71
    2eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef0:	18 16       	cp	r1, r24
    2ef2:	4c f5       	brge	.+82     	; 0x2f46 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9e 83       	std	Y+6, r25	; 0x06
    2f1a:	8d 83       	std	Y+5, r24	; 0x05
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <LCD_voidClearScreen+0xcc>
    2f1e:	89 e1       	ldi	r24, 0x19	; 25
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	8b 83       	std	Y+3, r24	; 0x03
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <LCD_voidClearScreen+0xba>
    2f2e:	9c 83       	std	Y+4, r25	; 0x04
    2f30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f32:	8d 81       	ldd	r24, Y+5	; 0x05
    2f34:	9e 81       	ldd	r25, Y+6	; 0x06
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	9e 83       	std	Y+6, r25	; 0x06
    2f3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	69 f7       	brne	.-38     	; 0x2f1e <LCD_voidClearScreen+0xae>
    2f44:	14 c0       	rjmp	.+40     	; 0x2f6e <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f46:	6f 81       	ldd	r22, Y+7	; 0x07
    2f48:	78 85       	ldd	r23, Y+8	; 0x08
    2f4a:	89 85       	ldd	r24, Y+9	; 0x09
    2f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	8d 83       	std	Y+5, r24	; 0x05
    2f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5e:	9a 83       	std	Y+2, r25	; 0x02
    2f60:	89 83       	std	Y+1, r24	; 0x01
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	9a 81       	ldd	r25, Y+2	; 0x02
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <LCD_voidClearScreen+0xf6>
    2f6a:	9a 83       	std	Y+2, r25	; 0x02
    2f6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0x80);
    2f6e:	80 e8       	ldi	r24, 0x80	; 128
    2f70:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_voidSendCmnd>
}
    2f74:	2e 96       	adiw	r28, 0x0e	; 14
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	cf 91       	pop	r28
    2f82:	df 91       	pop	r29
    2f84:	08 95       	ret

00002f86 <LCD_voidSendString>:
void LCD_voidSendString(const char *str)
{
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	00 d0       	rcall	.+0      	; 0x2f8c <LCD_voidSendString+0x6>
    2f8c:	0f 92       	push	r0
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	9b 83       	std	Y+3, r25	; 0x03
    2f94:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2f96:	19 82       	std	Y+1, r1	; 0x01
    2f98:	0e c0       	rjmp	.+28     	; 0x2fb6 <LCD_voidSendString+0x30>
	while (str[i] != '\0')
	{
		LCD_voidSendChar(str[i]);
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	e2 0f       	add	r30, r18
    2fa8:	f3 1f       	adc	r31, r19
    2faa:	80 81       	ld	r24, Z
    2fac:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_voidSendChar>
		i++;
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	8f 5f       	subi	r24, 0xFF	; 255
    2fb4:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCmnd(0x80);
}
void LCD_voidSendString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	e2 0f       	add	r30, r18
    2fc4:	f3 1f       	adc	r31, r19
    2fc6:	80 81       	ld	r24, Z
    2fc8:	88 23       	and	r24, r24
    2fca:	39 f7       	brne	.-50     	; 0x2f9a <LCD_voidSendString+0x14>
	{
		LCD_voidSendChar(str[i]);
		i++;
	}
}
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <LCD_String_Position>:
void LCD_String_Position(char line, char pos, char *str)
{
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	2a 97       	sbiw	r28, 0x0a	; 10
    2fe2:	0f b6       	in	r0, 0x3f	; 63
    2fe4:	f8 94       	cli
    2fe6:	de bf       	out	0x3e, r29	; 62
    2fe8:	0f be       	out	0x3f, r0	; 63
    2fea:	cd bf       	out	0x3d, r28	; 61
    2fec:	8e 83       	std	Y+6, r24	; 0x06
    2fee:	6f 83       	std	Y+7, r22	; 0x07
    2ff0:	59 87       	std	Y+9, r21	; 0x09
    2ff2:	48 87       	std	Y+8, r20	; 0x08
    // Ensure the line and position values are within valid ranges
    if (line >= 0 && line <= 1 && pos >= 0 && pos <= 15)
    2ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff6:	82 30       	cpi	r24, 0x02	; 2
    2ff8:	08 f0       	brcs	.+2      	; 0x2ffc <LCD_String_Position+0x24>
    2ffa:	77 c0       	rjmp	.+238    	; 0x30ea <LCD_String_Position+0x112>
    2ffc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ffe:	80 31       	cpi	r24, 0x10	; 16
    3000:	08 f0       	brcs	.+2      	; 0x3004 <LCD_String_Position+0x2c>
    3002:	73 c0       	rjmp	.+230    	; 0x30ea <LCD_String_Position+0x112>
    {
        // Calculate the starting DDRAM address for the specified line and position
        u8 line_offset = (line == 0) ? 0x00 : 0x40;
    3004:	8e 81       	ldd	r24, Y+6	; 0x06
    3006:	88 23       	and	r24, r24
    3008:	11 f4       	brne	.+4      	; 0x300e <LCD_String_Position+0x36>
    300a:	1a 86       	std	Y+10, r1	; 0x0a
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <LCD_String_Position+0x3a>
    300e:	80 e4       	ldi	r24, 0x40	; 64
    3010:	8a 87       	std	Y+10, r24	; 0x0a
    3012:	8a 85       	ldd	r24, Y+10	; 0x0a
    3014:	8d 83       	std	Y+5, r24	; 0x05
        u8 ddr_addr = (pos & 0x0F) | line_offset | 0x80;
    3016:	8f 81       	ldd	r24, Y+7	; 0x07
    3018:	98 2f       	mov	r25, r24
    301a:	9f 70       	andi	r25, 0x0F	; 15
    301c:	8d 81       	ldd	r24, Y+5	; 0x05
    301e:	89 2b       	or	r24, r25
    3020:	80 68       	ori	r24, 0x80	; 128
    3022:	8c 83       	std	Y+4, r24	; 0x04

        // Set the DDRAM address to move the cursor to the desired position
        LCD_voidSendCmnd(ddr_addr);
    3024:	8c 81       	ldd	r24, Y+4	; 0x04
    3026:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_voidSendCmnd>

        // Internal counter to keep track of characters printed
        u8 counter = 0;
    302a:	1b 82       	std	Y+3, r1	; 0x03
		
        // Print the string until null terminator is encountered or the line is full
        for (u8 i = 0; str[i] != '\0' && counter < 16; i++)
    302c:	1a 82       	std	Y+2, r1	; 0x02
    302e:	11 c0       	rjmp	.+34     	; 0x3052 <LCD_String_Position+0x7a>
        {
            LCD_voidSendChar(str[i]);
    3030:	8a 81       	ldd	r24, Y+2	; 0x02
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	88 85       	ldd	r24, Y+8	; 0x08
    3038:	99 85       	ldd	r25, Y+9	; 0x09
    303a:	fc 01       	movw	r30, r24
    303c:	e2 0f       	add	r30, r18
    303e:	f3 1f       	adc	r31, r19
    3040:	80 81       	ld	r24, Z
    3042:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_voidSendChar>
            counter++; // Increment the internal counter for each character printed
    3046:	8b 81       	ldd	r24, Y+3	; 0x03
    3048:	8f 5f       	subi	r24, 0xFF	; 255
    304a:	8b 83       	std	Y+3, r24	; 0x03

        // Internal counter to keep track of characters printed
        u8 counter = 0;
		
        // Print the string until null terminator is encountered or the line is full
        for (u8 i = 0; str[i] != '\0' && counter < 16; i++)
    304c:	8a 81       	ldd	r24, Y+2	; 0x02
    304e:	8f 5f       	subi	r24, 0xFF	; 255
    3050:	8a 83       	std	Y+2, r24	; 0x02
    3052:	8a 81       	ldd	r24, Y+2	; 0x02
    3054:	28 2f       	mov	r18, r24
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	88 85       	ldd	r24, Y+8	; 0x08
    305a:	99 85       	ldd	r25, Y+9	; 0x09
    305c:	fc 01       	movw	r30, r24
    305e:	e2 0f       	add	r30, r18
    3060:	f3 1f       	adc	r31, r19
    3062:	80 81       	ld	r24, Z
    3064:	88 23       	and	r24, r24
    3066:	51 f0       	breq	.+20     	; 0x307c <LCD_String_Position+0xa4>
    3068:	8b 81       	ldd	r24, Y+3	; 0x03
    306a:	80 31       	cpi	r24, 0x10	; 16
    306c:	08 f3       	brcs	.-62     	; 0x3030 <LCD_String_Position+0x58>
    306e:	06 c0       	rjmp	.+12     	; 0x307c <LCD_String_Position+0xa4>
        }

        // If the string is shorter than 16 characters, pad the remaining characters with spaces
        while (counter < 16)
        {
            LCD_voidSendChar(' ');
    3070:	80 e2       	ldi	r24, 0x20	; 32
    3072:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_voidSendChar>
            counter++;
    3076:	8b 81       	ldd	r24, Y+3	; 0x03
    3078:	8f 5f       	subi	r24, 0xFF	; 255
    307a:	8b 83       	std	Y+3, r24	; 0x03
            LCD_voidSendChar(str[i]);
            counter++; // Increment the internal counter for each character printed
        }

        // If the string is shorter than 16 characters, pad the remaining characters with spaces
        while (counter < 16)
    307c:	8b 81       	ldd	r24, Y+3	; 0x03
    307e:	80 31       	cpi	r24, 0x10	; 16
    3080:	b8 f3       	brcs	.-18     	; 0x3070 <LCD_String_Position+0x98>
            LCD_voidSendChar(' ');
            counter++;
        }

        // Move to the second line if there are remaining characters to be displayed
        if (line == 0 && str[counter] != '\0')
    3082:	8e 81       	ldd	r24, Y+6	; 0x06
    3084:	88 23       	and	r24, r24
    3086:	89 f5       	brne	.+98     	; 0x30ea <LCD_String_Position+0x112>
    3088:	8b 81       	ldd	r24, Y+3	; 0x03
    308a:	28 2f       	mov	r18, r24
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	88 85       	ldd	r24, Y+8	; 0x08
    3090:	99 85       	ldd	r25, Y+9	; 0x09
    3092:	fc 01       	movw	r30, r24
    3094:	e2 0f       	add	r30, r18
    3096:	f3 1f       	adc	r31, r19
    3098:	80 81       	ld	r24, Z
    309a:	88 23       	and	r24, r24
    309c:	31 f1       	breq	.+76     	; 0x30ea <LCD_String_Position+0x112>
        {
            LCD_voidSendCmnd(0xC0); // Move the cursor to the beginning of the second line
    309e:	80 ec       	ldi	r24, 0xC0	; 192
    30a0:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_voidSendCmnd>
            counter = 0;
    30a4:	1b 82       	std	Y+3, r1	; 0x03

            // Print the rest of the string on the second line
            for (u8 i = 16; str[i] != '\0' && counter < 16; i++)
    30a6:	80 e1       	ldi	r24, 0x10	; 16
    30a8:	89 83       	std	Y+1, r24	; 0x01
    30aa:	11 c0       	rjmp	.+34     	; 0x30ce <LCD_String_Position+0xf6>
            {
                LCD_voidSendChar(str[i]);
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	28 2f       	mov	r18, r24
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	88 85       	ldd	r24, Y+8	; 0x08
    30b4:	99 85       	ldd	r25, Y+9	; 0x09
    30b6:	fc 01       	movw	r30, r24
    30b8:	e2 0f       	add	r30, r18
    30ba:	f3 1f       	adc	r31, r19
    30bc:	80 81       	ld	r24, Z
    30be:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_voidSendChar>
                counter++; // Increment the internal counter for each character printed on the second line
    30c2:	8b 81       	ldd	r24, Y+3	; 0x03
    30c4:	8f 5f       	subi	r24, 0xFF	; 255
    30c6:	8b 83       	std	Y+3, r24	; 0x03
        {
            LCD_voidSendCmnd(0xC0); // Move the cursor to the beginning of the second line
            counter = 0;

            // Print the rest of the string on the second line
            for (u8 i = 16; str[i] != '\0' && counter < 16; i++)
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	8f 5f       	subi	r24, 0xFF	; 255
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	88 85       	ldd	r24, Y+8	; 0x08
    30d6:	99 85       	ldd	r25, Y+9	; 0x09
    30d8:	fc 01       	movw	r30, r24
    30da:	e2 0f       	add	r30, r18
    30dc:	f3 1f       	adc	r31, r19
    30de:	80 81       	ld	r24, Z
    30e0:	88 23       	and	r24, r24
    30e2:	19 f0       	breq	.+6      	; 0x30ea <LCD_String_Position+0x112>
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	80 31       	cpi	r24, 0x10	; 16
    30e8:	08 f3       	brcs	.-62     	; 0x30ac <LCD_String_Position+0xd4>
                LCD_voidSendChar(str[i]);
                counter++; // Increment the internal counter for each character printed on the second line
            }
        }
    }
}
    30ea:	2a 96       	adiw	r28, 0x0a	; 10
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	de bf       	out	0x3e, r29	; 62
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <LCD_voidSendSpecialCharacters>:


void LCD_voidSendSpecialCharacters(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    30fc:	0f 93       	push	r16
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
    3106:	28 97       	sbiw	r28, 0x08	; 8
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	8b 83       	std	Y+3, r24	; 0x03
    3114:	7d 83       	std	Y+5, r23	; 0x05
    3116:	6c 83       	std	Y+4, r22	; 0x04
    3118:	4e 83       	std	Y+6, r20	; 0x06
    311a:	2f 83       	std	Y+7, r18	; 0x07
    311c:	08 87       	std	Y+8, r16	; 0x08
	LCD_voidSendCmnd(Copy_u8SpecialCharStartBit);
    311e:	88 85       	ldd	r24, Y+8	; 0x08
    3120:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <LCD_voidSendCmnd>
	for (int i = 0; i < 8; i++)
    3124:	1a 82       	std	Y+2, r1	; 0x02
    3126:	19 82       	std	Y+1, r1	; 0x01
    3128:	0f c0       	rjmp	.+30     	; 0x3148 <LCD_voidSendSpecialCharacters+0x4c>
	{
		LCD_voidSendChar(Copy_u8P_Ptr[i]);
    312a:	29 81       	ldd	r18, Y+1	; 0x01
    312c:	3a 81       	ldd	r19, Y+2	; 0x02
    312e:	8c 81       	ldd	r24, Y+4	; 0x04
    3130:	9d 81       	ldd	r25, Y+5	; 0x05
    3132:	fc 01       	movw	r30, r24
    3134:	e2 0f       	add	r30, r18
    3136:	f3 1f       	adc	r31, r19
    3138:	80 81       	ld	r24, Z
    313a:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_voidSendChar>


void LCD_voidSendSpecialCharacters(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_voidSendCmnd(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	9a 81       	ldd	r25, Y+2	; 0x02
    3142:	01 96       	adiw	r24, 0x01	; 1
    3144:	9a 83       	std	Y+2, r25	; 0x02
    3146:	89 83       	std	Y+1, r24	; 0x01
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	9a 81       	ldd	r25, Y+2	; 0x02
    314c:	88 30       	cpi	r24, 0x08	; 8
    314e:	91 05       	cpc	r25, r1
    3150:	64 f3       	brlt	.-40     	; 0x312a <LCD_voidSendSpecialCharacters+0x2e>
	{
		LCD_voidSendChar(Copy_u8P_Ptr[i]);
	}
	LCD_u8GoToXY(Copy_u8LineNum, Copy_u8Location);
    3152:	8e 81       	ldd	r24, Y+6	; 0x06
    3154:	6f 81       	ldd	r22, Y+7	; 0x07
    3156:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_u8GoToXY>
	LCD_voidSendChar(Copy_CharNum);
    315a:	8b 81       	ldd	r24, Y+3	; 0x03
    315c:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_voidSendChar>

	if (Copy_u8Location > 15)
    3160:	8f 81       	ldd	r24, Y+7	; 0x07
    3162:	80 31       	cpi	r24, 0x10	; 16
    3164:	48 f0       	brcs	.+18     	; 0x3178 <LCD_voidSendSpecialCharacters+0x7c>
	{
		LCD_voidClearScreen();
    3166:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_voidClearScreen>
		LCD_u8GoToXY(0, 0);
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	60 e0       	ldi	r22, 0x00	; 0
    316e:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_CharNum);
    3172:	8b 81       	ldd	r24, Y+3	; 0x03
    3174:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_voidSendChar>
	}
}
    3178:	28 96       	adiw	r28, 0x08	; 8
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	0f 91       	pop	r16
    318a:	08 95       	ret

0000318c <LCD_voidClearSecondLine>:
void LCD_voidClearSecondLine()
{
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	00 d0       	rcall	.+0      	; 0x3192 <LCD_voidClearSecondLine+0x6>
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
	LCD_u8GoToXY(LCD_u8_LINE2, 0); // Move cursor to the start of the second line
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	60 e0       	ldi	r22, 0x00	; 0
    319a:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_u8GoToXY>
	// Send a string of spaces to clear the second line
	for (int i = 0; i < 16; i++)
    319e:	1a 82       	std	Y+2, r1	; 0x02
    31a0:	19 82       	std	Y+1, r1	; 0x01
    31a2:	08 c0       	rjmp	.+16     	; 0x31b4 <LCD_voidClearSecondLine+0x28>
	{
		LCD_voidSendChar(' ');
    31a4:	80 e2       	ldi	r24, 0x20	; 32
    31a6:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_voidSendChar>
}
void LCD_voidClearSecondLine()
{
	LCD_u8GoToXY(LCD_u8_LINE2, 0); // Move cursor to the start of the second line
	// Send a string of spaces to clear the second line
	for (int i = 0; i < 16; i++)
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	9a 81       	ldd	r25, Y+2	; 0x02
    31ae:	01 96       	adiw	r24, 0x01	; 1
    31b0:	9a 83       	std	Y+2, r25	; 0x02
    31b2:	89 83       	std	Y+1, r24	; 0x01
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	80 31       	cpi	r24, 0x10	; 16
    31ba:	91 05       	cpc	r25, r1
    31bc:	9c f3       	brlt	.-26     	; 0x31a4 <LCD_voidClearSecondLine+0x18>
	{
		LCD_voidSendChar(' ');
	}
	LCD_u8GoToXY(LCD_u8_LINE2, 3); // Move cursor to the start of the second line
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	63 e0       	ldi	r22, 0x03	; 3
    31c2:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_u8GoToXY>
}
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	cf 91       	pop	r28
    31cc:	df 91       	pop	r29
    31ce:	08 95       	ret

000031d0 <App_void_ADC_CallBack>:
#include <util/delay.h>
static u16 App_u16_digitalValue = 0xffff;
static u16 App_u16_analogValue;
/***************************************************************************/
void App_void_ADC_CallBack(u16 Copy_u16ADCValue)
{
    31d0:	df 93       	push	r29
    31d2:	cf 93       	push	r28
    31d4:	00 d0       	rcall	.+0      	; 0x31d6 <App_void_ADC_CallBack+0x6>
    31d6:	cd b7       	in	r28, 0x3d	; 61
    31d8:	de b7       	in	r29, 0x3e	; 62
    31da:	9a 83       	std	Y+2, r25	; 0x02
    31dc:	89 83       	std	Y+1, r24	; 0x01
    ADC_u8GetADC_DigitalValue(&Copy_u16ADCValue);
    31de:	ce 01       	movw	r24, r28
    31e0:	01 96       	adiw	r24, 0x01	; 1
    31e2:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <ADC_u8GetADC_DigitalValue>
}
    31e6:	0f 90       	pop	r0
    31e8:	0f 90       	pop	r0
    31ea:	cf 91       	pop	r28
    31ec:	df 91       	pop	r29
    31ee:	08 95       	ret

000031f0 <main>:
/***************************************************************************/
int main()
{
    31f0:	df 93       	push	r29
    31f2:	cf 93       	push	r28
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	2e 97       	sbiw	r28, 0x0e	; 14
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    DIO_voidInit();
    3204:	0e 94 ac 08 	call	0x1158	; 0x1158 <DIO_voidInit>
    LCD_voideInit();
    3208:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_voideInit>
//    GI_voidEnable();
    ADC_VoidInit();
    320c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <ADC_VoidInit>
    while (1)
    {
        // LCD_voidSendString("Test0");
        ADC_u8GetDigitalValue_A_Synch(ADC_u8_Channel0, &App_void_ADC_CallBack);
    3210:	28 ee       	ldi	r18, 0xE8	; 232
    3212:	38 e1       	ldi	r19, 0x18	; 24
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	b9 01       	movw	r22, r18
    3218:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <ADC_u8GetDigitalValue_A_Synch>
        // LCD_voidSendString("Test1");
        // if (App_u16_digitalValue != 0xffff)
        // {
        App_u16_analogValue = (App_u16_digitalValue * 5000UL) / 1024;
    321c:	80 91 68 00 	lds	r24, 0x0068
    3220:	90 91 69 00 	lds	r25, 0x0069
    3224:	cc 01       	movw	r24, r24
    3226:	a0 e0       	ldi	r26, 0x00	; 0
    3228:	b0 e0       	ldi	r27, 0x00	; 0
    322a:	28 e8       	ldi	r18, 0x88	; 136
    322c:	33 e1       	ldi	r19, 0x13	; 19
    322e:	40 e0       	ldi	r20, 0x00	; 0
    3230:	50 e0       	ldi	r21, 0x00	; 0
    3232:	bc 01       	movw	r22, r24
    3234:	cd 01       	movw	r24, r26
    3236:	0e 94 a7 19 	call	0x334e	; 0x334e <__mulsi3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	07 2e       	mov	r0, r23
    3240:	7a e0       	ldi	r23, 0x0A	; 10
    3242:	b6 95       	lsr	r27
    3244:	a7 95       	ror	r26
    3246:	97 95       	ror	r25
    3248:	87 95       	ror	r24
    324a:	7a 95       	dec	r23
    324c:	d1 f7       	brne	.-12     	; 0x3242 <main+0x52>
    324e:	70 2d       	mov	r23, r0
    3250:	90 93 8c 00 	sts	0x008C, r25
    3254:	80 93 8b 00 	sts	0x008B, r24
        LCD_voidClearScreen();
    3258:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_voidClearScreen>
        LCD_voidSendString(App_u16_analogValue);
    325c:	80 91 8b 00 	lds	r24, 0x008B
    3260:	90 91 8c 00 	lds	r25, 0x008C
    3264:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_voidSendString>
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	a8 ec       	ldi	r26, 0xC8	; 200
    326e:	b2 e4       	ldi	r27, 0x42	; 66
    3270:	8b 87       	std	Y+11, r24	; 0x0b
    3272:	9c 87       	std	Y+12, r25	; 0x0c
    3274:	ad 87       	std	Y+13, r26	; 0x0d
    3276:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3278:	6b 85       	ldd	r22, Y+11	; 0x0b
    327a:	7c 85       	ldd	r23, Y+12	; 0x0c
    327c:	8d 85       	ldd	r24, Y+13	; 0x0d
    327e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	4a e7       	ldi	r20, 0x7A	; 122
    3286:	53 e4       	ldi	r21, 0x43	; 67
    3288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	8f 83       	std	Y+7, r24	; 0x07
    3292:	98 87       	std	Y+8, r25	; 0x08
    3294:	a9 87       	std	Y+9, r26	; 0x09
    3296:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3298:	6f 81       	ldd	r22, Y+7	; 0x07
    329a:	78 85       	ldd	r23, Y+8	; 0x08
    329c:	89 85       	ldd	r24, Y+9	; 0x09
    329e:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	40 e8       	ldi	r20, 0x80	; 128
    32a6:	5f e3       	ldi	r21, 0x3F	; 63
    32a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ac:	88 23       	and	r24, r24
    32ae:	2c f4       	brge	.+10     	; 0x32ba <main+0xca>
		__ticks = 1;
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	9e 83       	std	Y+6, r25	; 0x06
    32b6:	8d 83       	std	Y+5, r24	; 0x05
    32b8:	3f c0       	rjmp	.+126    	; 0x3338 <main+0x148>
	else if (__tmp > 65535)
    32ba:	6f 81       	ldd	r22, Y+7	; 0x07
    32bc:	78 85       	ldd	r23, Y+8	; 0x08
    32be:	89 85       	ldd	r24, Y+9	; 0x09
    32c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	3f ef       	ldi	r19, 0xFF	; 255
    32c6:	4f e7       	ldi	r20, 0x7F	; 127
    32c8:	57 e4       	ldi	r21, 0x47	; 71
    32ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32ce:	18 16       	cp	r1, r24
    32d0:	4c f5       	brge	.+82     	; 0x3324 <main+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	40 e2       	ldi	r20, 0x20	; 32
    32e0:	51 e4       	ldi	r21, 0x41	; 65
    32e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	bc 01       	movw	r22, r24
    32ec:	cd 01       	movw	r24, r26
    32ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	9e 83       	std	Y+6, r25	; 0x06
    32f8:	8d 83       	std	Y+5, r24	; 0x05
    32fa:	0f c0       	rjmp	.+30     	; 0x331a <main+0x12a>
    32fc:	89 e1       	ldi	r24, 0x19	; 25
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	9c 83       	std	Y+4, r25	; 0x04
    3302:	8b 83       	std	Y+3, r24	; 0x03
    3304:	8b 81       	ldd	r24, Y+3	; 0x03
    3306:	9c 81       	ldd	r25, Y+4	; 0x04
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	f1 f7       	brne	.-4      	; 0x3308 <main+0x118>
    330c:	9c 83       	std	Y+4, r25	; 0x04
    330e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3310:	8d 81       	ldd	r24, Y+5	; 0x05
    3312:	9e 81       	ldd	r25, Y+6	; 0x06
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	9e 83       	std	Y+6, r25	; 0x06
    3318:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331a:	8d 81       	ldd	r24, Y+5	; 0x05
    331c:	9e 81       	ldd	r25, Y+6	; 0x06
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	69 f7       	brne	.-38     	; 0x32fc <main+0x10c>
    3322:	76 cf       	rjmp	.-276    	; 0x3210 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3324:	6f 81       	ldd	r22, Y+7	; 0x07
    3326:	78 85       	ldd	r23, Y+8	; 0x08
    3328:	89 85       	ldd	r24, Y+9	; 0x09
    332a:	9a 85       	ldd	r25, Y+10	; 0x0a
    332c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	9e 83       	std	Y+6, r25	; 0x06
    3336:	8d 83       	std	Y+5, r24	; 0x05
    3338:	8d 81       	ldd	r24, Y+5	; 0x05
    333a:	9e 81       	ldd	r25, Y+6	; 0x06
    333c:	9a 83       	std	Y+2, r25	; 0x02
    333e:	89 83       	std	Y+1, r24	; 0x01
    3340:	89 81       	ldd	r24, Y+1	; 0x01
    3342:	9a 81       	ldd	r25, Y+2	; 0x02
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <main+0x154>
    3348:	9a 83       	std	Y+2, r25	; 0x02
    334a:	89 83       	std	Y+1, r24	; 0x01
    334c:	61 cf       	rjmp	.-318    	; 0x3210 <main+0x20>

0000334e <__mulsi3>:
    334e:	62 9f       	mul	r22, r18
    3350:	d0 01       	movw	r26, r0
    3352:	73 9f       	mul	r23, r19
    3354:	f0 01       	movw	r30, r0
    3356:	82 9f       	mul	r24, r18
    3358:	e0 0d       	add	r30, r0
    335a:	f1 1d       	adc	r31, r1
    335c:	64 9f       	mul	r22, r20
    335e:	e0 0d       	add	r30, r0
    3360:	f1 1d       	adc	r31, r1
    3362:	92 9f       	mul	r25, r18
    3364:	f0 0d       	add	r31, r0
    3366:	83 9f       	mul	r24, r19
    3368:	f0 0d       	add	r31, r0
    336a:	74 9f       	mul	r23, r20
    336c:	f0 0d       	add	r31, r0
    336e:	65 9f       	mul	r22, r21
    3370:	f0 0d       	add	r31, r0
    3372:	99 27       	eor	r25, r25
    3374:	72 9f       	mul	r23, r18
    3376:	b0 0d       	add	r27, r0
    3378:	e1 1d       	adc	r30, r1
    337a:	f9 1f       	adc	r31, r25
    337c:	63 9f       	mul	r22, r19
    337e:	b0 0d       	add	r27, r0
    3380:	e1 1d       	adc	r30, r1
    3382:	f9 1f       	adc	r31, r25
    3384:	bd 01       	movw	r22, r26
    3386:	cf 01       	movw	r24, r30
    3388:	11 24       	eor	r1, r1
    338a:	08 95       	ret

0000338c <__udivmodhi4>:
    338c:	aa 1b       	sub	r26, r26
    338e:	bb 1b       	sub	r27, r27
    3390:	51 e1       	ldi	r21, 0x11	; 17
    3392:	07 c0       	rjmp	.+14     	; 0x33a2 <__udivmodhi4_ep>

00003394 <__udivmodhi4_loop>:
    3394:	aa 1f       	adc	r26, r26
    3396:	bb 1f       	adc	r27, r27
    3398:	a6 17       	cp	r26, r22
    339a:	b7 07       	cpc	r27, r23
    339c:	10 f0       	brcs	.+4      	; 0x33a2 <__udivmodhi4_ep>
    339e:	a6 1b       	sub	r26, r22
    33a0:	b7 0b       	sbc	r27, r23

000033a2 <__udivmodhi4_ep>:
    33a2:	88 1f       	adc	r24, r24
    33a4:	99 1f       	adc	r25, r25
    33a6:	5a 95       	dec	r21
    33a8:	a9 f7       	brne	.-22     	; 0x3394 <__udivmodhi4_loop>
    33aa:	80 95       	com	r24
    33ac:	90 95       	com	r25
    33ae:	bc 01       	movw	r22, r24
    33b0:	cd 01       	movw	r24, r26
    33b2:	08 95       	ret

000033b4 <__prologue_saves__>:
    33b4:	2f 92       	push	r2
    33b6:	3f 92       	push	r3
    33b8:	4f 92       	push	r4
    33ba:	5f 92       	push	r5
    33bc:	6f 92       	push	r6
    33be:	7f 92       	push	r7
    33c0:	8f 92       	push	r8
    33c2:	9f 92       	push	r9
    33c4:	af 92       	push	r10
    33c6:	bf 92       	push	r11
    33c8:	cf 92       	push	r12
    33ca:	df 92       	push	r13
    33cc:	ef 92       	push	r14
    33ce:	ff 92       	push	r15
    33d0:	0f 93       	push	r16
    33d2:	1f 93       	push	r17
    33d4:	cf 93       	push	r28
    33d6:	df 93       	push	r29
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	ca 1b       	sub	r28, r26
    33de:	db 0b       	sbc	r29, r27
    33e0:	0f b6       	in	r0, 0x3f	; 63
    33e2:	f8 94       	cli
    33e4:	de bf       	out	0x3e, r29	; 62
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	cd bf       	out	0x3d, r28	; 61
    33ea:	09 94       	ijmp

000033ec <__epilogue_restores__>:
    33ec:	2a 88       	ldd	r2, Y+18	; 0x12
    33ee:	39 88       	ldd	r3, Y+17	; 0x11
    33f0:	48 88       	ldd	r4, Y+16	; 0x10
    33f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    33f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    33f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    33f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    33fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    33fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    33fe:	b9 84       	ldd	r11, Y+9	; 0x09
    3400:	c8 84       	ldd	r12, Y+8	; 0x08
    3402:	df 80       	ldd	r13, Y+7	; 0x07
    3404:	ee 80       	ldd	r14, Y+6	; 0x06
    3406:	fd 80       	ldd	r15, Y+5	; 0x05
    3408:	0c 81       	ldd	r16, Y+4	; 0x04
    340a:	1b 81       	ldd	r17, Y+3	; 0x03
    340c:	aa 81       	ldd	r26, Y+2	; 0x02
    340e:	b9 81       	ldd	r27, Y+1	; 0x01
    3410:	ce 0f       	add	r28, r30
    3412:	d1 1d       	adc	r29, r1
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	f8 94       	cli
    3418:	de bf       	out	0x3e, r29	; 62
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	cd bf       	out	0x3d, r28	; 61
    341e:	ed 01       	movw	r28, r26
    3420:	08 95       	ret

00003422 <_exit>:
    3422:	f8 94       	cli

00003424 <__stop_program>:
    3424:	ff cf       	rjmp	.-2      	; 0x3424 <__stop_program>
