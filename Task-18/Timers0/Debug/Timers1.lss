
Timers1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000036ee  00003782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800080  00800080  000037a2  2**0
                  ALLOC
  3 .stab         000038f4  00000000  00000000  000037a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014b3  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000854b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000086ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000883a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a87f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c904  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ca84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000cd46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d5d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__vector_10>
      2c:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 80 1a 	call	0x3500	; 0x3500 <main>
      8a:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 46 1b 	jmp	0x368c	; 0x368c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 62 1b 	jmp	0x36c4	; 0x36c4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Timers_voidTimer0Init>:
#include "Timer_interface.h"
/* Global Pointer to Function of Timer0 OVF*/
static void (*Timers_pfTimer0OVF)(void) = NULL;
static void (*Timers_pfTimer0CTC)(void) = NULL;
void Timers_voidTimer0Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMERS_u8_TIMSK_REG, 1);
    /* Compare Match Unit Value */
    TIMERS_u8_OCR0_REG = Compare_Match_Value;

#elif Timer0_mode == FAST_PWM_mode
    SET_BIT(TIMERS_u8_TCCR0_REG, 6);
     ca6:	a3 e5       	ldi	r26, 0x53	; 83
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e3 e5       	ldi	r30, 0x53	; 83
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
    SET_BIT(TIMERS_u8_TCCR0_REG, 3);
     cb4:	a3 e5       	ldi	r26, 0x53	; 83
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e3 e5       	ldi	r30, 0x53	; 83
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	8c 93       	st	X, r24
#if inverting_mode == Fast_PWM_inverting
    SET_BIT(TIMERS_u8_TCCR0_REG, 4);
    SET_BIT(TIMERS_u8_TCCR0_REG, 5);
#elif inverting_mode == Fast_PWM_NON_inverting
    CLR_BIT(TIMERS_u8_TCCR0_REG, 4);
     cc2:	a3 e5       	ldi	r26, 0x53	; 83
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e3 e5       	ldi	r30, 0x53	; 83
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7e       	andi	r24, 0xEF	; 239
     cce:	8c 93       	st	X, r24
    SET_BIT(TIMERS_u8_TCCR0_REG, 5);
     cd0:	a3 e5       	ldi	r26, 0x53	; 83
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e3 e5       	ldi	r30, 0x53	; 83
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 62       	ori	r24, 0x20	; 32
     cdc:	8c 93       	st	X, r24
#endif
#endif
    /* Set PreScaler Value */
    TIMERS_u8_TCCR0_REG |= Timer0_Prescaler_Value;
     cde:	a3 e5       	ldi	r26, 0x53	; 83
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e3 e5       	ldi	r30, 0x53	; 83
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	82 60       	ori	r24, 0x02	; 2
     cea:	8c 93       	st	X, r24
}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <Timers_voidTimer0SetCompareMatchValue>:

void Timers_voidTimer0SetCompareMatchValue(u8 Copy_u8OCR0Value)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	0f 92       	push	r0
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	89 83       	std	Y+1, r24	; 0x01
    TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
     cfe:	ec e5       	ldi	r30, 0x5C	; 92
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	80 83       	st	Z, r24
}
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <Timers_u8Timer0SetCallBack>:

u8 Timers_u8Timer0SetCallBack(void (*copy_pf)(void))
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <Timers_u8Timer0SetCallBack+0x6>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	89 83       	std	Y+1, r24	; 0x01
    if (copy_pf != NULL)
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	49 f0       	breq	.+18     	; 0xd38 <Timers_u8Timer0SetCallBack+0x2a>
    {
        Timers_pfTimer0OVF = copy_pf;
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	9a 81       	ldd	r25, Y+2	; 0x02
     d2a:	90 93 81 00 	sts	0x0081, r25
     d2e:	80 93 80 00 	sts	0x0080, r24
        return STD_TYPES_OK;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	8b 83       	std	Y+3, r24	; 0x03
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <Timers_u8Timer0SetCallBack+0x2c>
    }
    return STD_TYPES_NOK;
     d38:	1b 82       	std	Y+3, r1	; 0x03
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <Timers_u8Timer0CTCSetCallBack>:

u8 Timers_u8Timer0CTCSetCallBack(void (*copy_pf)(void))
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <Timers_u8Timer0CTCSetCallBack+0x6>
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
    if (copy_pf != NULL)
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	49 f0       	breq	.+18     	; 0xd72 <Timers_u8Timer0CTCSetCallBack+0x2a>
    {
        Timers_pfTimer0CTC = copy_pf;
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	90 93 83 00 	sts	0x0083, r25
     d68:	80 93 82 00 	sts	0x0082, r24
        return STD_TYPES_OK;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	8b 83       	std	Y+3, r24	; 0x03
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <Timers_u8Timer0CTCSetCallBack+0x2c>
    }
    return STD_TYPES_NOK;
     d72:	1b 82       	std	Y+3, r1	; 0x03
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <__vector_11>:
/* Prototype for ISR of Timer0 OVF*/
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
    static u16 Local_u16CouterOVF = 0;
    Local_u16CouterOVF++;
     dac:	80 91 84 00 	lds	r24, 0x0084
     db0:	90 91 85 00 	lds	r25, 0x0085
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	90 93 85 00 	sts	0x0085, r25
     dba:	80 93 84 00 	sts	0x0084, r24
    if (Local_u16CouterOVF == 3907)
     dbe:	80 91 84 00 	lds	r24, 0x0084
     dc2:	90 91 85 00 	lds	r25, 0x0085
     dc6:	2f e0       	ldi	r18, 0x0F	; 15
     dc8:	83 34       	cpi	r24, 0x43	; 67
     dca:	92 07       	cpc	r25, r18
     dcc:	99 f4       	brne	.+38     	; 0xdf4 <__vector_11+0x72>
    {
        /* Update PreLoadValue */
        TIMERS_u8_TCNT0_REG = Preload_Value;
     dce:	e2 e5       	ldi	r30, 0x52	; 82
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 ec       	ldi	r24, 0xC0	; 192
     dd4:	80 83       	st	Z, r24
        /* clear the counter */
        Local_u16CouterOVF = 0;
     dd6:	10 92 85 00 	sts	0x0085, r1
     dda:	10 92 84 00 	sts	0x0084, r1
        /* Call Application Function*/
        if (Timers_pfTimer0OVF != NULL)
     dde:	80 91 80 00 	lds	r24, 0x0080
     de2:	90 91 81 00 	lds	r25, 0x0081
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	29 f0       	breq	.+10     	; 0xdf4 <__vector_11+0x72>
        {
            Timers_pfTimer0OVF();
     dea:	e0 91 80 00 	lds	r30, 0x0080
     dee:	f0 91 81 00 	lds	r31, 0x0081
     df2:	09 95       	icall
        }
    }
}
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	ff 91       	pop	r31
     dfa:	ef 91       	pop	r30
     dfc:	bf 91       	pop	r27
     dfe:	af 91       	pop	r26
     e00:	9f 91       	pop	r25
     e02:	8f 91       	pop	r24
     e04:	7f 91       	pop	r23
     e06:	6f 91       	pop	r22
     e08:	5f 91       	pop	r21
     e0a:	4f 91       	pop	r20
     e0c:	3f 91       	pop	r19
     e0e:	2f 91       	pop	r18
     e10:	0f 90       	pop	r0
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	0f 90       	pop	r0
     e16:	1f 90       	pop	r1
     e18:	18 95       	reti

00000e1a <__vector_10>:
/* Prototype for ISR of Timer0 CTC */
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	2f 93       	push	r18
     e26:	3f 93       	push	r19
     e28:	4f 93       	push	r20
     e2a:	5f 93       	push	r21
     e2c:	6f 93       	push	r22
     e2e:	7f 93       	push	r23
     e30:	8f 93       	push	r24
     e32:	9f 93       	push	r25
     e34:	af 93       	push	r26
     e36:	bf 93       	push	r27
     e38:	ef 93       	push	r30
     e3a:	ff 93       	push	r31
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
        {
            Timers_pfTimer0CTC();
        }
    }
#else
    if (Timers_pfTimer0CTC != NULL)
     e44:	80 91 82 00 	lds	r24, 0x0082
     e48:	90 91 83 00 	lds	r25, 0x0083
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	29 f0       	breq	.+10     	; 0xe5a <__vector_10+0x40>
    {
        Timers_pfTimer0CTC();
     e50:	e0 91 82 00 	lds	r30, 0x0082
     e54:	f0 91 83 00 	lds	r31, 0x0083
     e58:	09 95       	icall
    }
#endif
}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <GI_voidEnable>:
#include "GI_config.h"
#include "GI_private.h"
#include "GI_interface.h"

void GI_voidEnable(void)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, GI_Bit);
     e88:	af e5       	ldi	r26, 0x5F	; 95
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ef e5       	ldi	r30, 0x5F	; 95
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 68       	ori	r24, 0x80	; 128
     e94:	8c 93       	st	X, r24
}
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <GI_voidDisable>:
void GI_voidDisable(void)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG, GI_Bit);
     ea4:	af e5       	ldi	r26, 0x5F	; 95
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	ef e5       	ldi	r30, 0x5F	; 95
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8f 77       	andi	r24, 0x7F	; 127
     eb0:	8c 93       	st	X, r24
}
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <EXTI_voidEnable>:
//     CLR_BIT(EXTI_u8_MCUCR, ISC10);
//     /* 2- Enable EXTI0 ==> PIE*/
//     SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
// }
u8 EXTI_voidEnable(u8 Copy_u8EXTIIndex, u8 Copy_u8EdgeIndex)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	2b 97       	sbiw	r28, 0x0b	; 11
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	8a 83       	std	Y+2, r24	; 0x02
     ece:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8EXTIIndex)
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	3b 87       	std	Y+11, r19	; 0x0b
     edc:	2a 87       	std	Y+10, r18	; 0x0a
     ede:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	91 05       	cpc	r25, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <EXTI_voidEnable+0x32>
     ee8:	85 c0       	rjmp	.+266    	; 0xff4 <EXTI_voidEnable+0x13c>
     eea:	2a 85       	ldd	r18, Y+10	; 0x0a
     eec:	3b 85       	ldd	r19, Y+11	; 0x0b
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <EXTI_voidEnable+0x3e>
     ef4:	f9 c0       	rjmp	.+498    	; 0x10e8 <EXTI_voidEnable+0x230>
     ef6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef8:	9b 85       	ldd	r25, Y+11	; 0x0b
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	09 f0       	breq	.+2      	; 0xf00 <EXTI_voidEnable+0x48>
     efe:	1b c1       	rjmp	.+566    	; 0x1136 <EXTI_voidEnable+0x27e>
    {
    case EXTI_u8_IN0:
        switch (Copy_u8EdgeIndex)
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	39 87       	std	Y+9, r19	; 0x09
     f08:	28 87       	std	Y+8, r18	; 0x08
     f0a:	88 85       	ldd	r24, Y+8	; 0x08
     f0c:	99 85       	ldd	r25, Y+9	; 0x09
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	61 f1       	breq	.+88     	; 0xf6c <EXTI_voidEnable+0xb4>
     f14:	28 85       	ldd	r18, Y+8	; 0x08
     f16:	39 85       	ldd	r19, Y+9	; 0x09
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	2c f4       	brge	.+10     	; 0xf28 <EXTI_voidEnable+0x70>
     f1e:	88 85       	ldd	r24, Y+8	; 0x08
     f20:	99 85       	ldd	r25, Y+9	; 0x09
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	69 f0       	breq	.+26     	; 0xf40 <EXTI_voidEnable+0x88>
     f26:	64 c0       	rjmp	.+200    	; 0xff0 <EXTI_voidEnable+0x138>
     f28:	28 85       	ldd	r18, Y+8	; 0x08
     f2a:	39 85       	ldd	r19, Y+9	; 0x09
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	99 f1       	breq	.+102    	; 0xf98 <EXTI_voidEnable+0xe0>
     f32:	88 85       	ldd	r24, Y+8	; 0x08
     f34:	99 85       	ldd	r25, Y+9	; 0x09
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	91 05       	cpc	r25, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <EXTI_voidEnable+0x86>
     f3c:	43 c0       	rjmp	.+134    	; 0xfc4 <EXTI_voidEnable+0x10c>
     f3e:	58 c0       	rjmp	.+176    	; 0xff0 <EXTI_voidEnable+0x138>
        {
        case EXTI_u8_RAISING_EDGE:
            SET_BIT(EXTI_u8_MCUCR, 1);
     f40:	a5 e5       	ldi	r26, 0x55	; 85
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e5 e5       	ldi	r30, 0x55	; 85
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	82 60       	ori	r24, 0x02	; 2
     f4c:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR, 0);
     f4e:	a5 e5       	ldi	r26, 0x55	; 85
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e5 e5       	ldi	r30, 0x55	; 85
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	81 60       	ori	r24, 0x01	; 1
     f5a:	8c 93       	st	X, r24
            /* Enable EXTI0 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     f5c:	ab e5       	ldi	r26, 0x5B	; 91
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	eb e5       	ldi	r30, 0x5B	; 91
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	80 64       	ori	r24, 0x40	; 64
     f68:	8c 93       	st	X, r24
     f6a:	e5 c0       	rjmp	.+458    	; 0x1136 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_FLOATING_EDGE:
            SET_BIT(EXTI_u8_MCUCR, 1);
     f6c:	a5 e5       	ldi	r26, 0x55	; 85
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e5 e5       	ldi	r30, 0x55	; 85
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	82 60       	ori	r24, 0x02	; 2
     f78:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR, 0);
     f7a:	a5 e5       	ldi	r26, 0x55	; 85
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e5 e5       	ldi	r30, 0x55	; 85
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8e 7f       	andi	r24, 0xFE	; 254
     f86:	8c 93       	st	X, r24
            /* Enable EXTI0 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     f88:	ab e5       	ldi	r26, 0x5B	; 91
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	eb e5       	ldi	r30, 0x5B	; 91
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	80 64       	ori	r24, 0x40	; 64
     f94:	8c 93       	st	X, r24
     f96:	cf c0       	rjmp	.+414    	; 0x1136 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_ANY_LOGICAL_CHANGE:
            CLR_BIT(EXTI_u8_MCUCR, 1);
     f98:	a5 e5       	ldi	r26, 0x55	; 85
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e5 e5       	ldi	r30, 0x55	; 85
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8d 7f       	andi	r24, 0xFD	; 253
     fa4:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR, 0);
     fa6:	a5 e5       	ldi	r26, 0x55	; 85
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e5 e5       	ldi	r30, 0x55	; 85
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	81 60       	ori	r24, 0x01	; 1
     fb2:	8c 93       	st	X, r24
            /* Enable EXTI0 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     fb4:	ab e5       	ldi	r26, 0x5B	; 91
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	eb e5       	ldi	r30, 0x5B	; 91
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	80 64       	ori	r24, 0x40	; 64
     fc0:	8c 93       	st	X, r24
     fc2:	b9 c0       	rjmp	.+370    	; 0x1136 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_LOW_LEVEL:
            CLR_BIT(EXTI_u8_MCUCR, 1);
     fc4:	a5 e5       	ldi	r26, 0x55	; 85
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e5       	ldi	r30, 0x55	; 85
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8d 7f       	andi	r24, 0xFD	; 253
     fd0:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR, 0);
     fd2:	a5 e5       	ldi	r26, 0x55	; 85
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e5 e5       	ldi	r30, 0x55	; 85
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8e 7f       	andi	r24, 0xFE	; 254
     fde:	8c 93       	st	X, r24
            /* Enable EXTI0 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
     fe0:	ab e5       	ldi	r26, 0x5B	; 91
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	eb e5       	ldi	r30, 0x5B	; 91
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	80 64       	ori	r24, 0x40	; 64
     fec:	8c 93       	st	X, r24
     fee:	a3 c0       	rjmp	.+326    	; 0x1136 <EXTI_voidEnable+0x27e>
            break;
        default:
            Local_u8ErrorState = STD_TYPES_NOK;
     ff0:	19 82       	std	Y+1, r1	; 0x01
     ff2:	a1 c0       	rjmp	.+322    	; 0x1136 <EXTI_voidEnable+0x27e>
            break;
        }
        break;
    /*****************************************************************/
    case EXTI_u8_IN1:
        switch (Copy_u8EdgeIndex)
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3f 83       	std	Y+7, r19	; 0x07
     ffc:	2e 83       	std	Y+6, r18	; 0x06
     ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    1000:	9f 81       	ldd	r25, Y+7	; 0x07
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	91 05       	cpc	r25, r1
    1006:	61 f1       	breq	.+88     	; 0x1060 <EXTI_voidEnable+0x1a8>
    1008:	2e 81       	ldd	r18, Y+6	; 0x06
    100a:	3f 81       	ldd	r19, Y+7	; 0x07
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	2c f4       	brge	.+10     	; 0x101c <EXTI_voidEnable+0x164>
    1012:	8e 81       	ldd	r24, Y+6	; 0x06
    1014:	9f 81       	ldd	r25, Y+7	; 0x07
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	69 f0       	breq	.+26     	; 0x1034 <EXTI_voidEnable+0x17c>
    101a:	64 c0       	rjmp	.+200    	; 0x10e4 <EXTI_voidEnable+0x22c>
    101c:	2e 81       	ldd	r18, Y+6	; 0x06
    101e:	3f 81       	ldd	r19, Y+7	; 0x07
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	99 f1       	breq	.+102    	; 0x108c <EXTI_voidEnable+0x1d4>
    1026:	8e 81       	ldd	r24, Y+6	; 0x06
    1028:	9f 81       	ldd	r25, Y+7	; 0x07
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	91 05       	cpc	r25, r1
    102e:	09 f4       	brne	.+2      	; 0x1032 <EXTI_voidEnable+0x17a>
    1030:	43 c0       	rjmp	.+134    	; 0x10b8 <EXTI_voidEnable+0x200>
    1032:	58 c0       	rjmp	.+176    	; 0x10e4 <EXTI_voidEnable+0x22c>
        {
        case EXTI_u8_RAISING_EDGE:
            SET_BIT(EXTI_u8_MCUCR, 3);
    1034:	a5 e5       	ldi	r26, 0x55	; 85
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e5 e5       	ldi	r30, 0x55	; 85
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	88 60       	ori	r24, 0x08	; 8
    1040:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR, 2);
    1042:	a5 e5       	ldi	r26, 0x55	; 85
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e5 e5       	ldi	r30, 0x55	; 85
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	84 60       	ori	r24, 0x04	; 4
    104e:	8c 93       	st	X, r24
            /* Enable EXTI1 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
    1050:	ab e5       	ldi	r26, 0x5B	; 91
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	eb e5       	ldi	r30, 0x5B	; 91
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 68       	ori	r24, 0x80	; 128
    105c:	8c 93       	st	X, r24
    105e:	6b c0       	rjmp	.+214    	; 0x1136 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_FLOATING_EDGE:
            SET_BIT(EXTI_u8_MCUCR, 3);
    1060:	a5 e5       	ldi	r26, 0x55	; 85
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e5 e5       	ldi	r30, 0x55	; 85
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	88 60       	ori	r24, 0x08	; 8
    106c:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR, 2);
    106e:	a5 e5       	ldi	r26, 0x55	; 85
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e5       	ldi	r30, 0x55	; 85
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	8b 7f       	andi	r24, 0xFB	; 251
    107a:	8c 93       	st	X, r24
            /* Enable EXTI1 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
    107c:	ab e5       	ldi	r26, 0x5B	; 91
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e5       	ldi	r30, 0x5B	; 91
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	80 68       	ori	r24, 0x80	; 128
    1088:	8c 93       	st	X, r24
    108a:	55 c0       	rjmp	.+170    	; 0x1136 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_ANY_LOGICAL_CHANGE:
            CLR_BIT(EXTI_u8_MCUCR, 3);
    108c:	a5 e5       	ldi	r26, 0x55	; 85
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e5 e5       	ldi	r30, 0x55	; 85
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	87 7f       	andi	r24, 0xF7	; 247
    1098:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR, 2);
    109a:	a5 e5       	ldi	r26, 0x55	; 85
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e5 e5       	ldi	r30, 0x55	; 85
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	84 60       	ori	r24, 0x04	; 4
    10a6:	8c 93       	st	X, r24
            /* Enable EXTI1 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
    10a8:	ab e5       	ldi	r26, 0x5B	; 91
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	eb e5       	ldi	r30, 0x5B	; 91
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	80 68       	ori	r24, 0x80	; 128
    10b4:	8c 93       	st	X, r24
    10b6:	3f c0       	rjmp	.+126    	; 0x1136 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_LOW_LEVEL:
            CLR_BIT(EXTI_u8_MCUCR, 3);
    10b8:	a5 e5       	ldi	r26, 0x55	; 85
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e5       	ldi	r30, 0x55	; 85
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	87 7f       	andi	r24, 0xF7	; 247
    10c4:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR, 2);
    10c6:	a5 e5       	ldi	r26, 0x55	; 85
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e5       	ldi	r30, 0x55	; 85
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8b 7f       	andi	r24, 0xFB	; 251
    10d2:	8c 93       	st	X, r24
            /* Enable EXTI1 */
            SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
    10d4:	ab e5       	ldi	r26, 0x5B	; 91
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	eb e5       	ldi	r30, 0x5B	; 91
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	80 68       	ori	r24, 0x80	; 128
    10e0:	8c 93       	st	X, r24
    10e2:	29 c0       	rjmp	.+82     	; 0x1136 <EXTI_voidEnable+0x27e>
            break;
        default:
            Local_u8ErrorState = STD_TYPES_NOK;
    10e4:	19 82       	std	Y+1, r1	; 0x01
    10e6:	27 c0       	rjmp	.+78     	; 0x1136 <EXTI_voidEnable+0x27e>
        }
        break;
    /*****************************************************************/
    case EXTI_u8_IN2:
        /* Enable EXTI2 */
        SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN2);
    10e8:	ab e5       	ldi	r26, 0x5B	; 91
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	eb e5       	ldi	r30, 0x5B	; 91
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 62       	ori	r24, 0x20	; 32
    10f4:	8c 93       	st	X, r24
        switch (Copy_u8EdgeIndex)
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	3d 83       	std	Y+5, r19	; 0x05
    10fe:	2c 83       	std	Y+4, r18	; 0x04
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	31 f0       	breq	.+12     	; 0x1114 <EXTI_voidEnable+0x25c>
    1108:	2c 81       	ldd	r18, Y+4	; 0x04
    110a:	3d 81       	ldd	r19, Y+5	; 0x05
    110c:	21 30       	cpi	r18, 0x01	; 1
    110e:	31 05       	cpc	r19, r1
    1110:	49 f0       	breq	.+18     	; 0x1124 <EXTI_voidEnable+0x26c>
    1112:	10 c0       	rjmp	.+32     	; 0x1134 <EXTI_voidEnable+0x27c>
        {
        case EXTI_u8_RAISING_EDGE:
            SET_BIT(EXTI_u8_MCUCSR, 6);
    1114:	a4 e5       	ldi	r26, 0x54	; 84
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e4 e5       	ldi	r30, 0x54	; 84
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 64       	ori	r24, 0x40	; 64
    1120:	8c 93       	st	X, r24
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <EXTI_voidEnable+0x27e>
            break;
        case EXTI_u8_FLOATING_EDGE:
            CLR_BIT(EXTI_u8_MCUCSR, 6);
    1124:	a4 e5       	ldi	r26, 0x54	; 84
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e4 e5       	ldi	r30, 0x54	; 84
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 7b       	andi	r24, 0xBF	; 191
    1130:	8c 93       	st	X, r24
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <EXTI_voidEnable+0x27e>
            // /* Enable EXTI2 */
            // SET_BIT(EXTI_u8_GICR, EXTI_u8_PIN2);
            break;
        default:
            Local_u8ErrorState = STD_TYPES_NOK;
    1134:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
        break;
    }
    return Local_u8ErrorState;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
}
    1138:	2b 96       	adiw	r28, 0x0b	; 11
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <EXTI_voidDisable>:
u8 EXTI_voidDisable(u8 Copy_u8EXTIIndex)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	00 d0       	rcall	.+0      	; 0x1150 <EXTI_voidDisable+0x6>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <EXTI_voidDisable+0x8>
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8EXTIIndex)
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3c 83       	std	Y+4, r19	; 0x04
    1164:	2b 83       	std	Y+3, r18	; 0x03
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	89 f0       	breq	.+34     	; 0x1192 <EXTI_voidDisable+0x48>
    1170:	2b 81       	ldd	r18, Y+3	; 0x03
    1172:	3c 81       	ldd	r19, Y+4	; 0x04
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	a1 f0       	breq	.+40     	; 0x11a2 <EXTI_voidDisable+0x58>
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	c1 f4       	brne	.+48     	; 0x11b2 <EXTI_voidDisable+0x68>
    {
    case EXTI_u8_IN0:
        CLR_BIT(EXTI_u8_GICR, EXTI_u8_PIN0);
    1182:	ab e5       	ldi	r26, 0x5B	; 91
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	eb e5       	ldi	r30, 0x5B	; 91
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8f 7b       	andi	r24, 0xBF	; 191
    118e:	8c 93       	st	X, r24
    1190:	11 c0       	rjmp	.+34     	; 0x11b4 <EXTI_voidDisable+0x6a>
        break;
    case EXTI_u8_IN1:
        CLR_BIT(EXTI_u8_GICR, EXTI_u8_PIN1);
    1192:	ab e5       	ldi	r26, 0x5B	; 91
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	eb e5       	ldi	r30, 0x5B	; 91
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	8f 77       	andi	r24, 0x7F	; 127
    119e:	8c 93       	st	X, r24
    11a0:	09 c0       	rjmp	.+18     	; 0x11b4 <EXTI_voidDisable+0x6a>
        break;
    case EXTI_u8_IN2:
        CLR_BIT(EXTI_u8_GICR, EXTI_u8_PIN2);
    11a2:	ab e5       	ldi	r26, 0x5B	; 91
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	eb e5       	ldi	r30, 0x5B	; 91
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8f 7d       	andi	r24, 0xDF	; 223
    11ae:	8c 93       	st	X, r24
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <EXTI_voidDisable+0x6a>
        break;
    default:
        Local_u8ErrorState = STD_TYPES_NOK;
    11b2:	19 82       	std	Y+1, r1	; 0x01
        break;
    }

    return Local_u8ErrorState;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <EXTI_u8Set_CallBack>:
/***************************************************************************/
/* Global Pointer to a function */
static void (*EXTI_pfEXTI[3])(void) = {NULL};

u8 EXTI_u8Set_CallBack(void (*lpf)(void), u8 Copy_u8EXTI_Index) // *lpf is the local pointer to the function
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <EXTI_u8Set_CallBack+0x6>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <EXTI_u8Set_CallBack+0x8>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	9b 83       	std	Y+3, r25	; 0x03
    11d2:	8a 83       	std	Y+2, r24	; 0x02
    11d4:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8ErrorState = STD_TYPES_OK;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8EXTI_Index <= EXTI_u8_IN2) && (lpf != NULL))
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	88 f4       	brcc	.+34     	; 0x1202 <EXTI_u8Set_CallBack+0x3e>
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	9b 81       	ldd	r25, Y+3	; 0x03
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	69 f0       	breq	.+26     	; 0x1202 <EXTI_u8Set_CallBack+0x3e>
        EXTI_pfEXTI[Copy_u8EXTI_Index] = lpf;
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	fc 01       	movw	r30, r24
    11f4:	ea 57       	subi	r30, 0x7A	; 122
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	80 83       	st	Z, r24
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <EXTI_u8Set_CallBack+0x40>
    else
        Local_u8ErrorState = STD_TYPES_NOK;
    1202:	19 82       	std	Y+1, r1	; 0x01
    return Local_u8ErrorState;
    1204:	89 81       	ldd	r24, Y+1	; 0x01
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <__vector__1>:
/* Prototype fo ISR of EXTI0 */
void __vector__1(void) __attribute__((signal));
void __vector__1(void) // ISR(EXTI0)
{
    1214:	1f 92       	push	r1
    1216:	0f 92       	push	r0
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	0f 92       	push	r0
    121c:	11 24       	eor	r1, r1
    121e:	2f 93       	push	r18
    1220:	3f 93       	push	r19
    1222:	4f 93       	push	r20
    1224:	5f 93       	push	r21
    1226:	6f 93       	push	r22
    1228:	7f 93       	push	r23
    122a:	8f 93       	push	r24
    122c:	9f 93       	push	r25
    122e:	af 93       	push	r26
    1230:	bf 93       	push	r27
    1232:	ef 93       	push	r30
    1234:	ff 93       	push	r31
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    if (EXTI_pfEXTI[EXTI_u8_IN0 != NULL]) // to make sure that pointer is got a new address, and avoid a garbage value.
    123e:	80 91 86 00 	lds	r24, 0x0086
    1242:	90 91 87 00 	lds	r25, 0x0087
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	29 f0       	breq	.+10     	; 0x1254 <__vector__1+0x40>
        EXTI_pfEXTI[0]();
    124a:	e0 91 86 00 	lds	r30, 0x0086
    124e:	f0 91 87 00 	lds	r31, 0x0087
    1252:	09 95       	icall
}
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	ff 91       	pop	r31
    125a:	ef 91       	pop	r30
    125c:	bf 91       	pop	r27
    125e:	af 91       	pop	r26
    1260:	9f 91       	pop	r25
    1262:	8f 91       	pop	r24
    1264:	7f 91       	pop	r23
    1266:	6f 91       	pop	r22
    1268:	5f 91       	pop	r21
    126a:	4f 91       	pop	r20
    126c:	3f 91       	pop	r19
    126e:	2f 91       	pop	r18
    1270:	0f 90       	pop	r0
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	0f 90       	pop	r0
    1276:	1f 90       	pop	r1
    1278:	18 95       	reti

0000127a <__vector__2>:
/* Prototype fo ISR of EXTI1 */
void __vector__2(void) __attribute__((signal));
void __vector__2(void) // ISR(EXTI1)
{
    127a:	1f 92       	push	r1
    127c:	0f 92       	push	r0
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	0f 92       	push	r0
    1282:	11 24       	eor	r1, r1
    1284:	2f 93       	push	r18
    1286:	3f 93       	push	r19
    1288:	4f 93       	push	r20
    128a:	5f 93       	push	r21
    128c:	6f 93       	push	r22
    128e:	7f 93       	push	r23
    1290:	8f 93       	push	r24
    1292:	9f 93       	push	r25
    1294:	af 93       	push	r26
    1296:	bf 93       	push	r27
    1298:	ef 93       	push	r30
    129a:	ff 93       	push	r31
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    if (EXTI_pfEXTI[EXTI_u8_IN1 != NULL]) // to make sure that pointer is got a new address, and avoid a garbage value.
    12a4:	80 91 88 00 	lds	r24, 0x0088
    12a8:	90 91 89 00 	lds	r25, 0x0089
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	29 f0       	breq	.+10     	; 0x12ba <__vector__2+0x40>
        EXTI_pfEXTI[1]();
    12b0:	e0 91 88 00 	lds	r30, 0x0088
    12b4:	f0 91 89 00 	lds	r31, 0x0089
    12b8:	09 95       	icall
}
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	ff 91       	pop	r31
    12c0:	ef 91       	pop	r30
    12c2:	bf 91       	pop	r27
    12c4:	af 91       	pop	r26
    12c6:	9f 91       	pop	r25
    12c8:	8f 91       	pop	r24
    12ca:	7f 91       	pop	r23
    12cc:	6f 91       	pop	r22
    12ce:	5f 91       	pop	r21
    12d0:	4f 91       	pop	r20
    12d2:	3f 91       	pop	r19
    12d4:	2f 91       	pop	r18
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <__vector__3>:
/* Prototype fo ISR of EXTI2 */
void __vector__3(void) __attribute__((signal));
void __vector__3(void) // ISR(EXTI2)
{
    12e0:	1f 92       	push	r1
    12e2:	0f 92       	push	r0
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	0f 92       	push	r0
    12e8:	11 24       	eor	r1, r1
    12ea:	2f 93       	push	r18
    12ec:	3f 93       	push	r19
    12ee:	4f 93       	push	r20
    12f0:	5f 93       	push	r21
    12f2:	6f 93       	push	r22
    12f4:	7f 93       	push	r23
    12f6:	8f 93       	push	r24
    12f8:	9f 93       	push	r25
    12fa:	af 93       	push	r26
    12fc:	bf 93       	push	r27
    12fe:	ef 93       	push	r30
    1300:	ff 93       	push	r31
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    // if (EXTI_pfEXTI[EXTI_u8_IN2 != NULL]) // to make sure that pointer is got a new address, and avoid a garbage value.
    EXTI_pfEXTI[2]();
    130a:	e0 91 8a 00 	lds	r30, 0x008A
    130e:	f0 91 8b 00 	lds	r31, 0x008B
    1312:	09 95       	icall
}
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	ff 91       	pop	r31
    131a:	ef 91       	pop	r30
    131c:	bf 91       	pop	r27
    131e:	af 91       	pop	r26
    1320:	9f 91       	pop	r25
    1322:	8f 91       	pop	r24
    1324:	7f 91       	pop	r23
    1326:	6f 91       	pop	r22
    1328:	5f 91       	pop	r21
    132a:	4f 91       	pop	r20
    132c:	3f 91       	pop	r19
    132e:	2f 91       	pop	r18
    1330:	0f 90       	pop	r0
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	0f 90       	pop	r0
    1336:	1f 90       	pop	r1
    1338:	18 95       	reti

0000133a <DIO_voidInit>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidInit(void)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION,
    1342:	ea e3       	ldi	r30, 0x3A	; 58
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	10 82       	st	Z, r1
                           DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,
                           DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION,
                           DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);

    DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION,
    1348:	e7 e3       	ldi	r30, 0x37	; 55
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	88 e0       	ldi	r24, 0x08	; 8
    134e:	80 83       	st	Z, r24
                           DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,
                           DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION,
                           DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);

    DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION,
    1350:	e4 e3       	ldi	r30, 0x34	; 52
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	87 e0       	ldi	r24, 0x07	; 7
    1356:	80 83       	st	Z, r24
                           DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,
                           DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION,
                           DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);

    DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION,
    1358:	e1 e3       	ldi	r30, 0x31	; 49
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	80 83       	st	Z, r24
                           DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION, DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);

    DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE,
    1360:	eb e3       	ldi	r30, 0x3B	; 59
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	10 82       	st	Z, r1
                            DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE, DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE,
    1366:	e8 e3       	ldi	r30, 0x38	; 56
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	10 82       	st	Z, r1
                            DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE, DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);

    DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE,
    136c:	e5 e3       	ldi	r30, 0x35	; 53
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	10 82       	st	Z, r1
                            DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE, DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);

    DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE,
    1372:	e2 e3       	ldi	r30, 0x32	; 50
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	10 82       	st	Z, r1
                            DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE, DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <DIO_voidSetPinDirection>:
u8 DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	2e 97       	sbiw	r28, 0x0e	; 14
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	8a 83       	std	Y+2, r24	; 0x02
    1394:	6b 83       	std	Y+3, r22	; 0x03
    1396:	4c 83       	std	Y+4, r20	; 0x04

    u8 Local_u8ErrorState = STD_TYPES_OK;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	84 30       	cpi	r24, 0x04	; 4
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <DIO_voidSetPinDirection+0x26>
    13a2:	0c c1       	rjmp	.+536    	; 0x15bc <DIO_voidSetPinDirection+0x23e>
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	88 30       	cpi	r24, 0x08	; 8
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <DIO_voidSetPinDirection+0x2e>
    13aa:	08 c1       	rjmp	.+528    	; 0x15bc <DIO_voidSetPinDirection+0x23e>
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	21 f0       	breq	.+8      	; 0x13ba <DIO_voidSetPinDirection+0x3c>
    13b2:	8c 81       	ldd	r24, Y+4	; 0x04
    13b4:	88 23       	and	r24, r24
    13b6:	09 f0       	breq	.+2      	; 0x13ba <DIO_voidSetPinDirection+0x3c>
    13b8:	01 c1       	rjmp	.+514    	; 0x15bc <DIO_voidSetPinDirection+0x23e>
    {
        switch (Copy_u8PortId)
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3e 87       	std	Y+14, r19	; 0x0e
    13c2:	2d 87       	std	Y+13, r18	; 0x0d
    13c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	91 05       	cpc	r25, r1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <DIO_voidSetPinDirection+0x52>
    13ce:	4f c0       	rjmp	.+158    	; 0x146e <DIO_voidSetPinDirection+0xf0>
    13d0:	2d 85       	ldd	r18, Y+13	; 0x0d
    13d2:	3e 85       	ldd	r19, Y+14	; 0x0e
    13d4:	22 30       	cpi	r18, 0x02	; 2
    13d6:	31 05       	cpc	r19, r1
    13d8:	2c f4       	brge	.+10     	; 0x13e4 <DIO_voidSetPinDirection+0x66>
    13da:	8d 85       	ldd	r24, Y+13	; 0x0d
    13dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	71 f0       	breq	.+28     	; 0x13fe <DIO_voidSetPinDirection+0x80>
    13e2:	ed c0       	rjmp	.+474    	; 0x15be <DIO_voidSetPinDirection+0x240>
    13e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    13e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <DIO_voidSetPinDirection+0x72>
    13ee:	77 c0       	rjmp	.+238    	; 0x14de <DIO_voidSetPinDirection+0x160>
    13f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f4:	83 30       	cpi	r24, 0x03	; 3
    13f6:	91 05       	cpc	r25, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <DIO_voidSetPinDirection+0x7e>
    13fa:	a9 c0       	rjmp	.+338    	; 0x154e <DIO_voidSetPinDirection+0x1d0>
    13fc:	e0 c0       	rjmp	.+448    	; 0x15be <DIO_voidSetPinDirection+0x240>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PinDirection)
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3c 87       	std	Y+12, r19	; 0x0c
    1406:	2b 87       	std	Y+11, r18	; 0x0b
    1408:	8b 85       	ldd	r24, Y+11	; 0x0b
    140a:	9c 85       	ldd	r25, Y+12	; 0x0c
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	d1 f0       	breq	.+52     	; 0x1444 <DIO_voidSetPinDirection+0xc6>
    1410:	2b 85       	ldd	r18, Y+11	; 0x0b
    1412:	3c 85       	ldd	r19, Y+12	; 0x0c
    1414:	21 30       	cpi	r18, 0x01	; 1
    1416:	31 05       	cpc	r19, r1
    1418:	09 f0       	breq	.+2      	; 0x141c <DIO_voidSetPinDirection+0x9e>
    141a:	d1 c0       	rjmp	.+418    	; 0x15be <DIO_voidSetPinDirection+0x240>
            {
            case DIO_u8_OUTPUT:
                SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinID);
    141c:	aa e3       	ldi	r26, 0x3A	; 58
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	ea e3       	ldi	r30, 0x3A	; 58
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <DIO_voidSetPinDirection+0xbc>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <DIO_voidSetPinDirection+0xb8>
    143e:	84 2b       	or	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	bd c0       	rjmp	.+378    	; 0x15be <DIO_voidSetPinDirection+0x240>
                break;
            case DIO_u8_INPUT:
                CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinID);
    1444:	aa e3       	ldi	r26, 0x3A	; 58
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ea e3       	ldi	r30, 0x3A	; 58
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_voidSetPinDirection+0xe4>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_voidSetPinDirection+0xe0>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	a8 c0       	rjmp	.+336    	; 0x15be <DIO_voidSetPinDirection+0x240>
                break;
            }

            break;
        case DIO_u8_PORTB:
            switch (Copy_u8PinDirection)
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3a 87       	std	Y+10, r19	; 0x0a
    1476:	29 87       	std	Y+9, r18	; 0x09
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	d1 f0       	breq	.+52     	; 0x14b4 <DIO_voidSetPinDirection+0x136>
    1480:	29 85       	ldd	r18, Y+9	; 0x09
    1482:	3a 85       	ldd	r19, Y+10	; 0x0a
    1484:	21 30       	cpi	r18, 0x01	; 1
    1486:	31 05       	cpc	r19, r1
    1488:	09 f0       	breq	.+2      	; 0x148c <DIO_voidSetPinDirection+0x10e>
    148a:	99 c0       	rjmp	.+306    	; 0x15be <DIO_voidSetPinDirection+0x240>
            {
            case DIO_u8_OUTPUT:
                SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinID);
    148c:	a7 e3       	ldi	r26, 0x37	; 55
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e7 e3       	ldi	r30, 0x37	; 55
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_voidSetPinDirection+0x12c>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_voidSetPinDirection+0x128>
    14ae:	84 2b       	or	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	85 c0       	rjmp	.+266    	; 0x15be <DIO_voidSetPinDirection+0x240>
                break;
            case DIO_u8_INPUT:
                CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinID);
    14b4:	a7 e3       	ldi	r26, 0x37	; 55
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e7 e3       	ldi	r30, 0x37	; 55
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_voidSetPinDirection+0x154>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_voidSetPinDirection+0x150>
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	70 c0       	rjmp	.+224    	; 0x15be <DIO_voidSetPinDirection+0x240>
                break;
            }

            break;
        case DIO_u8_PORTC:
            switch (Copy_u8PinDirection)
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	38 87       	std	Y+8, r19	; 0x08
    14e6:	2f 83       	std	Y+7, r18	; 0x07
    14e8:	8f 81       	ldd	r24, Y+7	; 0x07
    14ea:	98 85       	ldd	r25, Y+8	; 0x08
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	d1 f0       	breq	.+52     	; 0x1524 <DIO_voidSetPinDirection+0x1a6>
    14f0:	2f 81       	ldd	r18, Y+7	; 0x07
    14f2:	38 85       	ldd	r19, Y+8	; 0x08
    14f4:	21 30       	cpi	r18, 0x01	; 1
    14f6:	31 05       	cpc	r19, r1
    14f8:	09 f0       	breq	.+2      	; 0x14fc <DIO_voidSetPinDirection+0x17e>
    14fa:	61 c0       	rjmp	.+194    	; 0x15be <DIO_voidSetPinDirection+0x240>
            {
            case DIO_u8_OUTPUT:
                SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinID);
    14fc:	a4 e3       	ldi	r26, 0x34	; 52
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e4 e3       	ldi	r30, 0x34	; 52
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	02 2e       	mov	r0, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_voidSetPinDirection+0x19c>
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	0a 94       	dec	r0
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_voidSetPinDirection+0x198>
    151e:	84 2b       	or	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	4d c0       	rjmp	.+154    	; 0x15be <DIO_voidSetPinDirection+0x240>
                break;
            case DIO_u8_INPUT:
                CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinID);
    1524:	a4 e3       	ldi	r26, 0x34	; 52
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e4 e3       	ldi	r30, 0x34	; 52
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_voidSetPinDirection+0x1c4>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DIO_voidSetPinDirection+0x1c0>
    1546:	80 95       	com	r24
    1548:	84 23       	and	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	38 c0       	rjmp	.+112    	; 0x15be <DIO_voidSetPinDirection+0x240>
                break;
            }

            break;
        case DIO_u8_PORTD:
            switch (Copy_u8PinDirection)
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3e 83       	std	Y+6, r19	; 0x06
    1556:	2d 83       	std	Y+5, r18	; 0x05
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	9e 81       	ldd	r25, Y+6	; 0x06
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	c9 f0       	breq	.+50     	; 0x1592 <DIO_voidSetPinDirection+0x214>
    1560:	2d 81       	ldd	r18, Y+5	; 0x05
    1562:	3e 81       	ldd	r19, Y+6	; 0x06
    1564:	21 30       	cpi	r18, 0x01	; 1
    1566:	31 05       	cpc	r19, r1
    1568:	51 f5       	brne	.+84     	; 0x15be <DIO_voidSetPinDirection+0x240>
            {
            case DIO_u8_OUTPUT:
                SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinID);
    156a:	a1 e3       	ldi	r26, 0x31	; 49
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e1 e3       	ldi	r30, 0x31	; 49
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_voidSetPinDirection+0x20a>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_voidSetPinDirection+0x206>
    158c:	84 2b       	or	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	16 c0       	rjmp	.+44     	; 0x15be <DIO_voidSetPinDirection+0x240>
                break;
            case DIO_u8_INPUT:
                CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinID);
    1592:	a1 e3       	ldi	r26, 0x31	; 49
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e1 e3       	ldi	r30, 0x31	; 49
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_voidSetPinDirection+0x232>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_voidSetPinDirection+0x22e>
    15b4:	80 95       	com	r24
    15b6:	84 23       	and	r24, r20
    15b8:	8c 93       	st	X, r24
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <DIO_voidSetPinDirection+0x240>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    15bc:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ErrorState;
    15be:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c0:	2e 96       	adiw	r28, 0x0e	; 14
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <DIO_voidSetPinValue>:
u8 DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_PinID, u8 Copy_u8PinValue)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	2e 97       	sbiw	r28, 0x0e	; 14
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	8a 83       	std	Y+2, r24	; 0x02
    15e8:	6b 83       	std	Y+3, r22	; 0x03
    15ea:	4c 83       	std	Y+4, r20	; 0x04
    u8 local_u8ErrorState = STD_TYPES_OK;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_PinID <= DIO_u8_PIN7)
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	88 30       	cpi	r24, 0x08	; 8
    15f4:	08 f0       	brcs	.+2      	; 0x15f8 <DIO_voidSetPinValue+0x26>
    15f6:	08 c1       	rjmp	.+528    	; 0x1808 <DIO_voidSetPinValue+0x236>
    {

        switch (Copy_u8PortId)
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	3e 87       	std	Y+14, r19	; 0x0e
    1600:	2d 87       	std	Y+13, r18	; 0x0d
    1602:	8d 85       	ldd	r24, Y+13	; 0x0d
    1604:	9e 85       	ldd	r25, Y+14	; 0x0e
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	91 05       	cpc	r25, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <DIO_voidSetPinValue+0x3c>
    160c:	50 c0       	rjmp	.+160    	; 0x16ae <DIO_voidSetPinValue+0xdc>
    160e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1610:	3e 85       	ldd	r19, Y+14	; 0x0e
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	2c f4       	brge	.+10     	; 0x1622 <DIO_voidSetPinValue+0x50>
    1618:	8d 85       	ldd	r24, Y+13	; 0x0d
    161a:	9e 85       	ldd	r25, Y+14	; 0x0e
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	71 f0       	breq	.+28     	; 0x163c <DIO_voidSetPinValue+0x6a>
    1620:	f1 c0       	rjmp	.+482    	; 0x1804 <DIO_voidSetPinValue+0x232>
    1622:	2d 85       	ldd	r18, Y+13	; 0x0d
    1624:	3e 85       	ldd	r19, Y+14	; 0x0e
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	09 f4       	brne	.+2      	; 0x162e <DIO_voidSetPinValue+0x5c>
    162c:	79 c0       	rjmp	.+242    	; 0x1720 <DIO_voidSetPinValue+0x14e>
    162e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1630:	9e 85       	ldd	r25, Y+14	; 0x0e
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	91 05       	cpc	r25, r1
    1636:	09 f4       	brne	.+2      	; 0x163a <DIO_voidSetPinValue+0x68>
    1638:	ac c0       	rjmp	.+344    	; 0x1792 <DIO_voidSetPinValue+0x1c0>
    163a:	e4 c0       	rjmp	.+456    	; 0x1804 <DIO_voidSetPinValue+0x232>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PinValue)
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	3c 87       	std	Y+12, r19	; 0x0c
    1644:	2b 87       	std	Y+11, r18	; 0x0b
    1646:	8b 85       	ldd	r24, Y+11	; 0x0b
    1648:	9c 85       	ldd	r25, Y+12	; 0x0c
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	c9 f0       	breq	.+50     	; 0x1680 <DIO_voidSetPinValue+0xae>
    164e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1650:	3c 85       	ldd	r19, Y+12	; 0x0c
    1652:	21 30       	cpi	r18, 0x01	; 1
    1654:	31 05       	cpc	r19, r1
    1656:	49 f5       	brne	.+82     	; 0x16aa <DIO_voidSetPinValue+0xd8>
            {
            case DIO_u8_HIGH:
                SET_BIT(DIO_u8_PORTA_REG, Copy_PinID);
    1658:	ab e3       	ldi	r26, 0x3B	; 59
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	eb e3       	ldi	r30, 0x3B	; 59
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <DIO_voidSetPinValue+0xa4>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <DIO_voidSetPinValue+0xa0>
    167a:	84 2b       	or	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	c5 c0       	rjmp	.+394    	; 0x180a <DIO_voidSetPinValue+0x238>
                break;
            case DIO_u8_LOW:
                CLR_BIT(DIO_u8_PORTA_REG, Copy_PinID);
    1680:	ab e3       	ldi	r26, 0x3B	; 59
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	eb e3       	ldi	r30, 0x3B	; 59
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_voidSetPinValue+0xcc>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_voidSetPinValue+0xc8>
    16a2:	80 95       	com	r24
    16a4:	84 23       	and	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	b0 c0       	rjmp	.+352    	; 0x180a <DIO_voidSetPinValue+0x238>
                break;
            default:
                local_u8ErrorState = STD_TYPES_NOK;
    16aa:	19 82       	std	Y+1, r1	; 0x01
    16ac:	ae c0       	rjmp	.+348    	; 0x180a <DIO_voidSetPinValue+0x238>
                break;
            }
            break;
        case DIO_u8_PORTB:
            switch (Copy_u8PinValue)
    16ae:	8c 81       	ldd	r24, Y+4	; 0x04
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	3a 87       	std	Y+10, r19	; 0x0a
    16b6:	29 87       	std	Y+9, r18	; 0x09
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	c9 f0       	breq	.+50     	; 0x16f2 <DIO_voidSetPinValue+0x120>
    16c0:	29 85       	ldd	r18, Y+9	; 0x09
    16c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    16c4:	21 30       	cpi	r18, 0x01	; 1
    16c6:	31 05       	cpc	r19, r1
    16c8:	49 f5       	brne	.+82     	; 0x171c <DIO_voidSetPinValue+0x14a>
            {
            case DIO_u8_HIGH:
                SET_BIT(DIO_u8_PORTB_REG, Copy_PinID);
    16ca:	a8 e3       	ldi	r26, 0x38	; 56
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e8 e3       	ldi	r30, 0x38	; 56
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_voidSetPinValue+0x116>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_voidSetPinValue+0x112>
    16ec:	84 2b       	or	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	8c c0       	rjmp	.+280    	; 0x180a <DIO_voidSetPinValue+0x238>
                break;
            case DIO_u8_LOW:
                CLR_BIT(DIO_u8_PORTB_REG, Copy_PinID);
    16f2:	a8 e3       	ldi	r26, 0x38	; 56
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e8 e3       	ldi	r30, 0x38	; 56
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_voidSetPinValue+0x13e>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_voidSetPinValue+0x13a>
    1714:	80 95       	com	r24
    1716:	84 23       	and	r24, r20
    1718:	8c 93       	st	X, r24
    171a:	77 c0       	rjmp	.+238    	; 0x180a <DIO_voidSetPinValue+0x238>
                break;
            default:
                local_u8ErrorState = STD_TYPES_NOK;
    171c:	19 82       	std	Y+1, r1	; 0x01
    171e:	75 c0       	rjmp	.+234    	; 0x180a <DIO_voidSetPinValue+0x238>
                break;
            }
            break;

        case DIO_u8_PORTC:
            switch (Copy_u8PinValue)
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	38 87       	std	Y+8, r19	; 0x08
    1728:	2f 83       	std	Y+7, r18	; 0x07
    172a:	8f 81       	ldd	r24, Y+7	; 0x07
    172c:	98 85       	ldd	r25, Y+8	; 0x08
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	c9 f0       	breq	.+50     	; 0x1764 <DIO_voidSetPinValue+0x192>
    1732:	2f 81       	ldd	r18, Y+7	; 0x07
    1734:	38 85       	ldd	r19, Y+8	; 0x08
    1736:	21 30       	cpi	r18, 0x01	; 1
    1738:	31 05       	cpc	r19, r1
    173a:	49 f5       	brne	.+82     	; 0x178e <DIO_voidSetPinValue+0x1bc>
            {
            case DIO_u8_HIGH:
                SET_BIT(DIO_u8_PORTC_REG, Copy_PinID);
    173c:	a5 e3       	ldi	r26, 0x35	; 53
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e5 e3       	ldi	r30, 0x35	; 53
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_voidSetPinValue+0x188>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_voidSetPinValue+0x184>
    175e:	84 2b       	or	r24, r20
    1760:	8c 93       	st	X, r24
    1762:	53 c0       	rjmp	.+166    	; 0x180a <DIO_voidSetPinValue+0x238>
                break;
            case DIO_u8_LOW:
                CLR_BIT(DIO_u8_PORTC_REG, Copy_PinID);
    1764:	a5 e3       	ldi	r26, 0x35	; 53
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e5 e3       	ldi	r30, 0x35	; 53
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 2e       	mov	r0, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <DIO_voidSetPinValue+0x1b0>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	0a 94       	dec	r0
    1784:	e2 f7       	brpl	.-8      	; 0x177e <DIO_voidSetPinValue+0x1ac>
    1786:	80 95       	com	r24
    1788:	84 23       	and	r24, r20
    178a:	8c 93       	st	X, r24
    178c:	3e c0       	rjmp	.+124    	; 0x180a <DIO_voidSetPinValue+0x238>
                break;
            default:
                local_u8ErrorState = STD_TYPES_NOK;
    178e:	19 82       	std	Y+1, r1	; 0x01
    1790:	3c c0       	rjmp	.+120    	; 0x180a <DIO_voidSetPinValue+0x238>
                break;
            }
            break;

        case DIO_u8_PORTD:
            switch (Copy_u8PinValue)
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	3e 83       	std	Y+6, r19	; 0x06
    179a:	2d 83       	std	Y+5, r18	; 0x05
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	9e 81       	ldd	r25, Y+6	; 0x06
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	c9 f0       	breq	.+50     	; 0x17d6 <DIO_voidSetPinValue+0x204>
    17a4:	2d 81       	ldd	r18, Y+5	; 0x05
    17a6:	3e 81       	ldd	r19, Y+6	; 0x06
    17a8:	21 30       	cpi	r18, 0x01	; 1
    17aa:	31 05       	cpc	r19, r1
    17ac:	49 f5       	brne	.+82     	; 0x1800 <DIO_voidSetPinValue+0x22e>
            {
            case DIO_u8_HIGH:
                SET_BIT(DIO_u8_PORTD_REG, Copy_PinID);
    17ae:	a2 e3       	ldi	r26, 0x32	; 50
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e2 e3       	ldi	r30, 0x32	; 50
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <DIO_voidSetPinValue+0x1fa>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <DIO_voidSetPinValue+0x1f6>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	1a c0       	rjmp	.+52     	; 0x180a <DIO_voidSetPinValue+0x238>
                break;
            case DIO_u8_LOW:
                CLR_BIT(DIO_u8_PORTD_REG, Copy_PinID);
    17d6:	a2 e3       	ldi	r26, 0x32	; 50
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e2 e3       	ldi	r30, 0x32	; 50
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <DIO_voidSetPinValue+0x222>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <DIO_voidSetPinValue+0x21e>
    17f8:	80 95       	com	r24
    17fa:	84 23       	and	r24, r20
    17fc:	8c 93       	st	X, r24
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <DIO_voidSetPinValue+0x238>
                break;
            default:
                local_u8ErrorState = STD_TYPES_NOK;
    1800:	19 82       	std	Y+1, r1	; 0x01
    1802:	03 c0       	rjmp	.+6      	; 0x180a <DIO_voidSetPinValue+0x238>
                break;
            }
            break;

        default:
            local_u8ErrorState = STD_TYPES_NOK;
    1804:	19 82       	std	Y+1, r1	; 0x01
    1806:	01 c0       	rjmp	.+2      	; 0x180a <DIO_voidSetPinValue+0x238>
        }
    }
    else
    {
        local_u8ErrorState = STD_TYPES_NOK;
    1808:	19 82       	std	Y+1, r1	; 0x01
    }
    return local_u8ErrorState;
    180a:	89 81       	ldd	r24, Y+1	; 0x01
}
    180c:	2e 96       	adiw	r28, 0x0e	; 14
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_PinID, u8 *Copy_pu8PinValue)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	28 97       	sbiw	r28, 0x08	; 8
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	8b 83       	std	Y+3, r24	; 0x03
    1834:	6c 83       	std	Y+4, r22	; 0x04
    1836:	5e 83       	std	Y+6, r21	; 0x06
    1838:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8ErrorState = STD_TYPES_OK;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PinValue;
    if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_PinID <= DIO_u8_PIN7) && (Copy_pu8PinValue != NULL))
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	84 30       	cpi	r24, 0x04	; 4
    1842:	08 f0       	brcs	.+2      	; 0x1846 <DIO_u8GetPinValue+0x28>
    1844:	9f c0       	rjmp	.+318    	; 0x1984 <DIO_u8GetPinValue+0x166>
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	88 30       	cpi	r24, 0x08	; 8
    184a:	08 f0       	brcs	.+2      	; 0x184e <DIO_u8GetPinValue+0x30>
    184c:	9b c0       	rjmp	.+310    	; 0x1984 <DIO_u8GetPinValue+0x166>
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	09 f4       	brne	.+2      	; 0x1858 <DIO_u8GetPinValue+0x3a>
    1856:	96 c0       	rjmp	.+300    	; 0x1984 <DIO_u8GetPinValue+0x166>
    {
        switch (Copy_u8PortId)
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	38 87       	std	Y+8, r19	; 0x08
    1860:	2f 83       	std	Y+7, r18	; 0x07
    1862:	4f 81       	ldd	r20, Y+7	; 0x07
    1864:	58 85       	ldd	r21, Y+8	; 0x08
    1866:	41 30       	cpi	r20, 0x01	; 1
    1868:	51 05       	cpc	r21, r1
    186a:	a9 f1       	breq	.+106    	; 0x18d6 <DIO_u8GetPinValue+0xb8>
    186c:	8f 81       	ldd	r24, Y+7	; 0x07
    186e:	98 85       	ldd	r25, Y+8	; 0x08
    1870:	82 30       	cpi	r24, 0x02	; 2
    1872:	91 05       	cpc	r25, r1
    1874:	34 f4       	brge	.+12     	; 0x1882 <DIO_u8GetPinValue+0x64>
    1876:	2f 81       	ldd	r18, Y+7	; 0x07
    1878:	38 85       	ldd	r19, Y+8	; 0x08
    187a:	21 15       	cp	r18, r1
    187c:	31 05       	cpc	r19, r1
    187e:	71 f0       	breq	.+28     	; 0x189c <DIO_u8GetPinValue+0x7e>
    1880:	82 c0       	rjmp	.+260    	; 0x1986 <DIO_u8GetPinValue+0x168>
    1882:	4f 81       	ldd	r20, Y+7	; 0x07
    1884:	58 85       	ldd	r21, Y+8	; 0x08
    1886:	42 30       	cpi	r20, 0x02	; 2
    1888:	51 05       	cpc	r21, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <DIO_u8GetPinValue+0x70>
    188c:	41 c0       	rjmp	.+130    	; 0x1910 <DIO_u8GetPinValue+0xf2>
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	83 30       	cpi	r24, 0x03	; 3
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <DIO_u8GetPinValue+0x7c>
    1898:	58 c0       	rjmp	.+176    	; 0x194a <DIO_u8GetPinValue+0x12c>
    189a:	75 c0       	rjmp	.+234    	; 0x1986 <DIO_u8GetPinValue+0x168>
        {
        case DIO_u8_PORTA:
            Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_PinID);
    189c:	e9 e3       	ldi	r30, 0x39	; 57
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	88 2f       	mov	r24, r24
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a9 01       	movw	r20, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <DIO_u8GetPinValue+0x96>
    18b0:	55 95       	asr	r21
    18b2:	47 95       	ror	r20
    18b4:	8a 95       	dec	r24
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <DIO_u8GetPinValue+0x92>
    18b8:	ca 01       	movw	r24, r20
    18ba:	81 70       	andi	r24, 0x01	; 1
    18bc:	89 83       	std	Y+1, r24	; 0x01
            if (Local_u8PinValue == 0)
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	88 23       	and	r24, r24
    18c2:	21 f4       	brne	.+8      	; 0x18cc <DIO_u8GetPinValue+0xae>
            {
                *Copy_pu8PinValue = DIO_u8_LOW;
    18c4:	ed 81       	ldd	r30, Y+5	; 0x05
    18c6:	fe 81       	ldd	r31, Y+6	; 0x06
    18c8:	10 82       	st	Z, r1
    18ca:	5d c0       	rjmp	.+186    	; 0x1986 <DIO_u8GetPinValue+0x168>
            }
            else
            {
                *Copy_pu8PinValue = DIO_u8_HIGH;
    18cc:	ed 81       	ldd	r30, Y+5	; 0x05
    18ce:	fe 81       	ldd	r31, Y+6	; 0x06
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	80 83       	st	Z, r24
    18d4:	58 c0       	rjmp	.+176    	; 0x1986 <DIO_u8GetPinValue+0x168>
            }

            break;
        case DIO_u8_PORTB:
            Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_PinID);
    18d6:	e6 e3       	ldi	r30, 0x36	; 54
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a9 01       	movw	r20, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <DIO_u8GetPinValue+0xd0>
    18ea:	55 95       	asr	r21
    18ec:	47 95       	ror	r20
    18ee:	8a 95       	dec	r24
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <DIO_u8GetPinValue+0xcc>
    18f2:	ca 01       	movw	r24, r20
    18f4:	81 70       	andi	r24, 0x01	; 1
    18f6:	89 83       	std	Y+1, r24	; 0x01
            if (Local_u8PinValue == 0)
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	88 23       	and	r24, r24
    18fc:	21 f4       	brne	.+8      	; 0x1906 <DIO_u8GetPinValue+0xe8>
            {
                *Copy_pu8PinValue = DIO_u8_LOW;
    18fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1900:	fe 81       	ldd	r31, Y+6	; 0x06
    1902:	10 82       	st	Z, r1
    1904:	40 c0       	rjmp	.+128    	; 0x1986 <DIO_u8GetPinValue+0x168>
            }
            else
            {
                *Copy_pu8PinValue = DIO_u8_HIGH;
    1906:	ed 81       	ldd	r30, Y+5	; 0x05
    1908:	fe 81       	ldd	r31, Y+6	; 0x06
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	80 83       	st	Z, r24
    190e:	3b c0       	rjmp	.+118    	; 0x1986 <DIO_u8GetPinValue+0x168>
            }

            break;
        case DIO_u8_PORTC:
            Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_PinID);
    1910:	e3 e3       	ldi	r30, 0x33	; 51
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a9 01       	movw	r20, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <DIO_u8GetPinValue+0x10a>
    1924:	55 95       	asr	r21
    1926:	47 95       	ror	r20
    1928:	8a 95       	dec	r24
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <DIO_u8GetPinValue+0x106>
    192c:	ca 01       	movw	r24, r20
    192e:	81 70       	andi	r24, 0x01	; 1
    1930:	89 83       	std	Y+1, r24	; 0x01
            if (Local_u8PinValue == 0)
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	88 23       	and	r24, r24
    1936:	21 f4       	brne	.+8      	; 0x1940 <DIO_u8GetPinValue+0x122>
            {
                *Copy_pu8PinValue = DIO_u8_LOW;
    1938:	ed 81       	ldd	r30, Y+5	; 0x05
    193a:	fe 81       	ldd	r31, Y+6	; 0x06
    193c:	10 82       	st	Z, r1
    193e:	23 c0       	rjmp	.+70     	; 0x1986 <DIO_u8GetPinValue+0x168>
            }
            else
            {
                *Copy_pu8PinValue = DIO_u8_HIGH;
    1940:	ed 81       	ldd	r30, Y+5	; 0x05
    1942:	fe 81       	ldd	r31, Y+6	; 0x06
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	80 83       	st	Z, r24
    1948:	1e c0       	rjmp	.+60     	; 0x1986 <DIO_u8GetPinValue+0x168>
            }

            break;
        case DIO_u8_PORTD:
            Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_PinID);
    194a:	e0 e3       	ldi	r30, 0x30	; 48
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a9 01       	movw	r20, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <DIO_u8GetPinValue+0x144>
    195e:	55 95       	asr	r21
    1960:	47 95       	ror	r20
    1962:	8a 95       	dec	r24
    1964:	e2 f7       	brpl	.-8      	; 0x195e <DIO_u8GetPinValue+0x140>
    1966:	ca 01       	movw	r24, r20
    1968:	81 70       	andi	r24, 0x01	; 1
    196a:	89 83       	std	Y+1, r24	; 0x01
            if (Local_u8PinValue == 0)
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	88 23       	and	r24, r24
    1970:	21 f4       	brne	.+8      	; 0x197a <DIO_u8GetPinValue+0x15c>
            {
                *Copy_pu8PinValue = DIO_u8_LOW;
    1972:	ed 81       	ldd	r30, Y+5	; 0x05
    1974:	fe 81       	ldd	r31, Y+6	; 0x06
    1976:	10 82       	st	Z, r1
    1978:	06 c0       	rjmp	.+12     	; 0x1986 <DIO_u8GetPinValue+0x168>
            }
            else
            {
                *Copy_pu8PinValue = DIO_u8_HIGH;
    197a:	ed 81       	ldd	r30, Y+5	; 0x05
    197c:	fe 81       	ldd	r31, Y+6	; 0x06
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	80 83       	st	Z, r24
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <DIO_u8GetPinValue+0x168>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1984:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8ErrorState;
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1988:	28 96       	adiw	r28, 0x08	; 8
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	2d 97       	sbiw	r28, 0x0d	; 13
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	8a 83       	std	Y+2, r24	; 0x02
    19b0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	21 f0       	breq	.+8      	; 0x19c4 <DIO_u8SetPortDirection+0x2a>
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	88 23       	and	r24, r24
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <DIO_u8SetPortDirection+0x2a>
    19c2:	7f c0       	rjmp	.+254    	; 0x1ac2 <DIO_u8SetPortDirection+0x128>
    {
        switch (Copy_u8PortID)
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	3d 87       	std	Y+13, r19	; 0x0d
    19cc:	2c 87       	std	Y+12, r18	; 0x0c
    19ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    19d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	91 05       	cpc	r25, r1
    19d6:	71 f1       	breq	.+92     	; 0x1a34 <DIO_u8SetPortDirection+0x9a>
    19d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    19da:	3d 85       	ldd	r19, Y+13	; 0x0d
    19dc:	22 30       	cpi	r18, 0x02	; 2
    19de:	31 05       	cpc	r19, r1
    19e0:	2c f4       	brge	.+10     	; 0x19ec <DIO_u8SetPortDirection+0x52>
    19e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    19e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	69 f0       	breq	.+26     	; 0x1a04 <DIO_u8SetPortDirection+0x6a>
    19ea:	69 c0       	rjmp	.+210    	; 0x1abe <DIO_u8SetPortDirection+0x124>
    19ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    19ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    19f0:	22 30       	cpi	r18, 0x02	; 2
    19f2:	31 05       	cpc	r19, r1
    19f4:	b1 f1       	breq	.+108    	; 0x1a62 <DIO_u8SetPortDirection+0xc8>
    19f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    19f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    19fa:	83 30       	cpi	r24, 0x03	; 3
    19fc:	91 05       	cpc	r25, r1
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <DIO_u8SetPortDirection+0x68>
    1a00:	47 c0       	rjmp	.+142    	; 0x1a90 <DIO_u8SetPortDirection+0xf6>
    1a02:	5d c0       	rjmp	.+186    	; 0x1abe <DIO_u8SetPortDirection+0x124>
        {
        case DIO_u8_PORTA:
            switch (Copy_u8PortDirection)
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	3b 87       	std	Y+11, r19	; 0x0b
    1a0c:	2a 87       	std	Y+10, r18	; 0x0a
    1a0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a10:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	59 f0       	breq	.+22     	; 0x1a2c <DIO_u8SetPortDirection+0x92>
    1a16:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a18:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a1a:	21 30       	cpi	r18, 0x01	; 1
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <DIO_u8SetPortDirection+0x88>
    1a20:	51 c0       	rjmp	.+162    	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRA_REG = 0xff;
    1a22:	ea e3       	ldi	r30, 0x3A	; 58
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	80 83       	st	Z, r24
    1a2a:	4c c0       	rjmp	.+152    	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
                break;
            case DIO_u8_INPUT:
                DIO_u8_DDRA_REG = 0x00;
    1a2c:	ea e3       	ldi	r30, 0x3A	; 58
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	10 82       	st	Z, r1
    1a32:	48 c0       	rjmp	.+144    	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
        case DIO_u8_PORTB:
            switch (Copy_u8PortDirection)
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	39 87       	std	Y+9, r19	; 0x09
    1a3c:	28 87       	std	Y+8, r18	; 0x08
    1a3e:	88 85       	ldd	r24, Y+8	; 0x08
    1a40:	99 85       	ldd	r25, Y+9	; 0x09
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	51 f0       	breq	.+20     	; 0x1a5a <DIO_u8SetPortDirection+0xc0>
    1a46:	28 85       	ldd	r18, Y+8	; 0x08
    1a48:	39 85       	ldd	r19, Y+9	; 0x09
    1a4a:	21 30       	cpi	r18, 0x01	; 1
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	d1 f5       	brne	.+116    	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRB_REG = 0xff;
    1a50:	e7 e3       	ldi	r30, 0x37	; 55
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	8f ef       	ldi	r24, 0xFF	; 255
    1a56:	80 83       	st	Z, r24
    1a58:	35 c0       	rjmp	.+106    	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
                break;
            case DIO_u8_INPUT:
                DIO_u8_DDRB_REG = 0x00;
    1a5a:	e7 e3       	ldi	r30, 0x37	; 55
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	10 82       	st	Z, r1
    1a60:	31 c0       	rjmp	.+98     	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
        case DIO_u8_PORTC:
            switch (Copy_u8PortDirection)
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	3f 83       	std	Y+7, r19	; 0x07
    1a6a:	2e 83       	std	Y+6, r18	; 0x06
    1a6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	51 f0       	breq	.+20     	; 0x1a88 <DIO_u8SetPortDirection+0xee>
    1a74:	2e 81       	ldd	r18, Y+6	; 0x06
    1a76:	3f 81       	ldd	r19, Y+7	; 0x07
    1a78:	21 30       	cpi	r18, 0x01	; 1
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	19 f5       	brne	.+70     	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRC_REG = 0xff;
    1a7e:	e4 e3       	ldi	r30, 0x34	; 52
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	8f ef       	ldi	r24, 0xFF	; 255
    1a84:	80 83       	st	Z, r24
    1a86:	1e c0       	rjmp	.+60     	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
                break;
            case DIO_u8_INPUT:
                DIO_u8_DDRC_REG = 0x00;
    1a88:	e4 e3       	ldi	r30, 0x34	; 52
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	10 82       	st	Z, r1
    1a8e:	1a c0       	rjmp	.+52     	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
        case DIO_u8_PORTD:
            switch (Copy_u8PortDirection)
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	3d 83       	std	Y+5, r19	; 0x05
    1a98:	2c 83       	std	Y+4, r18	; 0x04
    1a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	51 f0       	breq	.+20     	; 0x1ab6 <DIO_u8SetPortDirection+0x11c>
    1aa2:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa4:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa6:	21 30       	cpi	r18, 0x01	; 1
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	61 f4       	brne	.+24     	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
            {
            case DIO_u8_OUTPUT:
                DIO_u8_DDRD_REG = 0xff;
    1aac:	e1 e3       	ldi	r30, 0x31	; 49
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	8f ef       	ldi	r24, 0xFF	; 255
    1ab2:	80 83       	st	Z, r24
    1ab4:	07 c0       	rjmp	.+14     	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
                break;
            case DIO_u8_INPUT:
                DIO_u8_DDRD_REG = 0x00;
    1ab6:	e1 e3       	ldi	r30, 0x31	; 49
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	10 82       	st	Z, r1
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
                break;
            }
            break;
        default:
            Local_u8ErrorState = STD_TYPES_NOK;
    1abe:	19 82       	std	Y+1, r1	; 0x01
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <DIO_u8SetPortDirection+0x12a>
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1ac2:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8ErrorState;
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac6:	2d 96       	adiw	r28, 0x0d	; 13
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <DIO_u8SetPortValue+0x6>
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <DIO_u8SetPortValue+0x8>
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	8a 83       	std	Y+2, r24	; 0x02
    1ae8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8PortID)
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	3d 83       	std	Y+5, r19	; 0x05
    1af6:	2c 83       	std	Y+4, r18	; 0x04
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	9d 81       	ldd	r25, Y+5	; 0x05
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	91 05       	cpc	r25, r1
    1b00:	d1 f0       	breq	.+52     	; 0x1b36 <DIO_u8SetPortValue+0x5e>
    1b02:	2c 81       	ldd	r18, Y+4	; 0x04
    1b04:	3d 81       	ldd	r19, Y+5	; 0x05
    1b06:	22 30       	cpi	r18, 0x02	; 2
    1b08:	31 05       	cpc	r19, r1
    1b0a:	2c f4       	brge	.+10     	; 0x1b16 <DIO_u8SetPortValue+0x3e>
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	61 f0       	breq	.+24     	; 0x1b2c <DIO_u8SetPortValue+0x54>
    1b14:	1f c0       	rjmp	.+62     	; 0x1b54 <DIO_u8SetPortValue+0x7c>
    1b16:	2c 81       	ldd	r18, Y+4	; 0x04
    1b18:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1a:	22 30       	cpi	r18, 0x02	; 2
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	81 f0       	breq	.+32     	; 0x1b40 <DIO_u8SetPortValue+0x68>
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	83 30       	cpi	r24, 0x03	; 3
    1b26:	91 05       	cpc	r25, r1
    1b28:	81 f0       	breq	.+32     	; 0x1b4a <DIO_u8SetPortValue+0x72>
    1b2a:	14 c0       	rjmp	.+40     	; 0x1b54 <DIO_u8SetPortValue+0x7c>
    {
    case DIO_u8_PORTA:
        DIO_u8_PORTA_REG = Copy_u8PortValue;
    1b2c:	eb e3       	ldi	r30, 0x3B	; 59
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	80 83       	st	Z, r24
    1b34:	10 c0       	rjmp	.+32     	; 0x1b56 <DIO_u8SetPortValue+0x7e>
        break;
    case DIO_u8_PORTB:
        DIO_u8_PORTB_REG = Copy_u8PortValue;
    1b36:	e8 e3       	ldi	r30, 0x38	; 56
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	80 83       	st	Z, r24
    1b3e:	0b c0       	rjmp	.+22     	; 0x1b56 <DIO_u8SetPortValue+0x7e>
        break;
    case DIO_u8_PORTC:
        DIO_u8_PORTC_REG = Copy_u8PortValue;
    1b40:	e5 e3       	ldi	r30, 0x35	; 53
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	80 83       	st	Z, r24
    1b48:	06 c0       	rjmp	.+12     	; 0x1b56 <DIO_u8SetPortValue+0x7e>
        break;
    case DIO_u8_PORTD:
        DIO_u8_PORTD_REG = Copy_u8PortValue;
    1b4a:	e2 e3       	ldi	r30, 0x32	; 50
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	80 83       	st	Z, r24
    1b52:	01 c0       	rjmp	.+2      	; 0x1b56 <DIO_u8SetPortValue+0x7e>
        break;

    default:
        Local_u8ErrorState = STD_TYPES_NOK;
    1b54:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8ErrorState;
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <DIO_u8GetPortValue+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <DIO_u8GetPortValue+0x8>
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <DIO_u8GetPortValue+0xa>
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	8a 83       	std	Y+2, r24	; 0x02
    1b78:	7c 83       	std	Y+4, r23	; 0x04
    1b7a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu8ReturnedPortValue != NULL)
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	e9 f1       	breq	.+122    	; 0x1c02 <DIO_u8GetPortValue+0x9a>
    {
        switch (Copy_u8PortId)
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	3e 83       	std	Y+6, r19	; 0x06
    1b90:	2d 83       	std	Y+5, r18	; 0x05
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	91 05       	cpc	r25, r1
    1b9a:	e1 f0       	breq	.+56     	; 0x1bd4 <DIO_u8GetPortValue+0x6c>
    1b9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <DIO_u8GetPortValue+0x48>
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	61 f0       	breq	.+24     	; 0x1bc6 <DIO_u8GetPortValue+0x5e>
    1bae:	27 c0       	rjmp	.+78     	; 0x1bfe <DIO_u8GetPortValue+0x96>
    1bb0:	2d 81       	ldd	r18, Y+5	; 0x05
    1bb2:	3e 81       	ldd	r19, Y+6	; 0x06
    1bb4:	22 30       	cpi	r18, 0x02	; 2
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	a1 f0       	breq	.+40     	; 0x1be2 <DIO_u8GetPortValue+0x7a>
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	83 30       	cpi	r24, 0x03	; 3
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	b1 f0       	breq	.+44     	; 0x1bf0 <DIO_u8GetPortValue+0x88>
    1bc4:	1c c0       	rjmp	.+56     	; 0x1bfe <DIO_u8GetPortValue+0x96>
        {
        case DIO_u8_PORTA:
            *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1bc6:	e9 e3       	ldi	r30, 0x39	; 57
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bce:	fc 81       	ldd	r31, Y+4	; 0x04
    1bd0:	80 83       	st	Z, r24
    1bd2:	18 c0       	rjmp	.+48     	; 0x1c04 <DIO_u8GetPortValue+0x9c>
            break;
        case DIO_u8_PORTB:
            *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1bd4:	e6 e3       	ldi	r30, 0x36	; 54
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	eb 81       	ldd	r30, Y+3	; 0x03
    1bdc:	fc 81       	ldd	r31, Y+4	; 0x04
    1bde:	80 83       	st	Z, r24
    1be0:	11 c0       	rjmp	.+34     	; 0x1c04 <DIO_u8GetPortValue+0x9c>
            break;
        case DIO_u8_PORTC:
            *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1be2:	e3 e3       	ldi	r30, 0x33	; 51
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bea:	fc 81       	ldd	r31, Y+4	; 0x04
    1bec:	80 83       	st	Z, r24
    1bee:	0a c0       	rjmp	.+20     	; 0x1c04 <DIO_u8GetPortValue+0x9c>
            break;
        case DIO_u8_PORTD:
            *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    1bf0:	e0 e3       	ldi	r30, 0x30	; 48
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf8:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfa:	80 83       	st	Z, r24
    1bfc:	03 c0       	rjmp	.+6      	; 0x1c04 <DIO_u8GetPortValue+0x9c>
            break;

        default:
            Local_u8ErrorState = STD_TYPES_NOK;
    1bfe:	19 82       	std	Y+1, r1	; 0x01
    1c00:	01 c0       	rjmp	.+2      	; 0x1c04 <DIO_u8GetPortValue+0x9c>
            break;
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1c02:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8ErrorState;
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c06:	26 96       	adiw	r28, 0x06	; 6
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <ADC_VoidInit>:
static void (*ADC_pfNotification)(u16) = NULL;
// ADC Busy Flag
static u8 ADC_u8BusyFlag = 0;
/**********************************************************************/
void ADC_VoidInit(void)
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_REFS0_BIT);
#elif Voltage_Ref_ADMUX == reserved
    SET_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_REFS1_BIT);
    CLR_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_REFS0_BIT);
#elif Voltage_Ref_ADMUX == Internal_Voltage_Ref
    SET_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_REFS1_BIT);
    1c20:	a7 e2       	ldi	r26, 0x27	; 39
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e7 e2       	ldi	r30, 0x27	; 39
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 68       	ori	r24, 0x80	; 128
    1c2c:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_REFS0_BIT);
    1c2e:	a7 e2       	ldi	r26, 0x27	; 39
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e7 e2       	ldi	r30, 0x27	; 39
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	80 64       	ori	r24, 0x40	; 64
    1c3a:	8c 93       	st	X, r24
#endif
/*************************** Adjecter control ***************************/
#if Adjecter == Right_adj
    CLR_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_ADLAR_BIT);
    1c3c:	a7 e2       	ldi	r26, 0x27	; 39
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e7 e2       	ldi	r30, 0x27	; 39
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8f 7d       	andi	r24, 0xDF	; 223
    1c48:	8c 93       	st	X, r24
#elif Adjecter == Left_adj
    SET_BIT(ADC_u8_ADMUX_REG, ADMUX_REG_ADLAR_BIT);
#endif
/*********************** conversion mode control ***********************/
#if Conversion_options == Starting_Conversion
    SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADEN_BIT);
    1c4a:	a6 e2       	ldi	r26, 0x26	; 38
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e6 e2       	ldi	r30, 0x26	; 38
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	80 68       	ori	r24, 0x80	; 128
    1c56:	8c 93       	st	X, r24
#elif CLK_options == CLK_4MKHz
    CLR_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS2_BIT);
    SET_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS1_BIT);
    CLR_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS0_BIT);
#elif CLK_options == CLK_8MKHz
    CLR_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS2_BIT);
    1c58:	a0 e5       	ldi	r26, 0x50	; 80
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e0 e5       	ldi	r30, 0x50	; 80
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8f 77       	andi	r24, 0x7F	; 127
    1c64:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS1_BIT);
    1c66:	a0 e5       	ldi	r26, 0x50	; 80
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e0 e5       	ldi	r30, 0x50	; 80
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	80 64       	ori	r24, 0x40	; 64
    1c72:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS0_BIT);
    1c74:	a0 e5       	ldi	r26, 0x50	; 80
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e0 e5       	ldi	r30, 0x50	; 80
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	80 62       	ori	r24, 0x20	; 32
    1c80:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS2_BIT);
    SET_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS1_BIT);
    SET_BIT(ADC_u8_SFIOR_REG, SFIOR_REG_ADPS0_BIT);
#endif
    /***************************** Enable ADC *****************************/
    SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADEN_BIT);
    1c82:	a6 e2       	ldi	r26, 0x26	; 38
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e6 e2       	ldi	r30, 0x26	; 38
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	80 68       	ori	r24, 0x80	; 128
    1c8e:	8c 93       	st	X, r24
}
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <ADC_u8GetDigitalValueSynchNonBlocking>:

/**********************************************************************/
u8 ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNum, u16 *Copy_pu16DigitalValue)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	28 97       	sbiw	r28, 0x08	; 8
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	8e 83       	std	Y+6, r24	; 0x06
    1cac:	78 87       	std	Y+8, r23	; 0x08
    1cae:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32TimeOutCounter = 0;
    1cb4:	19 82       	std	Y+1, r1	; 0x01
    1cb6:	1a 82       	std	Y+2, r1	; 0x02
    1cb8:	1b 82       	std	Y+3, r1	; 0x03
    1cba:	1c 82       	std	Y+4, r1	; 0x04
    if ((Copy_u8ChannelNum < 32) && (Copy_pu16DigitalValue != NULL) && (ADC_u8BusyFlag == 0))
    1cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbe:	80 32       	cpi	r24, 0x20	; 32
    1cc0:	08 f0       	brcs	.+2      	; 0x1cc4 <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
    1cc2:	65 c0       	rjmp	.+202    	; 0x1d8e <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
    1cc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc6:	98 85       	ldd	r25, Y+8	; 0x08
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	09 f4       	brne	.+2      	; 0x1cce <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
    1ccc:	60 c0       	rjmp	.+192    	; 0x1d8e <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
    1cce:	80 91 8e 00 	lds	r24, 0x008E
    1cd2:	88 23       	and	r24, r24
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <ADC_u8GetDigitalValueSynchNonBlocking+0x42>
    1cd6:	5b c0       	rjmp	.+182    	; 0x1d8e <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
    {
        // Clear the channel selection bits and set the new channel number
        ADC_u8_ADMUX_REG &= 0xE0;
    1cd8:	a7 e2       	ldi	r26, 0x27	; 39
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e7 e2       	ldi	r30, 0x27	; 39
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	80 7e       	andi	r24, 0xE0	; 224
    1ce4:	8c 93       	st	X, r24
        ADC_u8_ADMUX_REG |= (Copy_u8ChannelNum & 0x1F);
    1ce6:	a7 e2       	ldi	r26, 0x27	; 39
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e7 e2       	ldi	r30, 0x27	; 39
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	98 2f       	mov	r25, r24
    1cf2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf4:	8f 71       	andi	r24, 0x1F	; 31
    1cf6:	89 2b       	or	r24, r25
    1cf8:	8c 93       	st	X, r24
        /* Start Conversion */
        SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADSC_BIT);
    1cfa:	a6 e2       	ldi	r26, 0x26	; 38
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e6 e2       	ldi	r30, 0x26	; 38
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	80 64       	ori	r24, 0x40	; 64
    1d06:	8c 93       	st	X, r24
    1d08:	0b c0       	rjmp	.+22     	; 0x1d20 <ADC_u8GetDigitalValueSynchNonBlocking+0x8a>
        /* wait flag = 1 */
        while ((GET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADIF_BIT) == 0) && (Local_u32TimeOutCounter < ADC_u32_TimeOut_MaxValue))
        {
            Local_u32TimeOutCounter++;
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0e:	ab 81       	ldd	r26, Y+3	; 0x03
    1d10:	bc 81       	ldd	r27, Y+4	; 0x04
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	a1 1d       	adc	r26, r1
    1d16:	b1 1d       	adc	r27, r1
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	9a 83       	std	Y+2, r25	; 0x02
    1d1c:	ab 83       	std	Y+3, r26	; 0x03
    1d1e:	bc 83       	std	Y+4, r27	; 0x04
        ADC_u8_ADMUX_REG &= 0xE0;
        ADC_u8_ADMUX_REG |= (Copy_u8ChannelNum & 0x1F);
        /* Start Conversion */
        SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADSC_BIT);
        /* wait flag = 1 */
        while ((GET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADIF_BIT) == 0) && (Local_u32TimeOutCounter < ADC_u32_TimeOut_MaxValue))
    1d20:	e6 e2       	ldi	r30, 0x26	; 38
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	82 95       	swap	r24
    1d28:	8f 70       	andi	r24, 0x0F	; 15
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	81 70       	andi	r24, 0x01	; 1
    1d30:	90 70       	andi	r25, 0x00	; 0
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	61 f4       	brne	.+24     	; 0x1d4e <ADC_u8GetDigitalValueSynchNonBlocking+0xb8>
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	ab 81       	ldd	r26, Y+3	; 0x03
    1d3c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d3e:	80 35       	cpi	r24, 0x50	; 80
    1d40:	23 ec       	ldi	r18, 0xC3	; 195
    1d42:	92 07       	cpc	r25, r18
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	a2 07       	cpc	r26, r18
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	b2 07       	cpc	r27, r18
    1d4c:	f0 f2       	brcs	.-68     	; 0x1d0a <ADC_u8GetDigitalValueSynchNonBlocking+0x74>
        ************************** Clear Flag **********************
        ! flag is cleared automatically when it is at EXTI
        % In our situation, we have to clear the flag by ourselves
        ************************************************************
        */
        if (GET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADIF_BIT) != 0) //(Local_u32TimeOutCounter < ADC_u32_TimeOut_MaxValue)
    1d4e:	e6 e2       	ldi	r30, 0x26	; 38
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	82 95       	swap	r24
    1d56:	8f 70       	andi	r24, 0x0F	; 15
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	81 70       	andi	r24, 0x01	; 1
    1d5e:	90 70       	andi	r25, 0x00	; 0
    1d60:	88 23       	and	r24, r24
    1d62:	99 f0       	breq	.+38     	; 0x1d8a <ADC_u8GetDigitalValueSynchNonBlocking+0xf4>
        {
            // Clear conversion complete flag
            SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADIF_BIT);
    1d64:	a6 e2       	ldi	r26, 0x26	; 38
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e6 e2       	ldi	r30, 0x26	; 38
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	80 61       	ori	r24, 0x10	; 16
    1d70:	8c 93       	st	X, r24
            // clear busy flag
            ADC_u8BusyFlag = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	80 93 8e 00 	sts	0x008E, r24
            /* Read Digital Value */
            *Copy_pu16DigitalValue = ADC_u16_ADC_REG;
    1d78:	e4 e2       	ldi	r30, 0x24	; 36
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	91 81       	ldd	r25, Z+1	; 0x01
    1d80:	ef 81       	ldd	r30, Y+7	; 0x07
    1d82:	f8 85       	ldd	r31, Y+8	; 0x08
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
        }
        else
        {
            Local_u8ErrorState = STD_TYPES_NOK;
    1d8a:	1d 82       	std	Y+5, r1	; 0x05
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
        }
    }
    else
        Local_u8ErrorState = STD_TYPES_NOK;
    1d8e:	1d 82       	std	Y+5, r1	; 0x05
    return Local_u8ErrorState;
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d92:	28 96       	adiw	r28, 0x08	; 8
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <ADC_u8GetDigitalValue_A_Synch>:
u8 ADC_u8GetDigitalValue_A_Synch(u8 Copy_u8ChannelNum, void(*Copy_pfNotificiation(u16)))
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <ADC_u8GetDigitalValue_A_Synch+0x6>
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <ADC_u8GetDigitalValue_A_Synch+0x8>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	8a 83       	std	Y+2, r24	; 0x02
    1db2:	7c 83       	std	Y+4, r23	; 0x04
    1db4:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8ErrorState = STD_TYPES_OK;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8ChannelNum < 32) && (Copy_pfNotificiation != NULL) && (ADC_u8BusyFlag == 0))
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	80 32       	cpi	r24, 0x20	; 32
    1dbe:	88 f5       	brcc	.+98     	; 0x1e22 <ADC_u8GetDigitalValue_A_Synch+0x7e>
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	69 f1       	breq	.+90     	; 0x1e22 <ADC_u8GetDigitalValue_A_Synch+0x7e>
    1dc8:	80 91 8e 00 	lds	r24, 0x008E
    1dcc:	88 23       	and	r24, r24
    1dce:	49 f5       	brne	.+82     	; 0x1e22 <ADC_u8GetDigitalValue_A_Synch+0x7e>
    {
        // Set Flag to make ADC is Busy
        ADC_u8BusyFlag = 1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	80 93 8e 00 	sts	0x008E, r24
        // Update Golable Pointer To A Function
        ADC_pfNotification = Copy_pfNotificiation;
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	90 93 8d 00 	sts	0x008D, r25
    1dde:	80 93 8c 00 	sts	0x008C, r24
        // Enable ADC Interrupt
        SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADIE_BIT);
    1de2:	a6 e2       	ldi	r26, 0x26	; 38
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e6 e2       	ldi	r30, 0x26	; 38
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	88 60       	ori	r24, 0x08	; 8
    1dee:	8c 93       	st	X, r24
        // Clear the channel selection bits and set the new channel number
        ADC_u8_ADMUX_REG &= 0xE0;
    1df0:	a7 e2       	ldi	r26, 0x27	; 39
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e7 e2       	ldi	r30, 0x27	; 39
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	80 7e       	andi	r24, 0xE0	; 224
    1dfc:	8c 93       	st	X, r24
        ADC_u8_ADMUX_REG |= (Copy_u8ChannelNum & 0x1F);
    1dfe:	a7 e2       	ldi	r26, 0x27	; 39
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e7 e2       	ldi	r30, 0x27	; 39
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	98 2f       	mov	r25, r24
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	8f 71       	andi	r24, 0x1F	; 31
    1e0e:	89 2b       	or	r24, r25
    1e10:	8c 93       	st	X, r24
        /* Start Conversion */
        SET_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADSC_BIT);
    1e12:	a6 e2       	ldi	r26, 0x26	; 38
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e6 e2       	ldi	r30, 0x26	; 38
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 64       	ori	r24, 0x40	; 64
    1e1e:	8c 93       	st	X, r24
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <ADC_u8GetDigitalValue_A_Synch+0x80>
    }
    else
    {
        local_u8ErrorState = STD_TYPES_NOK;
    1e22:	19 82       	std	Y+1, r1	; 0x01
    }
    return local_u8ErrorState;
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <ADC_u8GetADC_DigitalValue>:
u8 ADC_u8GetADC_DigitalValue(u16 *Copy_pu16DigitalValue)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <ADC_u8GetADC_DigitalValue+0x6>
    1e3a:	0f 92       	push	r0
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	9b 83       	std	Y+3, r25	; 0x03
    1e42:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pu16DigitalValue != NULL)
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	49 f0       	breq	.+18     	; 0x1e62 <ADC_u8GetADC_DigitalValue+0x2e>
    {
        // Read ADC Register
        *Copy_pu16DigitalValue = ADC_u16_ADC_REG;
    1e50:	e4 e2       	ldi	r30, 0x24	; 36
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	91 81       	ldd	r25, Z+1	; 0x01
    1e58:	ea 81       	ldd	r30, Y+2	; 0x02
    1e5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	80 83       	st	Z, r24
    1e60:	01 c0       	rjmp	.+2      	; 0x1e64 <ADC_u8GetADC_DigitalValue+0x30>
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1e62:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ErrorState;
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <__vector_16>:

// Prototype for ADC ISR
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    1e72:	1f 92       	push	r1
    1e74:	0f 92       	push	r0
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	0f 92       	push	r0
    1e7a:	11 24       	eor	r1, r1
    1e7c:	2f 93       	push	r18
    1e7e:	3f 93       	push	r19
    1e80:	4f 93       	push	r20
    1e82:	5f 93       	push	r21
    1e84:	6f 93       	push	r22
    1e86:	7f 93       	push	r23
    1e88:	8f 93       	push	r24
    1e8a:	9f 93       	push	r25
    1e8c:	af 93       	push	r26
    1e8e:	bf 93       	push	r27
    1e90:	ef 93       	push	r30
    1e92:	ff 93       	push	r31
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    if (ADC_pfNotification != NULL)
    1e9c:	80 91 8c 00 	lds	r24, 0x008C
    1ea0:	90 91 8d 00 	lds	r25, 0x008D
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	99 f0       	breq	.+38     	; 0x1ece <__vector_16+0x5c>
    {
        // Clear ADC Flag
        ADC_u8BusyFlag = 0;
    1ea8:	10 92 8e 00 	sts	0x008E, r1
        // Clear PIE of ADC
        CLR_BIT(ADC_u8_ADCSRA_REG, ADCSRA_REG_ADIE_BIT);
    1eac:	a6 e2       	ldi	r26, 0x26	; 38
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e6 e2       	ldi	r30, 0x26	; 38
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	87 7f       	andi	r24, 0xF7	; 247
    1eb8:	8c 93       	st	X, r24
        // Call Notification Function
        ADC_pfNotification(ADC_u16_ADC_REG);
    1eba:	20 91 8c 00 	lds	r18, 0x008C
    1ebe:	30 91 8d 00 	lds	r19, 0x008D
    1ec2:	e4 e2       	ldi	r30, 0x24	; 36
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	f9 01       	movw	r30, r18
    1ecc:	09 95       	icall
    }
}
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	ff 91       	pop	r31
    1ed4:	ef 91       	pop	r30
    1ed6:	bf 91       	pop	r27
    1ed8:	af 91       	pop	r26
    1eda:	9f 91       	pop	r25
    1edc:	8f 91       	pop	r24
    1ede:	7f 91       	pop	r23
    1ee0:	6f 91       	pop	r22
    1ee2:	5f 91       	pop	r21
    1ee4:	4f 91       	pop	r20
    1ee6:	3f 91       	pop	r19
    1ee8:	2f 91       	pop	r18
    1eea:	0f 90       	pop	r0
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	0f 90       	pop	r0
    1ef0:	1f 90       	pop	r1
    1ef2:	18 95       	reti

00001ef4 <StepperMotor_move>:
#include "stepper_private.h"
/***************************************************************************/

// Function to control the stepper motor movement
void StepperMotor_move(u8 direction, u16 angle)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	a5 97       	sbiw	r28, 0x25	; 37
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	8b a3       	std	Y+35, r24	; 0x23
    1f0a:	7d a3       	std	Y+37, r23	; 0x25
    1f0c:	6c a3       	std	Y+36, r22	; 0x24
    // Set direction pins as OUTPUT
    DIO_voidSetPinDirection(stepper_motor_port, stepper_motor_blue, DIO_u8_OUTPUT);
    1f0e:	83 e0       	ldi	r24, 0x03	; 3
    1f10:	64 e0       	ldi	r22, 0x04	; 4
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(stepper_motor_port, stepper_motor_pink, DIO_u8_OUTPUT);
    1f18:	83 e0       	ldi	r24, 0x03	; 3
    1f1a:	65 e0       	ldi	r22, 0x05	; 5
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(stepper_motor_port, stepper_motor_yellow, DIO_u8_OUTPUT);
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	66 e0       	ldi	r22, 0x06	; 6
    1f26:	41 e0       	ldi	r20, 0x01	; 1
    1f28:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(stepper_motor_port, stepper_motor_orange, DIO_u8_OUTPUT);
    1f2c:	83 e0       	ldi	r24, 0x03	; 3
    1f2e:	67 e0       	ldi	r22, 0x07	; 7
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>

    // Calculate the number of steps based on the motor's step angle and microstepping settings
    u16 steps = ((angle * STEPS_PER_REVOLUTION) / 360) / 4;
    1f36:	8c a1       	ldd	r24, Y+36	; 0x24
    1f38:	9d a1       	ldd	r25, Y+37	; 0x25
    1f3a:	98 2f       	mov	r25, r24
    1f3c:	88 27       	eor	r24, r24
    1f3e:	99 0f       	add	r25, r25
    1f40:	99 0f       	add	r25, r25
    1f42:	99 0f       	add	r25, r25
    1f44:	20 ea       	ldi	r18, 0xA0	; 160
    1f46:	35 e0       	ldi	r19, 0x05	; 5
    1f48:	b9 01       	movw	r22, r18
    1f4a:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9a a3       	std	Y+34, r25	; 0x22
    1f52:	89 a3       	std	Y+33, r24	; 0x21

    if (direction == CW)
    1f54:	8b a1       	ldd	r24, Y+35	; 0x23
    1f56:	88 23       	and	r24, r24
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <StepperMotor_move+0x68>
    1f5a:	d3 c0       	rjmp	.+422    	; 0x2102 <StepperMotor_move+0x20e>
    {
        for (u16 i = 0; i < steps; i++)
    1f5c:	18 a2       	std	Y+32, r1	; 0x20
    1f5e:	1f 8e       	std	Y+31, r1	; 0x1f
    1f60:	c7 c0       	rjmp	.+398    	; 0x20f0 <StepperMotor_move+0x1fc>
        {
            // Define the step sequence for clockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_HIGH);
    1f62:	83 e0       	ldi	r24, 0x03	; 3
    1f64:	64 e0       	ldi	r22, 0x04	; 4
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	65 e0       	ldi	r22, 0x05	; 5
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	66 e0       	ldi	r22, 0x06	; 6
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	67 e0       	ldi	r22, 0x07	; 7
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            // Define the step sequence for clockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1f8a:	83 e0       	ldi	r24, 0x03	; 3
    1f8c:	64 e0       	ldi	r22, 0x04	; 4
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_HIGH);
    1f94:	83 e0       	ldi	r24, 0x03	; 3
    1f96:	65 e0       	ldi	r22, 0x05	; 5
    1f98:	41 e0       	ldi	r20, 0x01	; 1
    1f9a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1f9e:	83 e0       	ldi	r24, 0x03	; 3
    1fa0:	66 e0       	ldi	r22, 0x06	; 6
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1fa8:	83 e0       	ldi	r24, 0x03	; 3
    1faa:	67 e0       	ldi	r22, 0x07	; 7
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            // Define the step sequence for clockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1fb2:	83 e0       	ldi	r24, 0x03	; 3
    1fb4:	64 e0       	ldi	r22, 0x04	; 4
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1fbc:	83 e0       	ldi	r24, 0x03	; 3
    1fbe:	65 e0       	ldi	r22, 0x05	; 5
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_HIGH);
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	66 e0       	ldi	r22, 0x06	; 6
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	67 e0       	ldi	r22, 0x07	; 7
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            // Define the step sequence for clockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    1fda:	83 e0       	ldi	r24, 0x03	; 3
    1fdc:	64 e0       	ldi	r22, 0x04	; 4
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	65 e0       	ldi	r22, 0x05	; 5
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    1fee:	83 e0       	ldi	r24, 0x03	; 3
    1ff0:	66 e0       	ldi	r22, 0x06	; 6
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_HIGH);
    1ff8:	83 e0       	ldi	r24, 0x03	; 3
    1ffa:	67 e0       	ldi	r22, 0x07	; 7
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a0 e2       	ldi	r26, 0x20	; 32
    2008:	b1 e4       	ldi	r27, 0x41	; 65
    200a:	89 8f       	std	Y+25, r24	; 0x19
    200c:	9a 8f       	std	Y+26, r25	; 0x1a
    200e:	ab 8f       	std	Y+27, r26	; 0x1b
    2010:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2012:	69 8d       	ldd	r22, Y+25	; 0x19
    2014:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2016:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2018:	9c 8d       	ldd	r25, Y+28	; 0x1c
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	4a e7       	ldi	r20, 0x7A	; 122
    2020:	53 e4       	ldi	r21, 0x43	; 67
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	8d 8b       	std	Y+21, r24	; 0x15
    202c:	9e 8b       	std	Y+22, r25	; 0x16
    202e:	af 8b       	std	Y+23, r26	; 0x17
    2030:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2032:	6d 89       	ldd	r22, Y+21	; 0x15
    2034:	7e 89       	ldd	r23, Y+22	; 0x16
    2036:	8f 89       	ldd	r24, Y+23	; 0x17
    2038:	98 8d       	ldd	r25, Y+24	; 0x18
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e8       	ldi	r20, 0x80	; 128
    2040:	5f e3       	ldi	r21, 0x3F	; 63
    2042:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2046:	88 23       	and	r24, r24
    2048:	2c f4       	brge	.+10     	; 0x2054 <StepperMotor_move+0x160>
		__ticks = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9c 8b       	std	Y+20, r25	; 0x14
    2050:	8b 8b       	std	Y+19, r24	; 0x13
    2052:	3f c0       	rjmp	.+126    	; 0x20d2 <StepperMotor_move+0x1de>
	else if (__tmp > 65535)
    2054:	6d 89       	ldd	r22, Y+21	; 0x15
    2056:	7e 89       	ldd	r23, Y+22	; 0x16
    2058:	8f 89       	ldd	r24, Y+23	; 0x17
    205a:	98 8d       	ldd	r25, Y+24	; 0x18
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	3f ef       	ldi	r19, 0xFF	; 255
    2060:	4f e7       	ldi	r20, 0x7F	; 127
    2062:	57 e4       	ldi	r21, 0x47	; 71
    2064:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2068:	18 16       	cp	r1, r24
    206a:	4c f5       	brge	.+82     	; 0x20be <StepperMotor_move+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206c:	69 8d       	ldd	r22, Y+25	; 0x19
    206e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2070:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2072:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e2       	ldi	r20, 0x20	; 32
    207a:	51 e4       	ldi	r21, 0x41	; 65
    207c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9c 8b       	std	Y+20, r25	; 0x14
    2092:	8b 8b       	std	Y+19, r24	; 0x13
    2094:	0f c0       	rjmp	.+30     	; 0x20b4 <StepperMotor_move+0x1c0>
    2096:	89 e1       	ldi	r24, 0x19	; 25
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9a 8b       	std	Y+18, r25	; 0x12
    209c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    209e:	89 89       	ldd	r24, Y+17	; 0x11
    20a0:	9a 89       	ldd	r25, Y+18	; 0x12
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <StepperMotor_move+0x1ae>
    20a6:	9a 8b       	std	Y+18, r25	; 0x12
    20a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20aa:	8b 89       	ldd	r24, Y+19	; 0x13
    20ac:	9c 89       	ldd	r25, Y+20	; 0x14
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	9c 8b       	std	Y+20, r25	; 0x14
    20b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b4:	8b 89       	ldd	r24, Y+19	; 0x13
    20b6:	9c 89       	ldd	r25, Y+20	; 0x14
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	69 f7       	brne	.-38     	; 0x2096 <StepperMotor_move+0x1a2>
    20bc:	14 c0       	rjmp	.+40     	; 0x20e6 <StepperMotor_move+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20be:	6d 89       	ldd	r22, Y+21	; 0x15
    20c0:	7e 89       	ldd	r23, Y+22	; 0x16
    20c2:	8f 89       	ldd	r24, Y+23	; 0x17
    20c4:	98 8d       	ldd	r25, Y+24	; 0x18
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9c 8b       	std	Y+20, r25	; 0x14
    20d0:	8b 8b       	std	Y+19, r24	; 0x13
    20d2:	8b 89       	ldd	r24, Y+19	; 0x13
    20d4:	9c 89       	ldd	r25, Y+20	; 0x14
    20d6:	98 8b       	std	Y+16, r25	; 0x10
    20d8:	8f 87       	std	Y+15, r24	; 0x0f
    20da:	8f 85       	ldd	r24, Y+15	; 0x0f
    20dc:	98 89       	ldd	r25, Y+16	; 0x10
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <StepperMotor_move+0x1ea>
    20e2:	98 8b       	std	Y+16, r25	; 0x10
    20e4:	8f 87       	std	Y+15, r24	; 0x0f
    // Calculate the number of steps based on the motor's step angle and microstepping settings
    u16 steps = ((angle * STEPS_PER_REVOLUTION) / 360) / 4;

    if (direction == CW)
    {
        for (u16 i = 0; i < steps; i++)
    20e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e8:	98 a1       	ldd	r25, Y+32	; 0x20
    20ea:	01 96       	adiw	r24, 0x01	; 1
    20ec:	98 a3       	std	Y+32, r25	; 0x20
    20ee:	8f 8f       	std	Y+31, r24	; 0x1f
    20f0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    20f2:	38 a1       	ldd	r19, Y+32	; 0x20
    20f4:	89 a1       	ldd	r24, Y+33	; 0x21
    20f6:	9a a1       	ldd	r25, Y+34	; 0x22
    20f8:	28 17       	cp	r18, r24
    20fa:	39 07       	cpc	r19, r25
    20fc:	08 f4       	brcc	.+2      	; 0x2100 <StepperMotor_move+0x20c>
    20fe:	31 cf       	rjmp	.-414    	; 0x1f62 <StepperMotor_move+0x6e>
    2100:	d6 c0       	rjmp	.+428    	; 0x22ae <StepperMotor_move+0x3ba>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_HIGH);

            _delay_ms(StepperDelay); // Add a delay to control the motor speed
        }
    }
    else if (direction == CCW)
    2102:	8b a1       	ldd	r24, Y+35	; 0x23
    2104:	81 30       	cpi	r24, 0x01	; 1
    2106:	09 f0       	breq	.+2      	; 0x210a <StepperMotor_move+0x216>
    2108:	d2 c0       	rjmp	.+420    	; 0x22ae <StepperMotor_move+0x3ba>
    {
        for (u16 i = 0; i < steps; i++)
    210a:	1e 8e       	std	Y+30, r1	; 0x1e
    210c:	1d 8e       	std	Y+29, r1	; 0x1d
    210e:	c7 c0       	rjmp	.+398    	; 0x229e <StepperMotor_move+0x3aa>
        {
            // Define the step sequence for counterclockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	64 e0       	ldi	r22, 0x04	; 4
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	65 e0       	ldi	r22, 0x05	; 5
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	66 e0       	ldi	r22, 0x06	; 6
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_HIGH);
    212e:	83 e0       	ldi	r24, 0x03	; 3
    2130:	67 e0       	ldi	r22, 0x07	; 7
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            // Define the step sequence for counterclockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    2138:	83 e0       	ldi	r24, 0x03	; 3
    213a:	64 e0       	ldi	r22, 0x04	; 4
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    2142:	83 e0       	ldi	r24, 0x03	; 3
    2144:	65 e0       	ldi	r22, 0x05	; 5
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_HIGH);
    214c:	83 e0       	ldi	r24, 0x03	; 3
    214e:	66 e0       	ldi	r22, 0x06	; 6
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    2156:	83 e0       	ldi	r24, 0x03	; 3
    2158:	67 e0       	ldi	r22, 0x07	; 7
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            // Define the step sequence for counterclockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_LOW);
    2160:	83 e0       	ldi	r24, 0x03	; 3
    2162:	64 e0       	ldi	r22, 0x04	; 4
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_HIGH);
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	65 e0       	ldi	r22, 0x05	; 5
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    2174:	83 e0       	ldi	r24, 0x03	; 3
    2176:	66 e0       	ldi	r22, 0x06	; 6
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    217e:	83 e0       	ldi	r24, 0x03	; 3
    2180:	67 e0       	ldi	r22, 0x07	; 7
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            // Define the step sequence for counterclockwise rotation
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_blue, DIO_u8_HIGH);
    2188:	83 e0       	ldi	r24, 0x03	; 3
    218a:	64 e0       	ldi	r22, 0x04	; 4
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_pink, DIO_u8_LOW);
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	65 e0       	ldi	r22, 0x05	; 5
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_yellow, DIO_u8_LOW);
    219c:	83 e0       	ldi	r24, 0x03	; 3
    219e:	66 e0       	ldi	r22, 0x06	; 6
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	67 e0       	ldi	r22, 0x07	; 7
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	a0 e2       	ldi	r26, 0x20	; 32
    21b6:	b1 e4       	ldi	r27, 0x41	; 65
    21b8:	8b 87       	std	Y+11, r24	; 0x0b
    21ba:	9c 87       	std	Y+12, r25	; 0x0c
    21bc:	ad 87       	std	Y+13, r26	; 0x0d
    21be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	4a e7       	ldi	r20, 0x7A	; 122
    21ce:	53 e4       	ldi	r21, 0x43	; 67
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	8f 83       	std	Y+7, r24	; 0x07
    21da:	98 87       	std	Y+8, r25	; 0x08
    21dc:	a9 87       	std	Y+9, r26	; 0x09
    21de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e0:	6f 81       	ldd	r22, Y+7	; 0x07
    21e2:	78 85       	ldd	r23, Y+8	; 0x08
    21e4:	89 85       	ldd	r24, Y+9	; 0x09
    21e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e8       	ldi	r20, 0x80	; 128
    21ee:	5f e3       	ldi	r21, 0x3F	; 63
    21f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f4:	88 23       	and	r24, r24
    21f6:	2c f4       	brge	.+10     	; 0x2202 <StepperMotor_move+0x30e>
		__ticks = 1;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9e 83       	std	Y+6, r25	; 0x06
    21fe:	8d 83       	std	Y+5, r24	; 0x05
    2200:	3f c0       	rjmp	.+126    	; 0x2280 <StepperMotor_move+0x38c>
	else if (__tmp > 65535)
    2202:	6f 81       	ldd	r22, Y+7	; 0x07
    2204:	78 85       	ldd	r23, Y+8	; 0x08
    2206:	89 85       	ldd	r24, Y+9	; 0x09
    2208:	9a 85       	ldd	r25, Y+10	; 0x0a
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	3f ef       	ldi	r19, 0xFF	; 255
    220e:	4f e7       	ldi	r20, 0x7F	; 127
    2210:	57 e4       	ldi	r21, 0x47	; 71
    2212:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2216:	18 16       	cp	r1, r24
    2218:	4c f5       	brge	.+82     	; 0x226c <StepperMotor_move+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221a:	6b 85       	ldd	r22, Y+11	; 0x0b
    221c:	7c 85       	ldd	r23, Y+12	; 0x0c
    221e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2220:	9e 85       	ldd	r25, Y+14	; 0x0e
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e2       	ldi	r20, 0x20	; 32
    2228:	51 e4       	ldi	r21, 0x41	; 65
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	bc 01       	movw	r22, r24
    2234:	cd 01       	movw	r24, r26
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	0f c0       	rjmp	.+30     	; 0x2262 <StepperMotor_move+0x36e>
    2244:	89 e1       	ldi	r24, 0x19	; 25
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9c 83       	std	Y+4, r25	; 0x04
    224a:	8b 83       	std	Y+3, r24	; 0x03
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <StepperMotor_move+0x35c>
    2254:	9c 83       	std	Y+4, r25	; 0x04
    2256:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2258:	8d 81       	ldd	r24, Y+5	; 0x05
    225a:	9e 81       	ldd	r25, Y+6	; 0x06
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	9e 81       	ldd	r25, Y+6	; 0x06
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	69 f7       	brne	.-38     	; 0x2244 <StepperMotor_move+0x350>
    226a:	14 c0       	rjmp	.+40     	; 0x2294 <StepperMotor_move+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226c:	6f 81       	ldd	r22, Y+7	; 0x07
    226e:	78 85       	ldd	r23, Y+8	; 0x08
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <StepperMotor_move+0x398>
    2290:	9a 83       	std	Y+2, r25	; 0x02
    2292:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(StepperDelay); // Add a delay to control the motor speed
        }
    }
    else if (direction == CCW)
    {
        for (u16 i = 0; i < steps; i++)
    2294:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2296:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2298:	01 96       	adiw	r24, 0x01	; 1
    229a:	9e 8f       	std	Y+30, r25	; 0x1e
    229c:	8d 8f       	std	Y+29, r24	; 0x1d
    229e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    22a0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    22a2:	89 a1       	ldd	r24, Y+33	; 0x21
    22a4:	9a a1       	ldd	r25, Y+34	; 0x22
    22a6:	28 17       	cp	r18, r24
    22a8:	39 07       	cpc	r19, r25
    22aa:	08 f4       	brcc	.+2      	; 0x22ae <StepperMotor_move+0x3ba>
    22ac:	31 cf       	rjmp	.-414    	; 0x2110 <StepperMotor_move+0x21c>
            DIO_voidSetPinValue(stepper_motor_port, stepper_motor_orange, DIO_u8_LOW);

            _delay_ms(StepperDelay); // Add a delay to control the motor speed
        }
    }
}
    22ae:	a5 96       	adiw	r28, 0x25	; 37
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <motor_rotate_cw>:
#include "Motor_interface.h"
#include "Motor_config.h"
#include "Motor_private.h"
/***************************************************************************/
void motor_rotate_cw()
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    // Set the directions
    DIO_voidSetPinDirection(motor_port, motor_u8_pin1, DIO_u8_OUTPUT);
    22c8:	82 e0       	ldi	r24, 0x02	; 2
    22ca:	63 e0       	ldi	r22, 0x03	; 3
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(motor_port, motor_u8_pin2, DIO_u8_OUTPUT);
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	64 e0       	ldi	r22, 0x04	; 4
    22d6:	41 e0       	ldi	r20, 0x01	; 1
    22d8:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>

    // Set one pin high and the other low to rotate the motor clockwise (CW)
    DIO_voidSetPinValue(motor_port, motor_u8_pin1, DIO_u8_HIGH);
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	63 e0       	ldi	r22, 0x03	; 3
    22e0:	41 e0       	ldi	r20, 0x01	; 1
    22e2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(motor_port, motor_u8_pin2, DIO_u8_LOW);
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	64 e0       	ldi	r22, 0x04	; 4
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
}
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <motor_rotate_ccw>:

void motor_rotate_ccw()
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    // Set the directions
    DIO_voidSetPinDirection(motor_port, motor_u8_pin1, DIO_u8_OUTPUT);
    22fe:	82 e0       	ldi	r24, 0x02	; 2
    2300:	63 e0       	ldi	r22, 0x03	; 3
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(motor_port, motor_u8_pin2, DIO_u8_OUTPUT);
    2308:	82 e0       	ldi	r24, 0x02	; 2
    230a:	64 e0       	ldi	r22, 0x04	; 4
    230c:	41 e0       	ldi	r20, 0x01	; 1
    230e:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>

    // Set one pin high and the other low to rotate the motor counterclockwise (CCW)
    DIO_voidSetPinValue(motor_port, motor_u8_pin1, DIO_u8_LOW);
    2312:	82 e0       	ldi	r24, 0x02	; 2
    2314:	63 e0       	ldi	r22, 0x03	; 3
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(motor_port, motor_u8_pin2, DIO_u8_HIGH);
    231c:	82 e0       	ldi	r24, 0x02	; 2
    231e:	64 e0       	ldi	r22, 0x04	; 4
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
}
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <stopDCmotor>:
void stopDCmotor(){
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(motor_port, motor_u8_pin1, DIO_u8_LOW);
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	63 e0       	ldi	r22, 0x03	; 3
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor_port, motor_u8_pin2, DIO_u8_LOW);
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	64 e0       	ldi	r22, 0x04	; 4
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
}
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <KPD_u8getKeystate>:
    KPD_u8_C3_PIN,
    KPD_u8_C4_PIN,
};
/***************************************************************************/
u8 KPD_u8getKeystate(u8 *copy_pu8Returnedkey)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	a3 97       	sbiw	r28, 0x23	; 35
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	9b a3       	std	Y+35, r25	; 0x23
    2364:	8a a3       	std	Y+34, r24	; 0x22
    u8 Local_u8ErrorState = STD_TYPES_OK;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	88 a3       	std	Y+32, r24	; 0x20
    u8 Local_u8RowsCounter, Local_u8ColumnsCounter, Local_u8PinValue, Local_u8Flag = 0;
    236a:	1d 8e       	std	Y+29, r1	; 0x1d

    if (copy_pu8Returnedkey != NULL)
    236c:	8a a1       	ldd	r24, Y+34	; 0x22
    236e:	9b a1       	ldd	r25, Y+35	; 0x23
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	09 f4       	brne	.+2      	; 0x2376 <KPD_u8getKeystate+0x28>
    2374:	62 c1       	rjmp	.+708    	; 0x263a <KPD_u8getKeystate+0x2ec>
    {
        *copy_pu8Returnedkey = KPD_u8_KEY_NOT_PRESSED;
    2376:	ea a1       	ldd	r30, Y+34	; 0x22
    2378:	fb a1       	ldd	r31, Y+35	; 0x23
    237a:	8f ef       	ldi	r24, 0xFF	; 255
    237c:	80 83       	st	Z, r24
        /* Activate each row ==> for loop on the pins of the rows */
        for (Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    237e:	1f 8e       	std	Y+31, r1	; 0x1f
    2380:	57 c1       	rjmp	.+686    	; 0x2630 <KPD_u8getKeystate+0x2e2>
        {
            DIO_voidSetPinValue(KPD_u8_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
    2382:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2384:	88 2f       	mov	r24, r24
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	fc 01       	movw	r30, r24
    238a:	e8 58       	subi	r30, 0x88	; 136
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	90 81       	ld	r25, Z
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	69 2f       	mov	r22, r25
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	a0 e8       	ldi	r26, 0x80	; 128
    23a0:	bf e3       	ldi	r27, 0x3F	; 63
    23a2:	89 8f       	std	Y+25, r24	; 0x19
    23a4:	9a 8f       	std	Y+26, r25	; 0x1a
    23a6:	ab 8f       	std	Y+27, r26	; 0x1b
    23a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23aa:	69 8d       	ldd	r22, Y+25	; 0x19
    23ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4a e7       	ldi	r20, 0x7A	; 122
    23b8:	53 e4       	ldi	r21, 0x43	; 67
    23ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	8d 8b       	std	Y+21, r24	; 0x15
    23c4:	9e 8b       	std	Y+22, r25	; 0x16
    23c6:	af 8b       	std	Y+23, r26	; 0x17
    23c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ca:	6d 89       	ldd	r22, Y+21	; 0x15
    23cc:	7e 89       	ldd	r23, Y+22	; 0x16
    23ce:	8f 89       	ldd	r24, Y+23	; 0x17
    23d0:	98 8d       	ldd	r25, Y+24	; 0x18
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e8       	ldi	r20, 0x80	; 128
    23d8:	5f e3       	ldi	r21, 0x3F	; 63
    23da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23de:	88 23       	and	r24, r24
    23e0:	2c f4       	brge	.+10     	; 0x23ec <KPD_u8getKeystate+0x9e>
		__ticks = 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 8b       	std	Y+20, r25	; 0x14
    23e8:	8b 8b       	std	Y+19, r24	; 0x13
    23ea:	3f c0       	rjmp	.+126    	; 0x246a <KPD_u8getKeystate+0x11c>
	else if (__tmp > 65535)
    23ec:	6d 89       	ldd	r22, Y+21	; 0x15
    23ee:	7e 89       	ldd	r23, Y+22	; 0x16
    23f0:	8f 89       	ldd	r24, Y+23	; 0x17
    23f2:	98 8d       	ldd	r25, Y+24	; 0x18
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	3f ef       	ldi	r19, 0xFF	; 255
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	57 e4       	ldi	r21, 0x47	; 71
    23fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2400:	18 16       	cp	r1, r24
    2402:	4c f5       	brge	.+82     	; 0x2456 <KPD_u8getKeystate+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2404:	69 8d       	ldd	r22, Y+25	; 0x19
    2406:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2408:	8b 8d       	ldd	r24, Y+27	; 0x1b
    240a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9c 8b       	std	Y+20, r25	; 0x14
    242a:	8b 8b       	std	Y+19, r24	; 0x13
    242c:	0f c0       	rjmp	.+30     	; 0x244c <KPD_u8getKeystate+0xfe>
    242e:	89 e1       	ldi	r24, 0x19	; 25
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9a 8b       	std	Y+18, r25	; 0x12
    2434:	89 8b       	std	Y+17, r24	; 0x11
    2436:	89 89       	ldd	r24, Y+17	; 0x11
    2438:	9a 89       	ldd	r25, Y+18	; 0x12
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <KPD_u8getKeystate+0xec>
    243e:	9a 8b       	std	Y+18, r25	; 0x12
    2440:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2442:	8b 89       	ldd	r24, Y+19	; 0x13
    2444:	9c 89       	ldd	r25, Y+20	; 0x14
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	9c 8b       	std	Y+20, r25	; 0x14
    244a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244c:	8b 89       	ldd	r24, Y+19	; 0x13
    244e:	9c 89       	ldd	r25, Y+20	; 0x14
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	69 f7       	brne	.-38     	; 0x242e <KPD_u8getKeystate+0xe0>
    2454:	14 c0       	rjmp	.+40     	; 0x247e <KPD_u8getKeystate+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	6d 89       	ldd	r22, Y+21	; 0x15
    2458:	7e 89       	ldd	r23, Y+22	; 0x16
    245a:	8f 89       	ldd	r24, Y+23	; 0x17
    245c:	98 8d       	ldd	r25, Y+24	; 0x18
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
    246a:	8b 89       	ldd	r24, Y+19	; 0x13
    246c:	9c 89       	ldd	r25, Y+20	; 0x14
    246e:	98 8b       	std	Y+16, r25	; 0x10
    2470:	8f 87       	std	Y+15, r24	; 0x0f
    2472:	8f 85       	ldd	r24, Y+15	; 0x0f
    2474:	98 89       	ldd	r25, Y+16	; 0x10
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <KPD_u8getKeystate+0x128>
    247a:	98 8b       	std	Y+16, r25	; 0x10
    247c:	8f 87       	std	Y+15, r24	; 0x0f

            /* Delay to stabilize the row activation */
            _delay_ms(1);

            /* Check which i/p pin has zero */
            for (Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter <= 3; Local_u8ColumnsCounter++)
    247e:	1e 8e       	std	Y+30, r1	; 0x1e
    2480:	c1 c0       	rjmp	.+386    	; 0x2604 <KPD_u8getKeystate+0x2b6>
            {
                DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);
    2482:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2484:	88 2f       	mov	r24, r24
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	fc 01       	movw	r30, r24
    248a:	e4 58       	subi	r30, 0x84	; 132
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	90 81       	ld	r25, Z
    2490:	9e 01       	movw	r18, r28
    2492:	2f 5d       	subi	r18, 0xDF	; 223
    2494:	3f 4f       	sbci	r19, 0xFF	; 255
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	69 2f       	mov	r22, r25
    249a:	a9 01       	movw	r20, r18
    249c:	0e 94 0f 0c 	call	0x181e	; 0x181e <DIO_u8GetPinValue>

                if (Local_u8PinValue == DIO_u8_LOW) /* Switch is Pressed */
    24a0:	89 a1       	ldd	r24, Y+33	; 0x21
    24a2:	88 23       	and	r24, r24
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <KPD_u8getKeystate+0x15a>
    24a6:	ab c0       	rjmp	.+342    	; 0x25fe <KPD_u8getKeystate+0x2b0>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	a0 ea       	ldi	r26, 0xA0	; 160
    24ae:	b1 e4       	ldi	r27, 0x41	; 65
    24b0:	8b 87       	std	Y+11, r24	; 0x0b
    24b2:	9c 87       	std	Y+12, r25	; 0x0c
    24b4:	ad 87       	std	Y+13, r26	; 0x0d
    24b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    24bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24be:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a e7       	ldi	r20, 0x7A	; 122
    24c6:	53 e4       	ldi	r21, 0x43	; 67
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8f 83       	std	Y+7, r24	; 0x07
    24d2:	98 87       	std	Y+8, r25	; 0x08
    24d4:	a9 87       	std	Y+9, r26	; 0x09
    24d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d8:	6f 81       	ldd	r22, Y+7	; 0x07
    24da:	78 85       	ldd	r23, Y+8	; 0x08
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	5f e3       	ldi	r21, 0x3F	; 63
    24e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	2c f4       	brge	.+10     	; 0x24fa <KPD_u8getKeystate+0x1ac>
		__ticks = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9e 83       	std	Y+6, r25	; 0x06
    24f6:	8d 83       	std	Y+5, r24	; 0x05
    24f8:	3f c0       	rjmp	.+126    	; 0x2578 <KPD_u8getKeystate+0x22a>
	else if (__tmp > 65535)
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	3f ef       	ldi	r19, 0xFF	; 255
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	57 e4       	ldi	r21, 0x47	; 71
    250a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	4c f5       	brge	.+82     	; 0x2564 <KPD_u8getKeystate+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2512:	6b 85       	ldd	r22, Y+11	; 0x0b
    2514:	7c 85       	ldd	r23, Y+12	; 0x0c
    2516:	8d 85       	ldd	r24, Y+13	; 0x0d
    2518:	9e 85       	ldd	r25, Y+14	; 0x0e
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	0f c0       	rjmp	.+30     	; 0x255a <KPD_u8getKeystate+0x20c>
    253c:	89 e1       	ldi	r24, 0x19	; 25
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	9c 81       	ldd	r25, Y+4	; 0x04
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <KPD_u8getKeystate+0x1fa>
    254c:	9c 83       	std	Y+4, r25	; 0x04
    254e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	9e 81       	ldd	r25, Y+6	; 0x06
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	69 f7       	brne	.-38     	; 0x253c <KPD_u8getKeystate+0x1ee>
    2562:	14 c0       	rjmp	.+40     	; 0x258c <KPD_u8getKeystate+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <KPD_u8getKeystate+0x236>
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01
                {
                    /* Debouncing */
                    _delay_ms(20);

                    DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);
    258c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	fc 01       	movw	r30, r24
    2594:	e4 58       	subi	r30, 0x84	; 132
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	90 81       	ld	r25, Z
    259a:	9e 01       	movw	r18, r28
    259c:	2f 5d       	subi	r18, 0xDF	; 223
    259e:	3f 4f       	sbci	r19, 0xFF	; 255
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	69 2f       	mov	r22, r25
    25a4:	a9 01       	movw	r20, r18
    25a6:	0e 94 0f 0c 	call	0x181e	; 0x181e <DIO_u8GetPinValue>
    25aa:	0f c0       	rjmp	.+30     	; 0x25ca <KPD_u8getKeystate+0x27c>

                    /* Check if the pin is still equal to LOW */
                    while (Local_u8PinValue == DIO_u8_LOW)
                    {
                        DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);
    25ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	fc 01       	movw	r30, r24
    25b4:	e4 58       	subi	r30, 0x84	; 132
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	90 81       	ld	r25, Z
    25ba:	9e 01       	movw	r18, r28
    25bc:	2f 5d       	subi	r18, 0xDF	; 223
    25be:	3f 4f       	sbci	r19, 0xFF	; 255
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	69 2f       	mov	r22, r25
    25c4:	a9 01       	movw	r20, r18
    25c6:	0e 94 0f 0c 	call	0x181e	; 0x181e <DIO_u8GetPinValue>
                    _delay_ms(20);

                    DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);

                    /* Check if the pin is still equal to LOW */
                    while (Local_u8PinValue == DIO_u8_LOW)
    25ca:	89 a1       	ldd	r24, Y+33	; 0x21
    25cc:	88 23       	and	r24, r24
    25ce:	71 f3       	breq	.-36     	; 0x25ac <KPD_u8getKeystate+0x25e>
                    {
                        DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColumnsPins[Local_u8ColumnsCounter], &Local_u8PinValue);
                    }

                    *copy_pu8Returnedkey = KPD_Au8keys[Local_u8RowsCounter][Local_u8ColumnsCounter];
    25d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25d2:	48 2f       	mov	r20, r24
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	ca 01       	movw	r24, r20
    25de:	88 0f       	add	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	88 0f       	add	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	82 0f       	add	r24, r18
    25e8:	93 1f       	adc	r25, r19
    25ea:	fc 01       	movw	r30, r24
    25ec:	e8 59       	subi	r30, 0x98	; 152
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	ea a1       	ldd	r30, Y+34	; 0x22
    25f4:	fb a1       	ldd	r31, Y+35	; 0x23
    25f6:	80 83       	st	Z, r24
                    Local_u8Flag = 1;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	8d 8f       	std	Y+29, r24	; 0x1d
    25fc:	07 c0       	rjmp	.+14     	; 0x260c <KPD_u8getKeystate+0x2be>

            /* Delay to stabilize the row activation */
            _delay_ms(1);

            /* Check which i/p pin has zero */
            for (Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter <= 3; Local_u8ColumnsCounter++)
    25fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2600:	8f 5f       	subi	r24, 0xFF	; 255
    2602:	8e 8f       	std	Y+30, r24	; 0x1e
    2604:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2606:	84 30       	cpi	r24, 0x04	; 4
    2608:	08 f4       	brcc	.+2      	; 0x260c <KPD_u8getKeystate+0x2be>
    260a:	3b cf       	rjmp	.-394    	; 0x2482 <KPD_u8getKeystate+0x134>
                    break;
                }
            }

            /* Deactivate Row */
            DIO_voidSetPinValue(KPD_u8_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_HIGH);
    260c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    260e:	88 2f       	mov	r24, r24
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	fc 01       	movw	r30, r24
    2614:	e8 58       	subi	r30, 0x88	; 136
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	90 81       	ld	r25, Z
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	69 2f       	mov	r22, r25
    261e:	41 e0       	ldi	r20, 0x01	; 1
    2620:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>

            if (Local_u8Flag == 1)
    2624:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2626:	81 30       	cpi	r24, 0x01	; 1
    2628:	49 f0       	breq	.+18     	; 0x263c <KPD_u8getKeystate+0x2ee>

    if (copy_pu8Returnedkey != NULL)
    {
        *copy_pu8Returnedkey = KPD_u8_KEY_NOT_PRESSED;
        /* Activate each row ==> for loop on the pins of the rows */
        for (Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++)
    262a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    262c:	8f 5f       	subi	r24, 0xFF	; 255
    262e:	8f 8f       	std	Y+31, r24	; 0x1f
    2630:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2632:	84 30       	cpi	r24, 0x04	; 4
    2634:	08 f4       	brcc	.+2      	; 0x2638 <KPD_u8getKeystate+0x2ea>
    2636:	a5 ce       	rjmp	.-694    	; 0x2382 <KPD_u8getKeystate+0x34>
    2638:	01 c0       	rjmp	.+2      	; 0x263c <KPD_u8getKeystate+0x2ee>
            }
        }
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    263a:	18 a2       	std	Y+32, r1	; 0x20
    }
    return Local_u8ErrorState;
    263c:	88 a1       	ldd	r24, Y+32	; 0x20
}
    263e:	a3 96       	adiw	r28, 0x23	; 35
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <KPD_enuInit>:

u8 KPD_enuInit(void)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_R1_PIN, DIO_u8_OUTPUT);
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_R2_PIN, DIO_u8_OUTPUT);
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	61 e0       	ldi	r22, 0x01	; 1
    2666:	41 e0       	ldi	r20, 0x01	; 1
    2668:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_R3_PIN, DIO_u8_OUTPUT);
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	62 e0       	ldi	r22, 0x02	; 2
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_R4_PIN, DIO_u8_OUTPUT);
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	63 e0       	ldi	r22, 0x03	; 3
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>

    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_C1_PIN, DIO_u8_INPUT);
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	64 e0       	ldi	r22, 0x04	; 4
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_C2_PIN, DIO_u8_INPUT);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	65 e0       	ldi	r22, 0x05	; 5
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_C3_PIN, DIO_u8_INPUT);
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	66 e0       	ldi	r22, 0x06	; 6
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_u8_PORT, KPD_u8_C4_PIN, DIO_u8_INPUT);
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	67 e0       	ldi	r22, 0x07	; 7
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>

    DIO_u8SetPortValue(KPD_u8_PORT, DIO_u8_HIGH);
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	61 e0       	ldi	r22, 0x01	; 1
    26ac:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <DIO_u8SetPortValue>

    return STD_TYPES_OK;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
}
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <LCD_voidSendCmnd>:
#include "LCD_config.h"
#include "LCD_private.h"
#include "LCD_interface.h"

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	69 97       	sbiw	r28, 0x19	; 25
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	89 8f       	std	Y+25, r24	; 0x19
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Rs = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN0, DIO_u8_LOW);
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>

	/*Rw = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN1, DIO_u8_LOW);
    26d8:	82 e0       	ldi	r24, 0x02	; 2
    26da:	61 e0       	ldi	r22, 0x01	; 1
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>

	/*Write Command*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd);
    26e2:	83 e0       	ldi	r24, 0x03	; 3
    26e4:	69 8d       	ldd	r22, Y+25	; 0x19
    26e6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <DIO_u8SetPortValue>

	/*E = 1*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_HIGH);
    26ea:	82 e0       	ldi	r24, 0x02	; 2
    26ec:	62 e0       	ldi	r22, 0x02	; 2
    26ee:	41 e0       	ldi	r20, 0x01	; 1
    26f0:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a0 e8       	ldi	r26, 0x80	; 128
    26fa:	bf e3       	ldi	r27, 0x3F	; 63
    26fc:	8d 8b       	std	Y+21, r24	; 0x15
    26fe:	9e 8b       	std	Y+22, r25	; 0x16
    2700:	af 8b       	std	Y+23, r26	; 0x17
    2702:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2704:	6d 89       	ldd	r22, Y+21	; 0x15
    2706:	7e 89       	ldd	r23, Y+22	; 0x16
    2708:	8f 89       	ldd	r24, Y+23	; 0x17
    270a:	98 8d       	ldd	r25, Y+24	; 0x18
    270c:	2b ea       	ldi	r18, 0xAB	; 171
    270e:	3a ea       	ldi	r19, 0xAA	; 170
    2710:	4a ea       	ldi	r20, 0xAA	; 170
    2712:	5e e3       	ldi	r21, 0x3E	; 62
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	89 8b       	std	Y+17, r24	; 0x11
    271e:	9a 8b       	std	Y+18, r25	; 0x12
    2720:	ab 8b       	std	Y+19, r26	; 0x13
    2722:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2724:	69 89       	ldd	r22, Y+17	; 0x11
    2726:	7a 89       	ldd	r23, Y+18	; 0x12
    2728:	8b 89       	ldd	r24, Y+19	; 0x13
    272a:	9c 89       	ldd	r25, Y+20	; 0x14
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e8       	ldi	r20, 0x80	; 128
    2732:	5f e3       	ldi	r21, 0x3F	; 63
    2734:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2738:	88 23       	and	r24, r24
    273a:	1c f4       	brge	.+6      	; 0x2742 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	88 8b       	std	Y+16, r24	; 0x10
    2740:	91 c0       	rjmp	.+290    	; 0x2864 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2742:	69 89       	ldd	r22, Y+17	; 0x11
    2744:	7a 89       	ldd	r23, Y+18	; 0x12
    2746:	8b 89       	ldd	r24, Y+19	; 0x13
    2748:	9c 89       	ldd	r25, Y+20	; 0x14
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	4f e7       	ldi	r20, 0x7F	; 127
    2750:	53 e4       	ldi	r21, 0x43	; 67
    2752:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2756:	18 16       	cp	r1, r24
    2758:	0c f0       	brlt	.+2      	; 0x275c <LCD_voidSendCmnd+0xa4>
    275a:	7b c0       	rjmp	.+246    	; 0x2852 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    275c:	6d 89       	ldd	r22, Y+21	; 0x15
    275e:	7e 89       	ldd	r23, Y+22	; 0x16
    2760:	8f 89       	ldd	r24, Y+23	; 0x17
    2762:	98 8d       	ldd	r25, Y+24	; 0x18
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	4a e7       	ldi	r20, 0x7A	; 122
    276a:	54 e4       	ldi	r21, 0x44	; 68
    276c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	8c 87       	std	Y+12, r24	; 0x0c
    2776:	9d 87       	std	Y+13, r25	; 0x0d
    2778:	ae 87       	std	Y+14, r26	; 0x0e
    277a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277c:	6c 85       	ldd	r22, Y+12	; 0x0c
    277e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2780:	8e 85       	ldd	r24, Y+14	; 0x0e
    2782:	9f 85       	ldd	r25, Y+15	; 0x0f
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a e7       	ldi	r20, 0x7A	; 122
    278a:	53 e4       	ldi	r21, 0x43	; 67
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	88 87       	std	Y+8, r24	; 0x08
    2796:	99 87       	std	Y+9, r25	; 0x09
    2798:	aa 87       	std	Y+10, r26	; 0x0a
    279a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    279c:	68 85       	ldd	r22, Y+8	; 0x08
    279e:	79 85       	ldd	r23, Y+9	; 0x09
    27a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    27a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	2c f4       	brge	.+10     	; 0x27be <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9f 83       	std	Y+7, r25	; 0x07
    27ba:	8e 83       	std	Y+6, r24	; 0x06
    27bc:	3f c0       	rjmp	.+126    	; 0x283c <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    27be:	68 85       	ldd	r22, Y+8	; 0x08
    27c0:	79 85       	ldd	r23, Y+9	; 0x09
    27c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    27c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	4c f5       	brge	.+82     	; 0x2828 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    27d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    27da:	8e 85       	ldd	r24, Y+14	; 0x0e
    27dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9f 83       	std	Y+7, r25	; 0x07
    27fc:	8e 83       	std	Y+6, r24	; 0x06
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <LCD_voidSendCmnd+0x166>
    2800:	89 e1       	ldi	r24, 0x19	; 25
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9d 83       	std	Y+5, r25	; 0x05
    2806:	8c 83       	std	Y+4, r24	; 0x04
    2808:	8c 81       	ldd	r24, Y+4	; 0x04
    280a:	9d 81       	ldd	r25, Y+5	; 0x05
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <LCD_voidSendCmnd+0x154>
    2810:	9d 83       	std	Y+5, r25	; 0x05
    2812:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	8e 81       	ldd	r24, Y+6	; 0x06
    2816:	9f 81       	ldd	r25, Y+7	; 0x07
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	9f 83       	std	Y+7, r25	; 0x07
    281c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	8e 81       	ldd	r24, Y+6	; 0x06
    2820:	9f 81       	ldd	r25, Y+7	; 0x07
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f7       	brne	.-38     	; 0x2800 <LCD_voidSendCmnd+0x148>
    2826:	24 c0       	rjmp	.+72     	; 0x2870 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2828:	68 85       	ldd	r22, Y+8	; 0x08
    282a:	79 85       	ldd	r23, Y+9	; 0x09
    282c:	8a 85       	ldd	r24, Y+10	; 0x0a
    282e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9f 83       	std	Y+7, r25	; 0x07
    283a:	8e 83       	std	Y+6, r24	; 0x06
    283c:	8e 81       	ldd	r24, Y+6	; 0x06
    283e:	9f 81       	ldd	r25, Y+7	; 0x07
    2840:	9b 83       	std	Y+3, r25	; 0x03
    2842:	8a 83       	std	Y+2, r24	; 0x02
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	9b 81       	ldd	r25, Y+3	; 0x03
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <LCD_voidSendCmnd+0x190>
    284c:	9b 83       	std	Y+3, r25	; 0x03
    284e:	8a 83       	std	Y+2, r24	; 0x02
    2850:	0f c0       	rjmp	.+30     	; 0x2870 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2852:	69 89       	ldd	r22, Y+17	; 0x11
    2854:	7a 89       	ldd	r23, Y+18	; 0x12
    2856:	8b 89       	ldd	r24, Y+19	; 0x13
    2858:	9c 89       	ldd	r25, Y+20	; 0x14
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	88 8b       	std	Y+16, r24	; 0x10
    2864:	88 89       	ldd	r24, Y+16	; 0x10
    2866:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	8a 95       	dec	r24
    286c:	f1 f7       	brne	.-4      	; 0x286a <LCD_voidSendCmnd+0x1b2>
    286e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

	/*E = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_LOW);
    2870:	82 e0       	ldi	r24, 0x02	; 2
    2872:	62 e0       	ldi	r22, 0x02	; 2
    2874:	40 e0       	ldi	r20, 0x00	; 0
    2876:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
	_delay_us(1);

	/*E = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_LOW);
#endif
}
    287a:	69 96       	adiw	r28, 0x19	; 25
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	69 97       	sbiw	r28, 0x19	; 25
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	89 8f       	std	Y+25, r24	; 0x19

#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Rs = 1*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN0, DIO_u8_HIGH);
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>

	/*Rw = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN1, DIO_u8_LOW);
    28ac:	82 e0       	ldi	r24, 0x02	; 2
    28ae:	61 e0       	ldi	r22, 0x01	; 1
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>

	/*Write Command*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Char);
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	69 8d       	ldd	r22, Y+25	; 0x19
    28ba:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <DIO_u8SetPortValue>

	/*E = 1*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_HIGH);
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	62 e0       	ldi	r22, 0x02	; 2
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	a0 e8       	ldi	r26, 0x80	; 128
    28ce:	bf e3       	ldi	r27, 0x3F	; 63
    28d0:	8d 8b       	std	Y+21, r24	; 0x15
    28d2:	9e 8b       	std	Y+22, r25	; 0x16
    28d4:	af 8b       	std	Y+23, r26	; 0x17
    28d6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28d8:	6d 89       	ldd	r22, Y+21	; 0x15
    28da:	7e 89       	ldd	r23, Y+22	; 0x16
    28dc:	8f 89       	ldd	r24, Y+23	; 0x17
    28de:	98 8d       	ldd	r25, Y+24	; 0x18
    28e0:	2b ea       	ldi	r18, 0xAB	; 171
    28e2:	3a ea       	ldi	r19, 0xAA	; 170
    28e4:	4a ea       	ldi	r20, 0xAA	; 170
    28e6:	5e e3       	ldi	r21, 0x3E	; 62
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	89 8b       	std	Y+17, r24	; 0x11
    28f2:	9a 8b       	std	Y+18, r25	; 0x12
    28f4:	ab 8b       	std	Y+19, r26	; 0x13
    28f6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28f8:	69 89       	ldd	r22, Y+17	; 0x11
    28fa:	7a 89       	ldd	r23, Y+18	; 0x12
    28fc:	8b 89       	ldd	r24, Y+19	; 0x13
    28fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e8       	ldi	r20, 0x80	; 128
    2906:	5f e3       	ldi	r21, 0x3F	; 63
    2908:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    290c:	88 23       	and	r24, r24
    290e:	1c f4       	brge	.+6      	; 0x2916 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	88 8b       	std	Y+16, r24	; 0x10
    2914:	91 c0       	rjmp	.+290    	; 0x2a38 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2916:	69 89       	ldd	r22, Y+17	; 0x11
    2918:	7a 89       	ldd	r23, Y+18	; 0x12
    291a:	8b 89       	ldd	r24, Y+19	; 0x13
    291c:	9c 89       	ldd	r25, Y+20	; 0x14
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	4f e7       	ldi	r20, 0x7F	; 127
    2924:	53 e4       	ldi	r21, 0x43	; 67
    2926:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    292a:	18 16       	cp	r1, r24
    292c:	0c f0       	brlt	.+2      	; 0x2930 <LCD_voidSendChar+0xa4>
    292e:	7b c0       	rjmp	.+246    	; 0x2a26 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2930:	6d 89       	ldd	r22, Y+21	; 0x15
    2932:	7e 89       	ldd	r23, Y+22	; 0x16
    2934:	8f 89       	ldd	r24, Y+23	; 0x17
    2936:	98 8d       	ldd	r25, Y+24	; 0x18
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	4a e7       	ldi	r20, 0x7A	; 122
    293e:	54 e4       	ldi	r21, 0x44	; 68
    2940:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	8c 87       	std	Y+12, r24	; 0x0c
    294a:	9d 87       	std	Y+13, r25	; 0x0d
    294c:	ae 87       	std	Y+14, r26	; 0x0e
    294e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2950:	6c 85       	ldd	r22, Y+12	; 0x0c
    2952:	7d 85       	ldd	r23, Y+13	; 0x0d
    2954:	8e 85       	ldd	r24, Y+14	; 0x0e
    2956:	9f 85       	ldd	r25, Y+15	; 0x0f
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	4a e7       	ldi	r20, 0x7A	; 122
    295e:	53 e4       	ldi	r21, 0x43	; 67
    2960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	88 87       	std	Y+8, r24	; 0x08
    296a:	99 87       	std	Y+9, r25	; 0x09
    296c:	aa 87       	std	Y+10, r26	; 0x0a
    296e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2970:	68 85       	ldd	r22, Y+8	; 0x08
    2972:	79 85       	ldd	r23, Y+9	; 0x09
    2974:	8a 85       	ldd	r24, Y+10	; 0x0a
    2976:	9b 85       	ldd	r25, Y+11	; 0x0b
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e8       	ldi	r20, 0x80	; 128
    297e:	5f e3       	ldi	r21, 0x3F	; 63
    2980:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2984:	88 23       	and	r24, r24
    2986:	2c f4       	brge	.+10     	; 0x2992 <LCD_voidSendChar+0x106>
		__ticks = 1;
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	9f 83       	std	Y+7, r25	; 0x07
    298e:	8e 83       	std	Y+6, r24	; 0x06
    2990:	3f c0       	rjmp	.+126    	; 0x2a10 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2992:	68 85       	ldd	r22, Y+8	; 0x08
    2994:	79 85       	ldd	r23, Y+9	; 0x09
    2996:	8a 85       	ldd	r24, Y+10	; 0x0a
    2998:	9b 85       	ldd	r25, Y+11	; 0x0b
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	3f ef       	ldi	r19, 0xFF	; 255
    299e:	4f e7       	ldi	r20, 0x7F	; 127
    29a0:	57 e4       	ldi	r21, 0x47	; 71
    29a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a6:	18 16       	cp	r1, r24
    29a8:	4c f5       	brge	.+82     	; 0x29fc <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    29ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    29ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    29b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e2       	ldi	r20, 0x20	; 32
    29b8:	51 e4       	ldi	r21, 0x41	; 65
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	bc 01       	movw	r22, r24
    29c4:	cd 01       	movw	r24, r26
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	9f 83       	std	Y+7, r25	; 0x07
    29d0:	8e 83       	std	Y+6, r24	; 0x06
    29d2:	0f c0       	rjmp	.+30     	; 0x29f2 <LCD_voidSendChar+0x166>
    29d4:	89 e1       	ldi	r24, 0x19	; 25
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	9d 83       	std	Y+5, r25	; 0x05
    29da:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29dc:	8c 81       	ldd	r24, Y+4	; 0x04
    29de:	9d 81       	ldd	r25, Y+5	; 0x05
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_voidSendChar+0x154>
    29e4:	9d 83       	std	Y+5, r25	; 0x05
    29e6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e8:	8e 81       	ldd	r24, Y+6	; 0x06
    29ea:	9f 81       	ldd	r25, Y+7	; 0x07
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	9f 83       	std	Y+7, r25	; 0x07
    29f0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f2:	8e 81       	ldd	r24, Y+6	; 0x06
    29f4:	9f 81       	ldd	r25, Y+7	; 0x07
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	69 f7       	brne	.-38     	; 0x29d4 <LCD_voidSendChar+0x148>
    29fa:	24 c0       	rjmp	.+72     	; 0x2a44 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fc:	68 85       	ldd	r22, Y+8	; 0x08
    29fe:	79 85       	ldd	r23, Y+9	; 0x09
    2a00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	9f 83       	std	Y+7, r25	; 0x07
    2a0e:	8e 83       	std	Y+6, r24	; 0x06
    2a10:	8e 81       	ldd	r24, Y+6	; 0x06
    2a12:	9f 81       	ldd	r25, Y+7	; 0x07
    2a14:	9b 83       	std	Y+3, r25	; 0x03
    2a16:	8a 83       	std	Y+2, r24	; 0x02
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	f1 f7       	brne	.-4      	; 0x2a1c <LCD_voidSendChar+0x190>
    2a20:	9b 83       	std	Y+3, r25	; 0x03
    2a22:	8a 83       	std	Y+2, r24	; 0x02
    2a24:	0f c0       	rjmp	.+30     	; 0x2a44 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a26:	69 89       	ldd	r22, Y+17	; 0x11
    2a28:	7a 89       	ldd	r23, Y+18	; 0x12
    2a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	88 8b       	std	Y+16, r24	; 0x10
    2a38:	88 89       	ldd	r24, Y+16	; 0x10
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	8a 95       	dec	r24
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <LCD_voidSendChar+0x1b2>
    2a42:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

	/*E = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_LOW);
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	62 e0       	ldi	r22, 0x02	; 2
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_voidSetPinValue>

	/*E = 0*/
	DIO_voidSetPinValue(LCD_u8_CONTROL_PORT, DIO_u8_PIN2, DIO_u8_LOW);

#endif
}
    2a4e:	69 96       	adiw	r28, 0x19	; 25
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <LCD_voideInit>:
void LCD_voideInit(void)
{
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	cc 54       	subi	r28, 0x4C	; 76
    2a6e:	d0 40       	sbci	r29, 0x00	; 0
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e7 5b       	subi	r30, 0xB7	; 183
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	ac e0       	ldi	r26, 0x0C	; 12
    2a86:	b2 e4       	ldi	r27, 0x42	; 66
    2a88:	80 83       	st	Z, r24
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	a2 83       	std	Z+2, r26	; 0x02
    2a8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a90:	8e 01       	movw	r16, r28
    2a92:	0b 5b       	subi	r16, 0xBB	; 187
    2a94:	1f 4f       	sbci	r17, 0xFF	; 255
    2a96:	fe 01       	movw	r30, r28
    2a98:	e7 5b       	subi	r30, 0xB7	; 183
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	60 81       	ld	r22, Z
    2a9e:	71 81       	ldd	r23, Z+1	; 0x01
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	93 81       	ldd	r25, Z+3	; 0x03
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a e7       	ldi	r20, 0x7A	; 122
    2aaa:	53 e4       	ldi	r21, 0x43	; 67
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	80 83       	st	Z, r24
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	a2 83       	std	Z+2, r26	; 0x02
    2abc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2abe:	fe 01       	movw	r30, r28
    2ac0:	eb 5b       	subi	r30, 0xBB	; 187
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	60 81       	ld	r22, Z
    2ac6:	71 81       	ldd	r23, Z+1	; 0x01
    2ac8:	82 81       	ldd	r24, Z+2	; 0x02
    2aca:	93 81       	ldd	r25, Z+3	; 0x03
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e8       	ldi	r20, 0x80	; 128
    2ad2:	5f e3       	ldi	r21, 0x3F	; 63
    2ad4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad8:	88 23       	and	r24, r24
    2ada:	44 f4       	brge	.+16     	; 0x2aec <LCD_voideInit+0x8c>
		__ticks = 1;
    2adc:	fe 01       	movw	r30, r28
    2ade:	ed 5b       	subi	r30, 0xBD	; 189
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	91 83       	std	Z+1, r25	; 0x01
    2ae8:	80 83       	st	Z, r24
    2aea:	64 c0       	rjmp	.+200    	; 0x2bb4 <LCD_voideInit+0x154>
	else if (__tmp > 65535)
    2aec:	fe 01       	movw	r30, r28
    2aee:	eb 5b       	subi	r30, 0xBB	; 187
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	60 81       	ld	r22, Z
    2af4:	71 81       	ldd	r23, Z+1	; 0x01
    2af6:	82 81       	ldd	r24, Z+2	; 0x02
    2af8:	93 81       	ldd	r25, Z+3	; 0x03
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	3f ef       	ldi	r19, 0xFF	; 255
    2afe:	4f e7       	ldi	r20, 0x7F	; 127
    2b00:	57 e4       	ldi	r21, 0x47	; 71
    2b02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b06:	18 16       	cp	r1, r24
    2b08:	0c f0       	brlt	.+2      	; 0x2b0c <LCD_voideInit+0xac>
    2b0a:	43 c0       	rjmp	.+134    	; 0x2b92 <LCD_voideInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e7 5b       	subi	r30, 0xB7	; 183
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	60 81       	ld	r22, Z
    2b14:	71 81       	ldd	r23, Z+1	; 0x01
    2b16:	82 81       	ldd	r24, Z+2	; 0x02
    2b18:	93 81       	ldd	r25, Z+3	; 0x03
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e2       	ldi	r20, 0x20	; 32
    2b20:	51 e4       	ldi	r21, 0x41	; 65
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	8e 01       	movw	r16, r28
    2b2c:	0d 5b       	subi	r16, 0xBD	; 189
    2b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	80 83       	st	Z, r24
    2b42:	1f c0       	rjmp	.+62     	; 0x2b82 <LCD_voideInit+0x122>
    2b44:	fe 01       	movw	r30, r28
    2b46:	ef 5b       	subi	r30, 0xBF	; 191
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	89 e1       	ldi	r24, 0x19	; 25
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b52:	fe 01       	movw	r30, r28
    2b54:	ef 5b       	subi	r30, 0xBF	; 191
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <LCD_voideInit+0xfc>
    2b60:	fe 01       	movw	r30, r28
    2b62:	ef 5b       	subi	r30, 0xBF	; 191
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6a:	de 01       	movw	r26, r28
    2b6c:	ad 5b       	subi	r26, 0xBD	; 189
    2b6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b70:	fe 01       	movw	r30, r28
    2b72:	ed 5b       	subi	r30, 0xBD	; 189
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	80 81       	ld	r24, Z
    2b78:	91 81       	ldd	r25, Z+1	; 0x01
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	11 96       	adiw	r26, 0x01	; 1
    2b7e:	9c 93       	st	X, r25
    2b80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b82:	fe 01       	movw	r30, r28
    2b84:	ed 5b       	subi	r30, 0xBD	; 189
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	91 81       	ldd	r25, Z+1	; 0x01
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	d1 f6       	brne	.-76     	; 0x2b44 <LCD_voideInit+0xe4>
    2b90:	24 c0       	rjmp	.+72     	; 0x2bda <LCD_voideInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b92:	8e 01       	movw	r16, r28
    2b94:	0d 5b       	subi	r16, 0xBD	; 189
    2b96:	1f 4f       	sbci	r17, 0xFF	; 255
    2b98:	fe 01       	movw	r30, r28
    2b9a:	eb 5b       	subi	r30, 0xBB	; 187
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	f8 01       	movw	r30, r16
    2bb0:	91 83       	std	Z+1, r25	; 0x01
    2bb2:	80 83       	st	Z, r24
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ed 5b       	subi	r30, 0xBD	; 189
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	ff 96       	adiw	r30, 0x3f	; 63
    2bc2:	91 83       	std	Z+1, r25	; 0x01
    2bc4:	80 83       	st	Z, r24
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	ff 96       	adiw	r30, 0x3f	; 63
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <LCD_voideInit+0x16e>
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	ff 96       	adiw	r30, 0x3f	; 63
    2bd6:	91 83       	std	Z+1, r25	; 0x01
    2bd8:	80 83       	st	Z, r24
#if LCD_u8_MODE == LCD_u8_MODE_8BIT
	_delay_ms(35);
	// Function set cmd
	LCD_voidSendCmnd(0b00111000); // set for 8bits
    2bda:	88 e3       	ldi	r24, 0x38	; 56
    2bdc:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_voidSendCmnd>
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	a0 e2       	ldi	r26, 0x20	; 32
    2be6:	b2 e4       	ldi	r27, 0x42	; 66
    2be8:	8b af       	std	Y+59, r24	; 0x3b
    2bea:	9c af       	std	Y+60, r25	; 0x3c
    2bec:	ad af       	std	Y+61, r26	; 0x3d
    2bee:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bf0:	6b ad       	ldd	r22, Y+59	; 0x3b
    2bf2:	7c ad       	ldd	r23, Y+60	; 0x3c
    2bf4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bf6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bf8:	2b ea       	ldi	r18, 0xAB	; 171
    2bfa:	3a ea       	ldi	r19, 0xAA	; 170
    2bfc:	4a ea       	ldi	r20, 0xAA	; 170
    2bfe:	5e e3       	ldi	r21, 0x3E	; 62
    2c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	8f ab       	std	Y+55, r24	; 0x37
    2c0a:	98 af       	std	Y+56, r25	; 0x38
    2c0c:	a9 af       	std	Y+57, r26	; 0x39
    2c0e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2c10:	6f a9       	ldd	r22, Y+55	; 0x37
    2c12:	78 ad       	ldd	r23, Y+56	; 0x38
    2c14:	89 ad       	ldd	r24, Y+57	; 0x39
    2c16:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e8       	ldi	r20, 0x80	; 128
    2c1e:	5f e3       	ldi	r21, 0x3F	; 63
    2c20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c24:	88 23       	and	r24, r24
    2c26:	1c f4       	brge	.+6      	; 0x2c2e <LCD_voideInit+0x1ce>
		__ticks = 1;
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	8e ab       	std	Y+54, r24	; 0x36
    2c2c:	91 c0       	rjmp	.+290    	; 0x2d50 <LCD_voideInit+0x2f0>
	else if (__tmp > 255)
    2c2e:	6f a9       	ldd	r22, Y+55	; 0x37
    2c30:	78 ad       	ldd	r23, Y+56	; 0x38
    2c32:	89 ad       	ldd	r24, Y+57	; 0x39
    2c34:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	4f e7       	ldi	r20, 0x7F	; 127
    2c3c:	53 e4       	ldi	r21, 0x43	; 67
    2c3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c42:	18 16       	cp	r1, r24
    2c44:	0c f0       	brlt	.+2      	; 0x2c48 <LCD_voideInit+0x1e8>
    2c46:	7b c0       	rjmp	.+246    	; 0x2d3e <LCD_voideInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    2c48:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c4a:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	4a e7       	ldi	r20, 0x7A	; 122
    2c56:	54 e4       	ldi	r21, 0x44	; 68
    2c58:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	8a ab       	std	Y+50, r24	; 0x32
    2c62:	9b ab       	std	Y+51, r25	; 0x33
    2c64:	ac ab       	std	Y+52, r26	; 0x34
    2c66:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c68:	6a a9       	ldd	r22, Y+50	; 0x32
    2c6a:	7b a9       	ldd	r23, Y+51	; 0x33
    2c6c:	8c a9       	ldd	r24, Y+52	; 0x34
    2c6e:	9d a9       	ldd	r25, Y+53	; 0x35
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	4a e7       	ldi	r20, 0x7A	; 122
    2c76:	53 e4       	ldi	r21, 0x43	; 67
    2c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	8e a7       	std	Y+46, r24	; 0x2e
    2c82:	9f a7       	std	Y+47, r25	; 0x2f
    2c84:	a8 ab       	std	Y+48, r26	; 0x30
    2c86:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2c88:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c8a:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c8c:	88 a9       	ldd	r24, Y+48	; 0x30
    2c8e:	99 a9       	ldd	r25, Y+49	; 0x31
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e8       	ldi	r20, 0x80	; 128
    2c96:	5f e3       	ldi	r21, 0x3F	; 63
    2c98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c9c:	88 23       	and	r24, r24
    2c9e:	2c f4       	brge	.+10     	; 0x2caa <LCD_voideInit+0x24a>
		__ticks = 1;
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	9d a7       	std	Y+45, r25	; 0x2d
    2ca6:	8c a7       	std	Y+44, r24	; 0x2c
    2ca8:	3f c0       	rjmp	.+126    	; 0x2d28 <LCD_voideInit+0x2c8>
	else if (__tmp > 65535)
    2caa:	6e a5       	ldd	r22, Y+46	; 0x2e
    2cac:	7f a5       	ldd	r23, Y+47	; 0x2f
    2cae:	88 a9       	ldd	r24, Y+48	; 0x30
    2cb0:	99 a9       	ldd	r25, Y+49	; 0x31
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	3f ef       	ldi	r19, 0xFF	; 255
    2cb6:	4f e7       	ldi	r20, 0x7F	; 127
    2cb8:	57 e4       	ldi	r21, 0x47	; 71
    2cba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cbe:	18 16       	cp	r1, r24
    2cc0:	4c f5       	brge	.+82     	; 0x2d14 <LCD_voideInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc2:	6a a9       	ldd	r22, Y+50	; 0x32
    2cc4:	7b a9       	ldd	r23, Y+51	; 0x33
    2cc6:	8c a9       	ldd	r24, Y+52	; 0x34
    2cc8:	9d a9       	ldd	r25, Y+53	; 0x35
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e2       	ldi	r20, 0x20	; 32
    2cd0:	51 e4       	ldi	r21, 0x41	; 65
    2cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	bc 01       	movw	r22, r24
    2cdc:	cd 01       	movw	r24, r26
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9d a7       	std	Y+45, r25	; 0x2d
    2ce8:	8c a7       	std	Y+44, r24	; 0x2c
    2cea:	0f c0       	rjmp	.+30     	; 0x2d0a <LCD_voideInit+0x2aa>
    2cec:	89 e1       	ldi	r24, 0x19	; 25
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	9b a7       	std	Y+43, r25	; 0x2b
    2cf2:	8a a7       	std	Y+42, r24	; 0x2a
    2cf4:	8a a5       	ldd	r24, Y+42	; 0x2a
    2cf6:	9b a5       	ldd	r25, Y+43	; 0x2b
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	f1 f7       	brne	.-4      	; 0x2cf8 <LCD_voideInit+0x298>
    2cfc:	9b a7       	std	Y+43, r25	; 0x2b
    2cfe:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d00:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d02:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	9d a7       	std	Y+45, r25	; 0x2d
    2d08:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d0c:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	69 f7       	brne	.-38     	; 0x2cec <LCD_voideInit+0x28c>
    2d12:	24 c0       	rjmp	.+72     	; 0x2d5c <LCD_voideInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d14:	6e a5       	ldd	r22, Y+46	; 0x2e
    2d16:	7f a5       	ldd	r23, Y+47	; 0x2f
    2d18:	88 a9       	ldd	r24, Y+48	; 0x30
    2d1a:	99 a9       	ldd	r25, Y+49	; 0x31
    2d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	9d a7       	std	Y+45, r25	; 0x2d
    2d26:	8c a7       	std	Y+44, r24	; 0x2c
    2d28:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d2a:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d2c:	99 a7       	std	Y+41, r25	; 0x29
    2d2e:	88 a7       	std	Y+40, r24	; 0x28
    2d30:	88 a5       	ldd	r24, Y+40	; 0x28
    2d32:	99 a5       	ldd	r25, Y+41	; 0x29
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <LCD_voideInit+0x2d4>
    2d38:	99 a7       	std	Y+41, r25	; 0x29
    2d3a:	88 a7       	std	Y+40, r24	; 0x28
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <LCD_voideInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d3e:	6f a9       	ldd	r22, Y+55	; 0x37
    2d40:	78 ad       	ldd	r23, Y+56	; 0x38
    2d42:	89 ad       	ldd	r24, Y+57	; 0x39
    2d44:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	8e ab       	std	Y+54, r24	; 0x36
    2d50:	8e a9       	ldd	r24, Y+54	; 0x36
    2d52:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d54:	8f a1       	ldd	r24, Y+39	; 0x27
    2d56:	8a 95       	dec	r24
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <LCD_voideInit+0x2f6>
    2d5a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111); // display ON/OFF command
    2d5c:	8f e0       	ldi	r24, 0x0F	; 15
    2d5e:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_voidSendCmnd>
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	a0 e2       	ldi	r26, 0x20	; 32
    2d68:	b2 e4       	ldi	r27, 0x42	; 66
    2d6a:	8b a3       	std	Y+35, r24	; 0x23
    2d6c:	9c a3       	std	Y+36, r25	; 0x24
    2d6e:	ad a3       	std	Y+37, r26	; 0x25
    2d70:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d72:	6b a1       	ldd	r22, Y+35	; 0x23
    2d74:	7c a1       	ldd	r23, Y+36	; 0x24
    2d76:	8d a1       	ldd	r24, Y+37	; 0x25
    2d78:	9e a1       	ldd	r25, Y+38	; 0x26
    2d7a:	2b ea       	ldi	r18, 0xAB	; 171
    2d7c:	3a ea       	ldi	r19, 0xAA	; 170
    2d7e:	4a ea       	ldi	r20, 0xAA	; 170
    2d80:	5e e3       	ldi	r21, 0x3E	; 62
    2d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	8f 8f       	std	Y+31, r24	; 0x1f
    2d8c:	98 a3       	std	Y+32, r25	; 0x20
    2d8e:	a9 a3       	std	Y+33, r26	; 0x21
    2d90:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2d92:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d94:	78 a1       	ldd	r23, Y+32	; 0x20
    2d96:	89 a1       	ldd	r24, Y+33	; 0x21
    2d98:	9a a1       	ldd	r25, Y+34	; 0x22
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e8       	ldi	r20, 0x80	; 128
    2da0:	5f e3       	ldi	r21, 0x3F	; 63
    2da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da6:	88 23       	and	r24, r24
    2da8:	1c f4       	brge	.+6      	; 0x2db0 <LCD_voideInit+0x350>
		__ticks = 1;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	8e 8f       	std	Y+30, r24	; 0x1e
    2dae:	91 c0       	rjmp	.+290    	; 0x2ed2 <LCD_voideInit+0x472>
	else if (__tmp > 255)
    2db0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2db2:	78 a1       	ldd	r23, Y+32	; 0x20
    2db4:	89 a1       	ldd	r24, Y+33	; 0x21
    2db6:	9a a1       	ldd	r25, Y+34	; 0x22
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	4f e7       	ldi	r20, 0x7F	; 127
    2dbe:	53 e4       	ldi	r21, 0x43	; 67
    2dc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc4:	18 16       	cp	r1, r24
    2dc6:	0c f0       	brlt	.+2      	; 0x2dca <LCD_voideInit+0x36a>
    2dc8:	7b c0       	rjmp	.+246    	; 0x2ec0 <LCD_voideInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2dca:	6b a1       	ldd	r22, Y+35	; 0x23
    2dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    2dce:	8d a1       	ldd	r24, Y+37	; 0x25
    2dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	4a e7       	ldi	r20, 0x7A	; 122
    2dd8:	54 e4       	ldi	r21, 0x44	; 68
    2dda:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	8a 8f       	std	Y+26, r24	; 0x1a
    2de4:	9b 8f       	std	Y+27, r25	; 0x1b
    2de6:	ac 8f       	std	Y+28, r26	; 0x1c
    2de8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dea:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2dec:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2dee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2df0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	4a e7       	ldi	r20, 0x7A	; 122
    2df8:	53 e4       	ldi	r21, 0x43	; 67
    2dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	8e 8b       	std	Y+22, r24	; 0x16
    2e04:	9f 8b       	std	Y+23, r25	; 0x17
    2e06:	a8 8f       	std	Y+24, r26	; 0x18
    2e08:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2e0a:	6e 89       	ldd	r22, Y+22	; 0x16
    2e0c:	7f 89       	ldd	r23, Y+23	; 0x17
    2e0e:	88 8d       	ldd	r24, Y+24	; 0x18
    2e10:	99 8d       	ldd	r25, Y+25	; 0x19
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e8       	ldi	r20, 0x80	; 128
    2e18:	5f e3       	ldi	r21, 0x3F	; 63
    2e1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e1e:	88 23       	and	r24, r24
    2e20:	2c f4       	brge	.+10     	; 0x2e2c <LCD_voideInit+0x3cc>
		__ticks = 1;
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	9d 8b       	std	Y+21, r25	; 0x15
    2e28:	8c 8b       	std	Y+20, r24	; 0x14
    2e2a:	3f c0       	rjmp	.+126    	; 0x2eaa <LCD_voideInit+0x44a>
	else if (__tmp > 65535)
    2e2c:	6e 89       	ldd	r22, Y+22	; 0x16
    2e2e:	7f 89       	ldd	r23, Y+23	; 0x17
    2e30:	88 8d       	ldd	r24, Y+24	; 0x18
    2e32:	99 8d       	ldd	r25, Y+25	; 0x19
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	3f ef       	ldi	r19, 0xFF	; 255
    2e38:	4f e7       	ldi	r20, 0x7F	; 127
    2e3a:	57 e4       	ldi	r21, 0x47	; 71
    2e3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e40:	18 16       	cp	r1, r24
    2e42:	4c f5       	brge	.+82     	; 0x2e96 <LCD_voideInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e44:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e46:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2e48:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e4a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e2       	ldi	r20, 0x20	; 32
    2e52:	51 e4       	ldi	r21, 0x41	; 65
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	bc 01       	movw	r22, r24
    2e5e:	cd 01       	movw	r24, r26
    2e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	9d 8b       	std	Y+21, r25	; 0x15
    2e6a:	8c 8b       	std	Y+20, r24	; 0x14
    2e6c:	0f c0       	rjmp	.+30     	; 0x2e8c <LCD_voideInit+0x42c>
    2e6e:	89 e1       	ldi	r24, 0x19	; 25
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	9b 8b       	std	Y+19, r25	; 0x13
    2e74:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e76:	8a 89       	ldd	r24, Y+18	; 0x12
    2e78:	9b 89       	ldd	r25, Y+19	; 0x13
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <LCD_voideInit+0x41a>
    2e7e:	9b 8b       	std	Y+19, r25	; 0x13
    2e80:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e82:	8c 89       	ldd	r24, Y+20	; 0x14
    2e84:	9d 89       	ldd	r25, Y+21	; 0x15
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	9d 8b       	std	Y+21, r25	; 0x15
    2e8a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8c:	8c 89       	ldd	r24, Y+20	; 0x14
    2e8e:	9d 89       	ldd	r25, Y+21	; 0x15
    2e90:	00 97       	sbiw	r24, 0x00	; 0
    2e92:	69 f7       	brne	.-38     	; 0x2e6e <LCD_voideInit+0x40e>
    2e94:	24 c0       	rjmp	.+72     	; 0x2ede <LCD_voideInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e96:	6e 89       	ldd	r22, Y+22	; 0x16
    2e98:	7f 89       	ldd	r23, Y+23	; 0x17
    2e9a:	88 8d       	ldd	r24, Y+24	; 0x18
    2e9c:	99 8d       	ldd	r25, Y+25	; 0x19
    2e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	9d 8b       	std	Y+21, r25	; 0x15
    2ea8:	8c 8b       	std	Y+20, r24	; 0x14
    2eaa:	8c 89       	ldd	r24, Y+20	; 0x14
    2eac:	9d 89       	ldd	r25, Y+21	; 0x15
    2eae:	99 8b       	std	Y+17, r25	; 0x11
    2eb0:	88 8b       	std	Y+16, r24	; 0x10
    2eb2:	88 89       	ldd	r24, Y+16	; 0x10
    2eb4:	99 89       	ldd	r25, Y+17	; 0x11
    2eb6:	01 97       	sbiw	r24, 0x01	; 1
    2eb8:	f1 f7       	brne	.-4      	; 0x2eb6 <LCD_voideInit+0x456>
    2eba:	99 8b       	std	Y+17, r25	; 0x11
    2ebc:	88 8b       	std	Y+16, r24	; 0x10
    2ebe:	0f c0       	rjmp	.+30     	; 0x2ede <LCD_voideInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ec0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ec2:	78 a1       	ldd	r23, Y+32	; 0x20
    2ec4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ec6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	8e 8f       	std	Y+30, r24	; 0x1e
    2ed2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ed4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ed6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed8:	8a 95       	dec	r24
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <LCD_voideInit+0x478>
    2edc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0x01); // clear 8 bits
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_voidSendCmnd>
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	a0 ea       	ldi	r26, 0xA0	; 160
    2eea:	b0 e4       	ldi	r27, 0x40	; 64
    2eec:	8b 87       	std	Y+11, r24	; 0x0b
    2eee:	9c 87       	std	Y+12, r25	; 0x0c
    2ef0:	ad 87       	std	Y+13, r26	; 0x0d
    2ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a e7       	ldi	r20, 0x7A	; 122
    2f02:	53 e4       	ldi	r21, 0x43	; 67
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8f 83       	std	Y+7, r24	; 0x07
    2f0e:	98 87       	std	Y+8, r25	; 0x08
    2f10:	a9 87       	std	Y+9, r26	; 0x09
    2f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f14:	6f 81       	ldd	r22, Y+7	; 0x07
    2f16:	78 85       	ldd	r23, Y+8	; 0x08
    2f18:	89 85       	ldd	r24, Y+9	; 0x09
    2f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e8       	ldi	r20, 0x80	; 128
    2f22:	5f e3       	ldi	r21, 0x3F	; 63
    2f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f28:	88 23       	and	r24, r24
    2f2a:	2c f4       	brge	.+10     	; 0x2f36 <LCD_voideInit+0x4d6>
		__ticks = 1;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
    2f34:	3f c0       	rjmp	.+126    	; 0x2fb4 <LCD_voideInit+0x554>
	else if (__tmp > 65535)
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	3f ef       	ldi	r19, 0xFF	; 255
    2f42:	4f e7       	ldi	r20, 0x7F	; 127
    2f44:	57 e4       	ldi	r21, 0x47	; 71
    2f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f4a:	18 16       	cp	r1, r24
    2f4c:	4c f5       	brge	.+82     	; 0x2fa0 <LCD_voideInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e2       	ldi	r20, 0x20	; 32
    2f5c:	51 e4       	ldi	r21, 0x41	; 65
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	9e 83       	std	Y+6, r25	; 0x06
    2f74:	8d 83       	std	Y+5, r24	; 0x05
    2f76:	0f c0       	rjmp	.+30     	; 0x2f96 <LCD_voideInit+0x536>
    2f78:	89 e1       	ldi	r24, 0x19	; 25
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9c 83       	std	Y+4, r25	; 0x04
    2f7e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f80:	8b 81       	ldd	r24, Y+3	; 0x03
    2f82:	9c 81       	ldd	r25, Y+4	; 0x04
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <LCD_voideInit+0x524>
    2f88:	9c 83       	std	Y+4, r25	; 0x04
    2f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f96:	8d 81       	ldd	r24, Y+5	; 0x05
    2f98:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	69 f7       	brne	.-38     	; 0x2f78 <LCD_voideInit+0x518>
    2f9e:	14 c0       	rjmp	.+40     	; 0x2fc8 <LCD_voideInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa2:	78 85       	ldd	r23, Y+8	; 0x08
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9e 83       	std	Y+6, r25	; 0x06
    2fb2:	8d 83       	std	Y+5, r24	; 0x05
    2fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb8:	9a 83       	std	Y+2, r25	; 0x02
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <LCD_voideInit+0x560>
    2fc4:	9a 83       	std	Y+2, r25	; 0x02
    2fc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	LCD_voidSendCmnd(0b00000110); // set mood for 8 bits
    2fc8:	86 e0       	ldi	r24, 0x06	; 6
    2fca:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_voidSendCmnd>
	LCD_voidSendCmnd(0x01); // clear 8 bits
	_delay_ms(5);
	LCD_voidSendCmnd(0b00000110); // set mood for 8 bits

#endif
}
    2fce:	c4 5b       	subi	r28, 0xB4	; 180
    2fd0:	df 4f       	sbci	r29, 0xFF	; 255
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	f8 94       	cli
    2fd6:	de bf       	out	0x3e, r29	; 62
    2fd8:	0f be       	out	0x3f, r0	; 63
    2fda:	cd bf       	out	0x3d, r28	; 61
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	1f 91       	pop	r17
    2fe2:	0f 91       	pop	r16
    2fe4:	08 95       	ret

00002fe6 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 COPY_u8LineNum, u8 Copy_u8location)
{
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <LCD_u8GoToXY+0x6>
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <LCD_u8GoToXY+0x8>
    2fee:	0f 92       	push	r0
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	8a 83       	std	Y+2, r24	; 0x02
    2ff6:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8Errorstate = STD_TYPES_OK;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	89 83       	std	Y+1, r24	; 0x01
	if (COPY_u8LineNum <= 39)
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	88 32       	cpi	r24, 0x28	; 40
    3000:	e0 f4       	brcc	.+56     	; 0x303a <LCD_u8GoToXY+0x54>
	{
		switch (COPY_u8LineNum)
    3002:	8a 81       	ldd	r24, Y+2	; 0x02
    3004:	28 2f       	mov	r18, r24
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	3d 83       	std	Y+5, r19	; 0x05
    300a:	2c 83       	std	Y+4, r18	; 0x04
    300c:	8c 81       	ldd	r24, Y+4	; 0x04
    300e:	9d 81       	ldd	r25, Y+5	; 0x05
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	31 f0       	breq	.+12     	; 0x3020 <LCD_u8GoToXY+0x3a>
    3014:	2c 81       	ldd	r18, Y+4	; 0x04
    3016:	3d 81       	ldd	r19, Y+5	; 0x05
    3018:	21 30       	cpi	r18, 0x01	; 1
    301a:	31 05       	cpc	r19, r1
    301c:	31 f0       	breq	.+12     	; 0x302a <LCD_u8GoToXY+0x44>
    301e:	0a c0       	rjmp	.+20     	; 0x3034 <LCD_u8GoToXY+0x4e>
		{
		case LCD_u8_LINE1:
			LCD_voidSendCmnd(0x80 + Copy_u8location);
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	80 58       	subi	r24, 0x80	; 128
    3024:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_voidSendCmnd>
    3028:	0a c0       	rjmp	.+20     	; 0x303e <LCD_u8GoToXY+0x58>
			break;
		case LCD_u8_LINE2:
			LCD_voidSendCmnd(0xC0 + Copy_u8location);
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	80 54       	subi	r24, 0x40	; 64
    302e:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_voidSendCmnd>
    3032:	05 c0       	rjmp	.+10     	; 0x303e <LCD_u8GoToXY+0x58>
			break;
		default:
			local_u8Errorstate = STD_TYPES_OK;
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	02 c0       	rjmp	.+4      	; 0x303e <LCD_u8GoToXY+0x58>
		}
	}
	else
	{
		local_u8Errorstate = STD_TYPES_OK;
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8Errorstate;
    303e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <LCD_voidClearScreen>:
void LCD_voidClearScreen()
{
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    3058:	2e 97       	sbiw	r28, 0x0e	; 14
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	de bf       	out	0x3e, r29	; 62
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0x01);
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_voidSendCmnd>
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	a0 e0       	ldi	r26, 0x00	; 0
    3070:	b0 e4       	ldi	r27, 0x40	; 64
    3072:	8b 87       	std	Y+11, r24	; 0x0b
    3074:	9c 87       	std	Y+12, r25	; 0x0c
    3076:	ad 87       	std	Y+13, r26	; 0x0d
    3078:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307a:	6b 85       	ldd	r22, Y+11	; 0x0b
    307c:	7c 85       	ldd	r23, Y+12	; 0x0c
    307e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3080:	9e 85       	ldd	r25, Y+14	; 0x0e
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	4a e7       	ldi	r20, 0x7A	; 122
    3088:	53 e4       	ldi	r21, 0x43	; 67
    308a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	8f 83       	std	Y+7, r24	; 0x07
    3094:	98 87       	std	Y+8, r25	; 0x08
    3096:	a9 87       	std	Y+9, r26	; 0x09
    3098:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    309a:	6f 81       	ldd	r22, Y+7	; 0x07
    309c:	78 85       	ldd	r23, Y+8	; 0x08
    309e:	89 85       	ldd	r24, Y+9	; 0x09
    30a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	40 e8       	ldi	r20, 0x80	; 128
    30a8:	5f e3       	ldi	r21, 0x3F	; 63
    30aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ae:	88 23       	and	r24, r24
    30b0:	2c f4       	brge	.+10     	; 0x30bc <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	9e 83       	std	Y+6, r25	; 0x06
    30b8:	8d 83       	std	Y+5, r24	; 0x05
    30ba:	3f c0       	rjmp	.+126    	; 0x313a <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    30bc:	6f 81       	ldd	r22, Y+7	; 0x07
    30be:	78 85       	ldd	r23, Y+8	; 0x08
    30c0:	89 85       	ldd	r24, Y+9	; 0x09
    30c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	3f ef       	ldi	r19, 0xFF	; 255
    30c8:	4f e7       	ldi	r20, 0x7F	; 127
    30ca:	57 e4       	ldi	r21, 0x47	; 71
    30cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d0:	18 16       	cp	r1, r24
    30d2:	4c f5       	brge	.+82     	; 0x3126 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30da:	9e 85       	ldd	r25, Y+14	; 0x0e
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e2       	ldi	r20, 0x20	; 32
    30e2:	51 e4       	ldi	r21, 0x41	; 65
    30e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	9e 83       	std	Y+6, r25	; 0x06
    30fa:	8d 83       	std	Y+5, r24	; 0x05
    30fc:	0f c0       	rjmp	.+30     	; 0x311c <LCD_voidClearScreen+0xcc>
    30fe:	89 e1       	ldi	r24, 0x19	; 25
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	9c 83       	std	Y+4, r25	; 0x04
    3104:	8b 83       	std	Y+3, r24	; 0x03
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	9c 81       	ldd	r25, Y+4	; 0x04
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	f1 f7       	brne	.-4      	; 0x310a <LCD_voidClearScreen+0xba>
    310e:	9c 83       	std	Y+4, r25	; 0x04
    3110:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	9e 81       	ldd	r25, Y+6	; 0x06
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	9e 83       	std	Y+6, r25	; 0x06
    311a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311c:	8d 81       	ldd	r24, Y+5	; 0x05
    311e:	9e 81       	ldd	r25, Y+6	; 0x06
    3120:	00 97       	sbiw	r24, 0x00	; 0
    3122:	69 f7       	brne	.-38     	; 0x30fe <LCD_voidClearScreen+0xae>
    3124:	14 c0       	rjmp	.+40     	; 0x314e <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3126:	6f 81       	ldd	r22, Y+7	; 0x07
    3128:	78 85       	ldd	r23, Y+8	; 0x08
    312a:	89 85       	ldd	r24, Y+9	; 0x09
    312c:	9a 85       	ldd	r25, Y+10	; 0x0a
    312e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	9e 83       	std	Y+6, r25	; 0x06
    3138:	8d 83       	std	Y+5, r24	; 0x05
    313a:	8d 81       	ldd	r24, Y+5	; 0x05
    313c:	9e 81       	ldd	r25, Y+6	; 0x06
    313e:	9a 83       	std	Y+2, r25	; 0x02
    3140:	89 83       	std	Y+1, r24	; 0x01
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	9a 81       	ldd	r25, Y+2	; 0x02
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <LCD_voidClearScreen+0xf6>
    314a:	9a 83       	std	Y+2, r25	; 0x02
    314c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0x80);
    314e:	80 e8       	ldi	r24, 0x80	; 128
    3150:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_voidSendCmnd>
}
    3154:	2e 96       	adiw	r28, 0x0e	; 14
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	cf 91       	pop	r28
    3162:	df 91       	pop	r29
    3164:	08 95       	ret

00003166 <LCD_voidSendString>:
void LCD_voidSendString(const char *str)
{
    3166:	df 93       	push	r29
    3168:	cf 93       	push	r28
    316a:	00 d0       	rcall	.+0      	; 0x316c <LCD_voidSendString+0x6>
    316c:	0f 92       	push	r0
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	9b 83       	std	Y+3, r25	; 0x03
    3174:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3176:	19 82       	std	Y+1, r1	; 0x01
    3178:	0e c0       	rjmp	.+28     	; 0x3196 <LCD_voidSendString+0x30>
	while (str[i] != '\0')
	{
		LCD_voidSendChar(str[i]);
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	8a 81       	ldd	r24, Y+2	; 0x02
    3182:	9b 81       	ldd	r25, Y+3	; 0x03
    3184:	fc 01       	movw	r30, r24
    3186:	e2 0f       	add	r30, r18
    3188:	f3 1f       	adc	r31, r19
    318a:	80 81       	ld	r24, Z
    318c:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_voidSendChar>
		i++;
    3190:	89 81       	ldd	r24, Y+1	; 0x01
    3192:	8f 5f       	subi	r24, 0xFF	; 255
    3194:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCmnd(0x80);
}
void LCD_voidSendString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	28 2f       	mov	r18, r24
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	8a 81       	ldd	r24, Y+2	; 0x02
    319e:	9b 81       	ldd	r25, Y+3	; 0x03
    31a0:	fc 01       	movw	r30, r24
    31a2:	e2 0f       	add	r30, r18
    31a4:	f3 1f       	adc	r31, r19
    31a6:	80 81       	ld	r24, Z
    31a8:	88 23       	and	r24, r24
    31aa:	39 f7       	brne	.-50     	; 0x317a <LCD_voidSendString+0x14>
	{
		LCD_voidSendChar(str[i]);
		i++;
	}
}
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	08 95       	ret

000031b8 <LCD_String_Position>:
void LCD_String_Position(char line, char pos, char *str)
{
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	2a 97       	sbiw	r28, 0x0a	; 10
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	8e 83       	std	Y+6, r24	; 0x06
    31ce:	6f 83       	std	Y+7, r22	; 0x07
    31d0:	59 87       	std	Y+9, r21	; 0x09
    31d2:	48 87       	std	Y+8, r20	; 0x08
	// Ensure the line and position values are within valid ranges
	if (line >= 0 && line <= 1 && pos >= 0 && pos <= 15)
    31d4:	8e 81       	ldd	r24, Y+6	; 0x06
    31d6:	82 30       	cpi	r24, 0x02	; 2
    31d8:	08 f0       	brcs	.+2      	; 0x31dc <LCD_String_Position+0x24>
    31da:	77 c0       	rjmp	.+238    	; 0x32ca <LCD_String_Position+0x112>
    31dc:	8f 81       	ldd	r24, Y+7	; 0x07
    31de:	80 31       	cpi	r24, 0x10	; 16
    31e0:	08 f0       	brcs	.+2      	; 0x31e4 <LCD_String_Position+0x2c>
    31e2:	73 c0       	rjmp	.+230    	; 0x32ca <LCD_String_Position+0x112>
	{
		// Calculate the starting DDRAM address for the specified line and position
		u8 line_offset = (line == 0) ? 0x00 : 0x40;
    31e4:	8e 81       	ldd	r24, Y+6	; 0x06
    31e6:	88 23       	and	r24, r24
    31e8:	11 f4       	brne	.+4      	; 0x31ee <LCD_String_Position+0x36>
    31ea:	1a 86       	std	Y+10, r1	; 0x0a
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <LCD_String_Position+0x3a>
    31ee:	80 e4       	ldi	r24, 0x40	; 64
    31f0:	8a 87       	std	Y+10, r24	; 0x0a
    31f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31f4:	8d 83       	std	Y+5, r24	; 0x05
		u8 ddr_addr = (pos & 0x0F) | line_offset | 0x80;
    31f6:	8f 81       	ldd	r24, Y+7	; 0x07
    31f8:	98 2f       	mov	r25, r24
    31fa:	9f 70       	andi	r25, 0x0F	; 15
    31fc:	8d 81       	ldd	r24, Y+5	; 0x05
    31fe:	89 2b       	or	r24, r25
    3200:	80 68       	ori	r24, 0x80	; 128
    3202:	8c 83       	std	Y+4, r24	; 0x04

		// Set the DDRAM address to move the cursor to the desired position
		LCD_voidSendCmnd(ddr_addr);
    3204:	8c 81       	ldd	r24, Y+4	; 0x04
    3206:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_voidSendCmnd>

		// Internal counter to keep track of characters printed
		u8 counter = 0;
    320a:	1b 82       	std	Y+3, r1	; 0x03

		// Print the string until null terminator is encountered or the line is full
		for (u8 i = 0; str[i] != '\0' && counter < 16; i++)
    320c:	1a 82       	std	Y+2, r1	; 0x02
    320e:	11 c0       	rjmp	.+34     	; 0x3232 <LCD_String_Position+0x7a>
		{
			LCD_voidSendChar(str[i]);
    3210:	8a 81       	ldd	r24, Y+2	; 0x02
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	88 85       	ldd	r24, Y+8	; 0x08
    3218:	99 85       	ldd	r25, Y+9	; 0x09
    321a:	fc 01       	movw	r30, r24
    321c:	e2 0f       	add	r30, r18
    321e:	f3 1f       	adc	r31, r19
    3220:	80 81       	ld	r24, Z
    3222:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_voidSendChar>
			counter++; // Increment the internal counter for each character printed
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	8f 5f       	subi	r24, 0xFF	; 255
    322a:	8b 83       	std	Y+3, r24	; 0x03

		// Internal counter to keep track of characters printed
		u8 counter = 0;

		// Print the string until null terminator is encountered or the line is full
		for (u8 i = 0; str[i] != '\0' && counter < 16; i++)
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	8f 5f       	subi	r24, 0xFF	; 255
    3230:	8a 83       	std	Y+2, r24	; 0x02
    3232:	8a 81       	ldd	r24, Y+2	; 0x02
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	88 85       	ldd	r24, Y+8	; 0x08
    323a:	99 85       	ldd	r25, Y+9	; 0x09
    323c:	fc 01       	movw	r30, r24
    323e:	e2 0f       	add	r30, r18
    3240:	f3 1f       	adc	r31, r19
    3242:	80 81       	ld	r24, Z
    3244:	88 23       	and	r24, r24
    3246:	51 f0       	breq	.+20     	; 0x325c <LCD_String_Position+0xa4>
    3248:	8b 81       	ldd	r24, Y+3	; 0x03
    324a:	80 31       	cpi	r24, 0x10	; 16
    324c:	08 f3       	brcs	.-62     	; 0x3210 <LCD_String_Position+0x58>
    324e:	06 c0       	rjmp	.+12     	; 0x325c <LCD_String_Position+0xa4>
		}

		// If the string is shorter than 16 characters, pad the remaining characters with spaces
		while (counter < 16)
		{
			LCD_voidSendChar(' ');
    3250:	80 e2       	ldi	r24, 0x20	; 32
    3252:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_voidSendChar>
			counter++;
    3256:	8b 81       	ldd	r24, Y+3	; 0x03
    3258:	8f 5f       	subi	r24, 0xFF	; 255
    325a:	8b 83       	std	Y+3, r24	; 0x03
			LCD_voidSendChar(str[i]);
			counter++; // Increment the internal counter for each character printed
		}

		// If the string is shorter than 16 characters, pad the remaining characters with spaces
		while (counter < 16)
    325c:	8b 81       	ldd	r24, Y+3	; 0x03
    325e:	80 31       	cpi	r24, 0x10	; 16
    3260:	b8 f3       	brcs	.-18     	; 0x3250 <LCD_String_Position+0x98>
			LCD_voidSendChar(' ');
			counter++;
		}

		// Move to the second line if there are remaining characters to be displayed
		if (line == 0 && str[counter] != '\0')
    3262:	8e 81       	ldd	r24, Y+6	; 0x06
    3264:	88 23       	and	r24, r24
    3266:	89 f5       	brne	.+98     	; 0x32ca <LCD_String_Position+0x112>
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	28 2f       	mov	r18, r24
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	88 85       	ldd	r24, Y+8	; 0x08
    3270:	99 85       	ldd	r25, Y+9	; 0x09
    3272:	fc 01       	movw	r30, r24
    3274:	e2 0f       	add	r30, r18
    3276:	f3 1f       	adc	r31, r19
    3278:	80 81       	ld	r24, Z
    327a:	88 23       	and	r24, r24
    327c:	31 f1       	breq	.+76     	; 0x32ca <LCD_String_Position+0x112>
		{
			LCD_voidSendCmnd(0xC0); // Move the cursor to the beginning of the second line
    327e:	80 ec       	ldi	r24, 0xC0	; 192
    3280:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_voidSendCmnd>
			counter = 0;
    3284:	1b 82       	std	Y+3, r1	; 0x03

			// Print the rest of the string on the second line
			for (u8 i = 16; str[i] != '\0' && counter < 16; i++)
    3286:	80 e1       	ldi	r24, 0x10	; 16
    3288:	89 83       	std	Y+1, r24	; 0x01
    328a:	11 c0       	rjmp	.+34     	; 0x32ae <LCD_String_Position+0xf6>
			{
				LCD_voidSendChar(str[i]);
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	28 2f       	mov	r18, r24
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	88 85       	ldd	r24, Y+8	; 0x08
    3294:	99 85       	ldd	r25, Y+9	; 0x09
    3296:	fc 01       	movw	r30, r24
    3298:	e2 0f       	add	r30, r18
    329a:	f3 1f       	adc	r31, r19
    329c:	80 81       	ld	r24, Z
    329e:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_voidSendChar>
				counter++; // Increment the internal counter for each character printed on the second line
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	8f 5f       	subi	r24, 0xFF	; 255
    32a6:	8b 83       	std	Y+3, r24	; 0x03
		{
			LCD_voidSendCmnd(0xC0); // Move the cursor to the beginning of the second line
			counter = 0;

			// Print the rest of the string on the second line
			for (u8 i = 16; str[i] != '\0' && counter < 16; i++)
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	8f 5f       	subi	r24, 0xFF	; 255
    32ac:	89 83       	std	Y+1, r24	; 0x01
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	28 2f       	mov	r18, r24
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	88 85       	ldd	r24, Y+8	; 0x08
    32b6:	99 85       	ldd	r25, Y+9	; 0x09
    32b8:	fc 01       	movw	r30, r24
    32ba:	e2 0f       	add	r30, r18
    32bc:	f3 1f       	adc	r31, r19
    32be:	80 81       	ld	r24, Z
    32c0:	88 23       	and	r24, r24
    32c2:	19 f0       	breq	.+6      	; 0x32ca <LCD_String_Position+0x112>
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	80 31       	cpi	r24, 0x10	; 16
    32c8:	08 f3       	brcs	.-62     	; 0x328c <LCD_String_Position+0xd4>
				LCD_voidSendChar(str[i]);
				counter++; // Increment the internal counter for each character printed on the second line
			}
		}
	}
}
    32ca:	2a 96       	adiw	r28, 0x0a	; 10
    32cc:	0f b6       	in	r0, 0x3f	; 63
    32ce:	f8 94       	cli
    32d0:	de bf       	out	0x3e, r29	; 62
    32d2:	0f be       	out	0x3f, r0	; 63
    32d4:	cd bf       	out	0x3d, r28	; 61
    32d6:	cf 91       	pop	r28
    32d8:	df 91       	pop	r29
    32da:	08 95       	ret

000032dc <LCD_voidSendSpecialCharacters>:

void LCD_voidSendSpecialCharacters(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    32dc:	0f 93       	push	r16
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62
    32e6:	28 97       	sbiw	r28, 0x08	; 8
    32e8:	0f b6       	in	r0, 0x3f	; 63
    32ea:	f8 94       	cli
    32ec:	de bf       	out	0x3e, r29	; 62
    32ee:	0f be       	out	0x3f, r0	; 63
    32f0:	cd bf       	out	0x3d, r28	; 61
    32f2:	8b 83       	std	Y+3, r24	; 0x03
    32f4:	7d 83       	std	Y+5, r23	; 0x05
    32f6:	6c 83       	std	Y+4, r22	; 0x04
    32f8:	4e 83       	std	Y+6, r20	; 0x06
    32fa:	2f 83       	std	Y+7, r18	; 0x07
    32fc:	08 87       	std	Y+8, r16	; 0x08
	LCD_voidSendCmnd(Copy_u8SpecialCharStartBit);
    32fe:	88 85       	ldd	r24, Y+8	; 0x08
    3300:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <LCD_voidSendCmnd>
	for (int i = 0; i < 8; i++)
    3304:	1a 82       	std	Y+2, r1	; 0x02
    3306:	19 82       	std	Y+1, r1	; 0x01
    3308:	0f c0       	rjmp	.+30     	; 0x3328 <LCD_voidSendSpecialCharacters+0x4c>
	{
		LCD_voidSendChar(Copy_u8P_Ptr[i]);
    330a:	29 81       	ldd	r18, Y+1	; 0x01
    330c:	3a 81       	ldd	r19, Y+2	; 0x02
    330e:	8c 81       	ldd	r24, Y+4	; 0x04
    3310:	9d 81       	ldd	r25, Y+5	; 0x05
    3312:	fc 01       	movw	r30, r24
    3314:	e2 0f       	add	r30, r18
    3316:	f3 1f       	adc	r31, r19
    3318:	80 81       	ld	r24, Z
    331a:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_voidSendChar>
}

void LCD_voidSendSpecialCharacters(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_voidSendCmnd(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	01 96       	adiw	r24, 0x01	; 1
    3324:	9a 83       	std	Y+2, r25	; 0x02
    3326:	89 83       	std	Y+1, r24	; 0x01
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	88 30       	cpi	r24, 0x08	; 8
    332e:	91 05       	cpc	r25, r1
    3330:	64 f3       	brlt	.-40     	; 0x330a <LCD_voidSendSpecialCharacters+0x2e>
	{
		LCD_voidSendChar(Copy_u8P_Ptr[i]);
	}
	LCD_u8GoToXY(Copy_u8LineNum, Copy_u8Location);
    3332:	8e 81       	ldd	r24, Y+6	; 0x06
    3334:	6f 81       	ldd	r22, Y+7	; 0x07
    3336:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_u8GoToXY>
	LCD_voidSendChar(Copy_CharNum);
    333a:	8b 81       	ldd	r24, Y+3	; 0x03
    333c:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_voidSendChar>

	if (Copy_u8Location > 15)
    3340:	8f 81       	ldd	r24, Y+7	; 0x07
    3342:	80 31       	cpi	r24, 0x10	; 16
    3344:	48 f0       	brcs	.+18     	; 0x3358 <LCD_voidSendSpecialCharacters+0x7c>
	{
		LCD_voidClearScreen();
    3346:	0e 94 28 18 	call	0x3050	; 0x3050 <LCD_voidClearScreen>
		LCD_u8GoToXY(0, 0);
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	60 e0       	ldi	r22, 0x00	; 0
    334e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_CharNum);
    3352:	8b 81       	ldd	r24, Y+3	; 0x03
    3354:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_voidSendChar>
	}
}
    3358:	28 96       	adiw	r28, 0x08	; 8
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	0f 91       	pop	r16
    336a:	08 95       	ret

0000336c <LCD_voidClearSecondLine>:
void LCD_voidClearSecondLine()
{
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	00 d0       	rcall	.+0      	; 0x3372 <LCD_voidClearSecondLine+0x6>
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
	LCD_u8GoToXY(LCD_u8_LINE2, 0); // Move cursor to the start of the second line
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_u8GoToXY>
	// Send a string of spaces to clear the second line
	for (int i = 0; i < 16; i++)
    337e:	1a 82       	std	Y+2, r1	; 0x02
    3380:	19 82       	std	Y+1, r1	; 0x01
    3382:	08 c0       	rjmp	.+16     	; 0x3394 <LCD_voidClearSecondLine+0x28>
	{
		LCD_voidSendChar(' ');
    3384:	80 e2       	ldi	r24, 0x20	; 32
    3386:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_voidSendChar>
}
void LCD_voidClearSecondLine()
{
	LCD_u8GoToXY(LCD_u8_LINE2, 0); // Move cursor to the start of the second line
	// Send a string of spaces to clear the second line
	for (int i = 0; i < 16; i++)
    338a:	89 81       	ldd	r24, Y+1	; 0x01
    338c:	9a 81       	ldd	r25, Y+2	; 0x02
    338e:	01 96       	adiw	r24, 0x01	; 1
    3390:	9a 83       	std	Y+2, r25	; 0x02
    3392:	89 83       	std	Y+1, r24	; 0x01
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	9a 81       	ldd	r25, Y+2	; 0x02
    3398:	80 31       	cpi	r24, 0x10	; 16
    339a:	91 05       	cpc	r25, r1
    339c:	9c f3       	brlt	.-26     	; 0x3384 <LCD_voidClearSecondLine+0x18>
	{
		LCD_voidSendChar(' ');
	}
	LCD_u8GoToXY(LCD_u8_LINE2, 3); // Move cursor to the start of the second line
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	63 e0       	ldi	r22, 0x03	; 3
    33a2:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <LCD_u8GoToXY>
}
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	cf 91       	pop	r28
    33ac:	df 91       	pop	r29
    33ae:	08 95       	ret

000033b0 <LCD_void_SendNum>:
void LCD_void_SendNum(u32 Copy_u32_Num)
{
    33b0:	df 93       	push	r29
    33b2:	cf 93       	push	r28
    33b4:	cd b7       	in	r28, 0x3d	; 61
    33b6:	de b7       	in	r29, 0x3e	; 62
    33b8:	69 97       	sbiw	r28, 0x19	; 25
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	6e 8b       	std	Y+22, r22	; 0x16
    33c6:	7f 8b       	std	Y+23, r23	; 0x17
    33c8:	88 8f       	std	Y+24, r24	; 0x18
    33ca:	99 8f       	std	Y+25, r25	; 0x19
	u8 str[16];
	u8 str_idx = 0;
    33cc:	1d 82       	std	Y+5, r1	; 0x05

	// Handle the special case of 0 separately
	if (Copy_u32_Num == 0)
    33ce:	8e 89       	ldd	r24, Y+22	; 0x16
    33d0:	9f 89       	ldd	r25, Y+23	; 0x17
    33d2:	a8 8d       	ldd	r26, Y+24	; 0x18
    33d4:	b9 8d       	ldd	r27, Y+25	; 0x19
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	a1 05       	cpc	r26, r1
    33da:	b1 05       	cpc	r27, r1
    33dc:	f1 f5       	brne	.+124    	; 0x345a <LCD_void_SendNum+0xaa>
	{
		str[str_idx++] = '0';
    33de:	8d 81       	ldd	r24, Y+5	; 0x05
    33e0:	28 2f       	mov	r18, r24
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	ce 01       	movw	r24, r28
    33e6:	06 96       	adiw	r24, 0x06	; 6
    33e8:	fc 01       	movw	r30, r24
    33ea:	e2 0f       	add	r30, r18
    33ec:	f3 1f       	adc	r31, r19
    33ee:	80 e3       	ldi	r24, 0x30	; 48
    33f0:	80 83       	st	Z, r24
    33f2:	8d 81       	ldd	r24, Y+5	; 0x05
    33f4:	8f 5f       	subi	r24, 0xFF	; 255
    33f6:	8d 83       	std	Y+5, r24	; 0x05
    33f8:	38 c0       	rjmp	.+112    	; 0x346a <LCD_void_SendNum+0xba>
	else
	{
		// Convert the number to string in reverse order
		while (Copy_u32_Num > 0)
		{
			u8 digit = Copy_u32_Num % 10;
    33fa:	8e 89       	ldd	r24, Y+22	; 0x16
    33fc:	9f 89       	ldd	r25, Y+23	; 0x17
    33fe:	a8 8d       	ldd	r26, Y+24	; 0x18
    3400:	b9 8d       	ldd	r27, Y+25	; 0x19
    3402:	2a e0       	ldi	r18, 0x0A	; 10
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	40 e0       	ldi	r20, 0x00	; 0
    3408:	50 e0       	ldi	r21, 0x00	; 0
    340a:	bc 01       	movw	r22, r24
    340c:	cd 01       	movw	r24, r26
    340e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__udivmodsi4>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	8c 83       	std	Y+4, r24	; 0x04
			str[str_idx++] = digit + '0'; // Convert digit to ASCII character
    3418:	8d 81       	ldd	r24, Y+5	; 0x05
    341a:	28 2f       	mov	r18, r24
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	8c 81       	ldd	r24, Y+4	; 0x04
    3420:	48 2f       	mov	r20, r24
    3422:	40 5d       	subi	r20, 0xD0	; 208
    3424:	ce 01       	movw	r24, r28
    3426:	06 96       	adiw	r24, 0x06	; 6
    3428:	fc 01       	movw	r30, r24
    342a:	e2 0f       	add	r30, r18
    342c:	f3 1f       	adc	r31, r19
    342e:	40 83       	st	Z, r20
    3430:	8d 81       	ldd	r24, Y+5	; 0x05
    3432:	8f 5f       	subi	r24, 0xFF	; 255
    3434:	8d 83       	std	Y+5, r24	; 0x05
			Copy_u32_Num /= 10;
    3436:	8e 89       	ldd	r24, Y+22	; 0x16
    3438:	9f 89       	ldd	r25, Y+23	; 0x17
    343a:	a8 8d       	ldd	r26, Y+24	; 0x18
    343c:	b9 8d       	ldd	r27, Y+25	; 0x19
    343e:	2a e0       	ldi	r18, 0x0A	; 10
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	40 e0       	ldi	r20, 0x00	; 0
    3444:	50 e0       	ldi	r21, 0x00	; 0
    3446:	bc 01       	movw	r22, r24
    3448:	cd 01       	movw	r24, r26
    344a:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__udivmodsi4>
    344e:	da 01       	movw	r26, r20
    3450:	c9 01       	movw	r24, r18
    3452:	8e 8b       	std	Y+22, r24	; 0x16
    3454:	9f 8b       	std	Y+23, r25	; 0x17
    3456:	a8 8f       	std	Y+24, r26	; 0x18
    3458:	b9 8f       	std	Y+25, r27	; 0x19
		str[str_idx++] = '0';
	}
	else
	{
		// Convert the number to string in reverse order
		while (Copy_u32_Num > 0)
    345a:	8e 89       	ldd	r24, Y+22	; 0x16
    345c:	9f 89       	ldd	r25, Y+23	; 0x17
    345e:	a8 8d       	ldd	r26, Y+24	; 0x18
    3460:	b9 8d       	ldd	r27, Y+25	; 0x19
    3462:	00 97       	sbiw	r24, 0x00	; 0
    3464:	a1 05       	cpc	r26, r1
    3466:	b1 05       	cpc	r27, r1
    3468:	41 f6       	brne	.-112    	; 0x33fa <LCD_void_SendNum+0x4a>
			Copy_u32_Num /= 10;
		}
	}

	// Add null terminator to the string
	str[str_idx] = '\0';
    346a:	8d 81       	ldd	r24, Y+5	; 0x05
    346c:	28 2f       	mov	r18, r24
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	ce 01       	movw	r24, r28
    3472:	06 96       	adiw	r24, 0x06	; 6
    3474:	fc 01       	movw	r30, r24
    3476:	e2 0f       	add	r30, r18
    3478:	f3 1f       	adc	r31, r19
    347a:	10 82       	st	Z, r1

	// Reverse the string to get the correct order
	for (u8 i = 0, j = str_idx - 1; i < j; i++, j--)
    347c:	1b 82       	std	Y+3, r1	; 0x03
    347e:	8d 81       	ldd	r24, Y+5	; 0x05
    3480:	81 50       	subi	r24, 0x01	; 1
    3482:	8a 83       	std	Y+2, r24	; 0x02
    3484:	2c c0       	rjmp	.+88     	; 0x34de <LCD_void_SendNum+0x12e>
	{
		u8 temp = str[i];
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	28 2f       	mov	r18, r24
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	ce 01       	movw	r24, r28
    348e:	06 96       	adiw	r24, 0x06	; 6
    3490:	fc 01       	movw	r30, r24
    3492:	e2 0f       	add	r30, r18
    3494:	f3 1f       	adc	r31, r19
    3496:	80 81       	ld	r24, Z
    3498:	89 83       	std	Y+1, r24	; 0x01
		str[i] = str[j];
    349a:	8b 81       	ldd	r24, Y+3	; 0x03
    349c:	48 2f       	mov	r20, r24
    349e:	50 e0       	ldi	r21, 0x00	; 0
    34a0:	8a 81       	ldd	r24, Y+2	; 0x02
    34a2:	28 2f       	mov	r18, r24
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	ce 01       	movw	r24, r28
    34a8:	06 96       	adiw	r24, 0x06	; 6
    34aa:	fc 01       	movw	r30, r24
    34ac:	e2 0f       	add	r30, r18
    34ae:	f3 1f       	adc	r31, r19
    34b0:	20 81       	ld	r18, Z
    34b2:	ce 01       	movw	r24, r28
    34b4:	06 96       	adiw	r24, 0x06	; 6
    34b6:	fc 01       	movw	r30, r24
    34b8:	e4 0f       	add	r30, r20
    34ba:	f5 1f       	adc	r31, r21
    34bc:	20 83       	st	Z, r18
		str[j] = temp;
    34be:	8a 81       	ldd	r24, Y+2	; 0x02
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	ce 01       	movw	r24, r28
    34c6:	06 96       	adiw	r24, 0x06	; 6
    34c8:	fc 01       	movw	r30, r24
    34ca:	e2 0f       	add	r30, r18
    34cc:	f3 1f       	adc	r31, r19
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	80 83       	st	Z, r24

	// Add null terminator to the string
	str[str_idx] = '\0';

	// Reverse the string to get the correct order
	for (u8 i = 0, j = str_idx - 1; i < j; i++, j--)
    34d2:	8b 81       	ldd	r24, Y+3	; 0x03
    34d4:	8f 5f       	subi	r24, 0xFF	; 255
    34d6:	8b 83       	std	Y+3, r24	; 0x03
    34d8:	8a 81       	ldd	r24, Y+2	; 0x02
    34da:	81 50       	subi	r24, 0x01	; 1
    34dc:	8a 83       	std	Y+2, r24	; 0x02
    34de:	9b 81       	ldd	r25, Y+3	; 0x03
    34e0:	8a 81       	ldd	r24, Y+2	; 0x02
    34e2:	98 17       	cp	r25, r24
    34e4:	80 f2       	brcs	.-96     	; 0x3486 <LCD_void_SendNum+0xd6>
		str[i] = str[j];
		str[j] = temp;
	}

	// Display the string on the LCD
	LCD_voidSendString((const char *)str);
    34e6:	ce 01       	movw	r24, r28
    34e8:	06 96       	adiw	r24, 0x06	; 6
    34ea:	0e 94 b3 18 	call	0x3166	; 0x3166 <LCD_voidSendString>
}
    34ee:	69 96       	adiw	r28, 0x19	; 25
    34f0:	0f b6       	in	r0, 0x3f	; 63
    34f2:	f8 94       	cli
    34f4:	de bf       	out	0x3e, r29	; 62
    34f6:	0f be       	out	0x3f, r0	; 63
    34f8:	cd bf       	out	0x3d, r28	; 61
    34fa:	cf 91       	pop	r28
    34fc:	df 91       	pop	r29
    34fe:	08 95       	ret

00003500 <main>:
#include "../HAL/1-LCD/LCD_interface.h"
/***************************************************************************/
//void App_voidToggleLED(void);

int main()
{
    3500:	df 93       	push	r29
    3502:	cf 93       	push	r28
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    3508:	2f 97       	sbiw	r28, 0x0f	; 15
    350a:	0f b6       	in	r0, 0x3f	; 63
    350c:	f8 94       	cli
    350e:	de bf       	out	0x3e, r29	; 62
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8CompareMatchValue = 0;
    3514:	1f 86       	std	Y+15, r1	; 0x0f
    DIO_voidInit();
    3516:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_voidInit>
    // LCD_voideInit();
    // GI_voidEnable();
    // Timers_u8Timer0CTCSetCallBack(&App_voidToggleLED);
    /* Start Timer */
    Timers_voidTimer0Init();
    351a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Timers_voidTimer0Init>
    // LCD_voidSendString("Counter: ");

    /* Supper Loop */
    while (1)
    {
        Timers_voidTimer0SetCompareMatchValue(Local_u8CompareMatchValue);
    351e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3520:	0e 94 79 06 	call	0xcf2	; 0xcf2 <Timers_voidTimer0SetCompareMatchValue>
        Local_u8CompareMatchValue++;
    3524:	8f 85       	ldd	r24, Y+15	; 0x0f
    3526:	8f 5f       	subi	r24, 0xFF	; 255
    3528:	8f 87       	std	Y+15, r24	; 0x0f
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	a8 e4       	ldi	r26, 0x48	; 72
    3530:	b2 e4       	ldi	r27, 0x42	; 66
    3532:	8b 87       	std	Y+11, r24	; 0x0b
    3534:	9c 87       	std	Y+12, r25	; 0x0c
    3536:	ad 87       	std	Y+13, r26	; 0x0d
    3538:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353a:	6b 85       	ldd	r22, Y+11	; 0x0b
    353c:	7c 85       	ldd	r23, Y+12	; 0x0c
    353e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3540:	9e 85       	ldd	r25, Y+14	; 0x0e
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	4a ef       	ldi	r20, 0xFA	; 250
    3548:	54 e4       	ldi	r21, 0x44	; 68
    354a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	8f 83       	std	Y+7, r24	; 0x07
    3554:	98 87       	std	Y+8, r25	; 0x08
    3556:	a9 87       	std	Y+9, r26	; 0x09
    3558:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    355a:	6f 81       	ldd	r22, Y+7	; 0x07
    355c:	78 85       	ldd	r23, Y+8	; 0x08
    355e:	89 85       	ldd	r24, Y+9	; 0x09
    3560:	9a 85       	ldd	r25, Y+10	; 0x0a
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e8       	ldi	r20, 0x80	; 128
    3568:	5f e3       	ldi	r21, 0x3F	; 63
    356a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    356e:	88 23       	and	r24, r24
    3570:	2c f4       	brge	.+10     	; 0x357c <main+0x7c>
		__ticks = 1;
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	9e 83       	std	Y+6, r25	; 0x06
    3578:	8d 83       	std	Y+5, r24	; 0x05
    357a:	3f c0       	rjmp	.+126    	; 0x35fa <main+0xfa>
	else if (__tmp > 65535)
    357c:	6f 81       	ldd	r22, Y+7	; 0x07
    357e:	78 85       	ldd	r23, Y+8	; 0x08
    3580:	89 85       	ldd	r24, Y+9	; 0x09
    3582:	9a 85       	ldd	r25, Y+10	; 0x0a
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	3f ef       	ldi	r19, 0xFF	; 255
    3588:	4f e7       	ldi	r20, 0x7F	; 127
    358a:	57 e4       	ldi	r21, 0x47	; 71
    358c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3590:	18 16       	cp	r1, r24
    3592:	4c f5       	brge	.+82     	; 0x35e6 <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3594:	6b 85       	ldd	r22, Y+11	; 0x0b
    3596:	7c 85       	ldd	r23, Y+12	; 0x0c
    3598:	8d 85       	ldd	r24, Y+13	; 0x0d
    359a:	9e 85       	ldd	r25, Y+14	; 0x0e
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	40 e2       	ldi	r20, 0x20	; 32
    35a2:	51 e4       	ldi	r21, 0x41	; 65
    35a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9e 83       	std	Y+6, r25	; 0x06
    35ba:	8d 83       	std	Y+5, r24	; 0x05
    35bc:	0f c0       	rjmp	.+30     	; 0x35dc <main+0xdc>
    35be:	88 ec       	ldi	r24, 0xC8	; 200
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	9c 83       	std	Y+4, r25	; 0x04
    35c4:	8b 83       	std	Y+3, r24	; 0x03
    35c6:	8b 81       	ldd	r24, Y+3	; 0x03
    35c8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <main+0xca>
    35ce:	9c 83       	std	Y+4, r25	; 0x04
    35d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d2:	8d 81       	ldd	r24, Y+5	; 0x05
    35d4:	9e 81       	ldd	r25, Y+6	; 0x06
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	9e 83       	std	Y+6, r25	; 0x06
    35da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35dc:	8d 81       	ldd	r24, Y+5	; 0x05
    35de:	9e 81       	ldd	r25, Y+6	; 0x06
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	69 f7       	brne	.-38     	; 0x35be <main+0xbe>
    35e4:	9c cf       	rjmp	.-200    	; 0x351e <main+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e6:	6f 81       	ldd	r22, Y+7	; 0x07
    35e8:	78 85       	ldd	r23, Y+8	; 0x08
    35ea:	89 85       	ldd	r24, Y+9	; 0x09
    35ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	9e 83       	std	Y+6, r25	; 0x06
    35f8:	8d 83       	std	Y+5, r24	; 0x05
    35fa:	8d 81       	ldd	r24, Y+5	; 0x05
    35fc:	9e 81       	ldd	r25, Y+6	; 0x06
    35fe:	9a 83       	std	Y+2, r25	; 0x02
    3600:	89 83       	std	Y+1, r24	; 0x01
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	9a 81       	ldd	r25, Y+2	; 0x02
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <main+0x106>
    360a:	9a 83       	std	Y+2, r25	; 0x02
    360c:	89 83       	std	Y+1, r24	; 0x01
    360e:	87 cf       	rjmp	.-242    	; 0x351e <main+0x1e>

00003610 <__udivmodhi4>:
    3610:	aa 1b       	sub	r26, r26
    3612:	bb 1b       	sub	r27, r27
    3614:	51 e1       	ldi	r21, 0x11	; 17
    3616:	07 c0       	rjmp	.+14     	; 0x3626 <__udivmodhi4_ep>

00003618 <__udivmodhi4_loop>:
    3618:	aa 1f       	adc	r26, r26
    361a:	bb 1f       	adc	r27, r27
    361c:	a6 17       	cp	r26, r22
    361e:	b7 07       	cpc	r27, r23
    3620:	10 f0       	brcs	.+4      	; 0x3626 <__udivmodhi4_ep>
    3622:	a6 1b       	sub	r26, r22
    3624:	b7 0b       	sbc	r27, r23

00003626 <__udivmodhi4_ep>:
    3626:	88 1f       	adc	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	5a 95       	dec	r21
    362c:	a9 f7       	brne	.-22     	; 0x3618 <__udivmodhi4_loop>
    362e:	80 95       	com	r24
    3630:	90 95       	com	r25
    3632:	bc 01       	movw	r22, r24
    3634:	cd 01       	movw	r24, r26
    3636:	08 95       	ret

00003638 <__udivmodsi4>:
    3638:	a1 e2       	ldi	r26, 0x21	; 33
    363a:	1a 2e       	mov	r1, r26
    363c:	aa 1b       	sub	r26, r26
    363e:	bb 1b       	sub	r27, r27
    3640:	fd 01       	movw	r30, r26
    3642:	0d c0       	rjmp	.+26     	; 0x365e <__udivmodsi4_ep>

00003644 <__udivmodsi4_loop>:
    3644:	aa 1f       	adc	r26, r26
    3646:	bb 1f       	adc	r27, r27
    3648:	ee 1f       	adc	r30, r30
    364a:	ff 1f       	adc	r31, r31
    364c:	a2 17       	cp	r26, r18
    364e:	b3 07       	cpc	r27, r19
    3650:	e4 07       	cpc	r30, r20
    3652:	f5 07       	cpc	r31, r21
    3654:	20 f0       	brcs	.+8      	; 0x365e <__udivmodsi4_ep>
    3656:	a2 1b       	sub	r26, r18
    3658:	b3 0b       	sbc	r27, r19
    365a:	e4 0b       	sbc	r30, r20
    365c:	f5 0b       	sbc	r31, r21

0000365e <__udivmodsi4_ep>:
    365e:	66 1f       	adc	r22, r22
    3660:	77 1f       	adc	r23, r23
    3662:	88 1f       	adc	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	1a 94       	dec	r1
    3668:	69 f7       	brne	.-38     	; 0x3644 <__udivmodsi4_loop>
    366a:	60 95       	com	r22
    366c:	70 95       	com	r23
    366e:	80 95       	com	r24
    3670:	90 95       	com	r25
    3672:	9b 01       	movw	r18, r22
    3674:	ac 01       	movw	r20, r24
    3676:	bd 01       	movw	r22, r26
    3678:	cf 01       	movw	r24, r30
    367a:	08 95       	ret

0000367c <__prologue_saves__>:
    367c:	2f 92       	push	r2
    367e:	3f 92       	push	r3
    3680:	4f 92       	push	r4
    3682:	5f 92       	push	r5
    3684:	6f 92       	push	r6
    3686:	7f 92       	push	r7
    3688:	8f 92       	push	r8
    368a:	9f 92       	push	r9
    368c:	af 92       	push	r10
    368e:	bf 92       	push	r11
    3690:	cf 92       	push	r12
    3692:	df 92       	push	r13
    3694:	ef 92       	push	r14
    3696:	ff 92       	push	r15
    3698:	0f 93       	push	r16
    369a:	1f 93       	push	r17
    369c:	cf 93       	push	r28
    369e:	df 93       	push	r29
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	ca 1b       	sub	r28, r26
    36a6:	db 0b       	sbc	r29, r27
    36a8:	0f b6       	in	r0, 0x3f	; 63
    36aa:	f8 94       	cli
    36ac:	de bf       	out	0x3e, r29	; 62
    36ae:	0f be       	out	0x3f, r0	; 63
    36b0:	cd bf       	out	0x3d, r28	; 61
    36b2:	09 94       	ijmp

000036b4 <__epilogue_restores__>:
    36b4:	2a 88       	ldd	r2, Y+18	; 0x12
    36b6:	39 88       	ldd	r3, Y+17	; 0x11
    36b8:	48 88       	ldd	r4, Y+16	; 0x10
    36ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    36bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    36be:	7d 84       	ldd	r7, Y+13	; 0x0d
    36c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    36c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    36c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    36c6:	b9 84       	ldd	r11, Y+9	; 0x09
    36c8:	c8 84       	ldd	r12, Y+8	; 0x08
    36ca:	df 80       	ldd	r13, Y+7	; 0x07
    36cc:	ee 80       	ldd	r14, Y+6	; 0x06
    36ce:	fd 80       	ldd	r15, Y+5	; 0x05
    36d0:	0c 81       	ldd	r16, Y+4	; 0x04
    36d2:	1b 81       	ldd	r17, Y+3	; 0x03
    36d4:	aa 81       	ldd	r26, Y+2	; 0x02
    36d6:	b9 81       	ldd	r27, Y+1	; 0x01
    36d8:	ce 0f       	add	r28, r30
    36da:	d1 1d       	adc	r29, r1
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	f8 94       	cli
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	0f be       	out	0x3f, r0	; 63
    36e4:	cd bf       	out	0x3d, r28	; 61
    36e6:	ed 01       	movw	r28, r26
    36e8:	08 95       	ret

000036ea <_exit>:
    36ea:	f8 94       	cli

000036ec <__stop_program>:
    36ec:	ff cf       	rjmp	.-2      	; 0x36ec <__stop_program>
