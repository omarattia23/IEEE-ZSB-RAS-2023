
test000001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002168  000021dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001644  00000000  00000000  000021e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ad2  00000000  00000000  00003828  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000042fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000445a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000045e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000662e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000772f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000086b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00008834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00008af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009384  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b3 0a 	call	0x1566	; 0x1566 <main>
      7a:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 97 10 	jmp	0x212e	; 0x212e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 87 10 	jmp	0x210e	; 0x210e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 87 10 	jmp	0x210e	; 0x210e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 97 10 	jmp	0x212e	; 0x212e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 87 10 	jmp	0x210e	; 0x210e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 87 10 	jmp	0x210e	; 0x210e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 87 10 	jmp	0x210e	; 0x210e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidInit>:
/* MCAL */
#include "DIO_config.h"
#include "DIO_interface.h"
#include "DIO_privret.h"

void DIO_voidInit(void) {
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	/************************* Direction ********************************/
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	10 82       	st	Z, r1
			DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION,
			DIO_u8_PA4_INTIAL_DIRECTION, DIO_u8_PA3_INTIAL_DIRECTION,
			DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION,
			DIO_u8_PA0_INTIAL_DIRECTION);

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,
     c9c:	e7 e3       	ldi	r30, 0x37	; 55
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	10 82       	st	Z, r1
			DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION,
			DIO_u8_PB4_INTIAL_DIRECTION, DIO_u8_PB3_INTIAL_DIRECTION,
			DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION,
			DIO_u8_PB0_INTIAL_DIRECTION);

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,
     ca2:	e4 e3       	ldi	r30, 0x34	; 52
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	10 82       	st	Z, r1
			DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION,
			DIO_u8_PC4_INTIAL_DIRECTION, DIO_u8_PC3_INTIAL_DIRECTION,
			DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION,
			DIO_u8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,
     ca8:	e1 e3       	ldi	r30, 0x31	; 49
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	10 82       	st	Z, r1
			DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION,
			DIO_u8_PD4_INTIAL_DIRECTION, DIO_u8_PD3_INTIAL_DIRECTION,
			DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION,
			DIO_u8_PD0_INTIAL_DIRECTION);
	/************************* ports ***********************************/
	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE,
     cae:	eb e3       	ldi	r30, 0x3B	; 59
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	10 82       	st	Z, r1
			DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,
			DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE,
			DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE,
     cb4:	e8 e3       	ldi	r30, 0x38	; 56
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	10 82       	st	Z, r1
			DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,
			DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE,
			DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE,
     cba:	e5 e3       	ldi	r30, 0x35	; 53
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	10 82       	st	Z, r1
			DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,
			DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE,
			DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE,
     cc0:	e2 e3       	ldi	r30, 0x32	; 50
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	10 82       	st	Z, r1
			DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,
			DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE,
			DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
}
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <DIO_voidSetPinDirection>:
u8 DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinID,
		u8 Copy_u8PinDirection) {
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	2e 97       	sbiw	r28, 0x0e	; 14
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	8a 83       	std	Y+2, r24	; 0x02
     ce2:	6b 83       	std	Y+3, r22	; 0x03
     ce4:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId <= DIO_u8_PIN7)
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	84 30       	cpi	r24, 0x04	; 4
     cee:	08 f0       	brcs	.+2      	; 0xcf2 <DIO_voidSetPinDirection+0x26>
     cf0:	0c c1       	rjmp	.+536    	; 0xf0a <DIO_voidSetPinDirection+0x23e>
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	88 30       	cpi	r24, 0x08	; 8
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <DIO_voidSetPinDirection+0x2e>
     cf8:	08 c1       	rjmp	.+528    	; 0xf0a <DIO_voidSetPinDirection+0x23e>
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	21 f0       	breq	.+8      	; 0xd08 <DIO_voidSetPinDirection+0x3c>
     d00:	8c 81       	ldd	r24, Y+4	; 0x04
     d02:	88 23       	and	r24, r24
     d04:	09 f0       	breq	.+2      	; 0xd08 <DIO_voidSetPinDirection+0x3c>
     d06:	01 c1       	rjmp	.+514    	; 0xf0a <DIO_voidSetPinDirection+0x23e>
			&& ((Copy_u8PinDirection == DIO_u8_OUTPUT)
					|| (Copy_u8PinDirection == DIO_u8_INPUT))) {
		switch (Copy_u8PortId) {
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	3e 87       	std	Y+14, r19	; 0x0e
     d10:	2d 87       	std	Y+13, r18	; 0x0d
     d12:	8d 85       	ldd	r24, Y+13	; 0x0d
     d14:	9e 85       	ldd	r25, Y+14	; 0x0e
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	91 05       	cpc	r25, r1
     d1a:	09 f4       	brne	.+2      	; 0xd1e <DIO_voidSetPinDirection+0x52>
     d1c:	4f c0       	rjmp	.+158    	; 0xdbc <DIO_voidSetPinDirection+0xf0>
     d1e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d20:	3e 85       	ldd	r19, Y+14	; 0x0e
     d22:	22 30       	cpi	r18, 0x02	; 2
     d24:	31 05       	cpc	r19, r1
     d26:	2c f4       	brge	.+10     	; 0xd32 <DIO_voidSetPinDirection+0x66>
     d28:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	71 f0       	breq	.+28     	; 0xd4c <DIO_voidSetPinDirection+0x80>
     d30:	ed c0       	rjmp	.+474    	; 0xf0c <DIO_voidSetPinDirection+0x240>
     d32:	2d 85       	ldd	r18, Y+13	; 0x0d
     d34:	3e 85       	ldd	r19, Y+14	; 0x0e
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	09 f4       	brne	.+2      	; 0xd3e <DIO_voidSetPinDirection+0x72>
     d3c:	77 c0       	rjmp	.+238    	; 0xe2c <DIO_voidSetPinDirection+0x160>
     d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d40:	9e 85       	ldd	r25, Y+14	; 0x0e
     d42:	83 30       	cpi	r24, 0x03	; 3
     d44:	91 05       	cpc	r25, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <DIO_voidSetPinDirection+0x7e>
     d48:	a9 c0       	rjmp	.+338    	; 0xe9c <DIO_voidSetPinDirection+0x1d0>
     d4a:	e0 c0       	rjmp	.+448    	; 0xf0c <DIO_voidSetPinDirection+0x240>
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection) {
     d4c:	8c 81       	ldd	r24, Y+4	; 0x04
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	3c 87       	std	Y+12, r19	; 0x0c
     d54:	2b 87       	std	Y+11, r18	; 0x0b
     d56:	8b 85       	ldd	r24, Y+11	; 0x0b
     d58:	9c 85       	ldd	r25, Y+12	; 0x0c
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	d1 f0       	breq	.+52     	; 0xd92 <DIO_voidSetPinDirection+0xc6>
     d5e:	2b 85       	ldd	r18, Y+11	; 0x0b
     d60:	3c 85       	ldd	r19, Y+12	; 0x0c
     d62:	21 30       	cpi	r18, 0x01	; 1
     d64:	31 05       	cpc	r19, r1
     d66:	09 f0       	breq	.+2      	; 0xd6a <DIO_voidSetPinDirection+0x9e>
     d68:	d1 c0       	rjmp	.+418    	; 0xf0c <DIO_voidSetPinDirection+0x240>
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinID);
     d6a:	aa e3       	ldi	r26, 0x3A	; 58
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ea e3       	ldi	r30, 0x3A	; 58
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_voidSetPinDirection+0xbc>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_voidSetPinDirection+0xb8>
     d8c:	84 2b       	or	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	bd c0       	rjmp	.+378    	; 0xf0c <DIO_voidSetPinDirection+0x240>
				break;
			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinID);
     d92:	aa e3       	ldi	r26, 0x3A	; 58
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	ea e3       	ldi	r30, 0x3A	; 58
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_voidSetPinDirection+0xe4>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_voidSetPinDirection+0xe0>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	a8 c0       	rjmp	.+336    	; 0xf0c <DIO_voidSetPinDirection+0x240>
				break;
			}

			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection) {
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3a 87       	std	Y+10, r19	; 0x0a
     dc4:	29 87       	std	Y+9, r18	; 0x09
     dc6:	89 85       	ldd	r24, Y+9	; 0x09
     dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	d1 f0       	breq	.+52     	; 0xe02 <DIO_voidSetPinDirection+0x136>
     dce:	29 85       	ldd	r18, Y+9	; 0x09
     dd0:	3a 85       	ldd	r19, Y+10	; 0x0a
     dd2:	21 30       	cpi	r18, 0x01	; 1
     dd4:	31 05       	cpc	r19, r1
     dd6:	09 f0       	breq	.+2      	; 0xdda <DIO_voidSetPinDirection+0x10e>
     dd8:	99 c0       	rjmp	.+306    	; 0xf0c <DIO_voidSetPinDirection+0x240>
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinID);
     dda:	a7 e3       	ldi	r26, 0x37	; 55
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e7 e3       	ldi	r30, 0x37	; 55
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_voidSetPinDirection+0x12c>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_voidSetPinDirection+0x128>
     dfc:	84 2b       	or	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	85 c0       	rjmp	.+266    	; 0xf0c <DIO_voidSetPinDirection+0x240>
				break;
			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinID);
     e02:	a7 e3       	ldi	r26, 0x37	; 55
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e7 e3       	ldi	r30, 0x37	; 55
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_voidSetPinDirection+0x154>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_voidSetPinDirection+0x150>
     e24:	80 95       	com	r24
     e26:	84 23       	and	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	70 c0       	rjmp	.+224    	; 0xf0c <DIO_voidSetPinDirection+0x240>
				break;
			}

			break;
		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection) {
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	38 87       	std	Y+8, r19	; 0x08
     e34:	2f 83       	std	Y+7, r18	; 0x07
     e36:	8f 81       	ldd	r24, Y+7	; 0x07
     e38:	98 85       	ldd	r25, Y+8	; 0x08
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	d1 f0       	breq	.+52     	; 0xe72 <DIO_voidSetPinDirection+0x1a6>
     e3e:	2f 81       	ldd	r18, Y+7	; 0x07
     e40:	38 85       	ldd	r19, Y+8	; 0x08
     e42:	21 30       	cpi	r18, 0x01	; 1
     e44:	31 05       	cpc	r19, r1
     e46:	09 f0       	breq	.+2      	; 0xe4a <DIO_voidSetPinDirection+0x17e>
     e48:	61 c0       	rjmp	.+194    	; 0xf0c <DIO_voidSetPinDirection+0x240>
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinID);
     e4a:	a4 e3       	ldi	r26, 0x34	; 52
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e4 e3       	ldi	r30, 0x34	; 52
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_voidSetPinDirection+0x19c>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_voidSetPinDirection+0x198>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	4d c0       	rjmp	.+154    	; 0xf0c <DIO_voidSetPinDirection+0x240>
				break;
			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinID);
     e72:	a4 e3       	ldi	r26, 0x34	; 52
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e4 e3       	ldi	r30, 0x34	; 52
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_voidSetPinDirection+0x1c4>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO_voidSetPinDirection+0x1c0>
     e94:	80 95       	com	r24
     e96:	84 23       	and	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	38 c0       	rjmp	.+112    	; 0xf0c <DIO_voidSetPinDirection+0x240>
				break;
			}

			break;
		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection) {
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	3e 83       	std	Y+6, r19	; 0x06
     ea4:	2d 83       	std	Y+5, r18	; 0x05
     ea6:	8d 81       	ldd	r24, Y+5	; 0x05
     ea8:	9e 81       	ldd	r25, Y+6	; 0x06
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	c9 f0       	breq	.+50     	; 0xee0 <DIO_voidSetPinDirection+0x214>
     eae:	2d 81       	ldd	r18, Y+5	; 0x05
     eb0:	3e 81       	ldd	r19, Y+6	; 0x06
     eb2:	21 30       	cpi	r18, 0x01	; 1
     eb4:	31 05       	cpc	r19, r1
     eb6:	51 f5       	brne	.+84     	; 0xf0c <DIO_voidSetPinDirection+0x240>
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinID);
     eb8:	a1 e3       	ldi	r26, 0x31	; 49
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e1 e3       	ldi	r30, 0x31	; 49
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_voidSetPinDirection+0x20a>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_voidSetPinDirection+0x206>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	16 c0       	rjmp	.+44     	; 0xf0c <DIO_voidSetPinDirection+0x240>
				break;
			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinID);
     ee0:	a1 e3       	ldi	r26, 0x31	; 49
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e1 e3       	ldi	r30, 0x31	; 49
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_voidSetPinDirection+0x232>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_voidSetPinDirection+0x22e>
     f02:	80 95       	com	r24
     f04:	84 23       	and	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <DIO_voidSetPinDirection+0x240>
			}

			break;
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
     f0a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f0e:	2e 96       	adiw	r28, 0x0e	; 14
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <DIO_voidSetPinValue>:
u8 DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_PinID, u8 Copy_u8PinValue) {
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	2e 97       	sbiw	r28, 0x0e	; 14
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	8a 83       	std	Y+2, r24	; 0x02
     f36:	6b 83       	std	Y+3, r22	; 0x03
     f38:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8ErrorState = STD_TYPES_OK;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_PinID <= DIO_u8_PIN7) {
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	88 30       	cpi	r24, 0x08	; 8
     f42:	08 f0       	brcs	.+2      	; 0xf46 <DIO_voidSetPinValue+0x26>
     f44:	08 c1       	rjmp	.+528    	; 0x1156 <DIO_voidSetPinValue+0x236>

		switch (Copy_u8PortId) {
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	3e 87       	std	Y+14, r19	; 0x0e
     f4e:	2d 87       	std	Y+13, r18	; 0x0d
     f50:	8d 85       	ldd	r24, Y+13	; 0x0d
     f52:	9e 85       	ldd	r25, Y+14	; 0x0e
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	09 f4       	brne	.+2      	; 0xf5c <DIO_voidSetPinValue+0x3c>
     f5a:	50 c0       	rjmp	.+160    	; 0xffc <DIO_voidSetPinValue+0xdc>
     f5c:	2d 85       	ldd	r18, Y+13	; 0x0d
     f5e:	3e 85       	ldd	r19, Y+14	; 0x0e
     f60:	22 30       	cpi	r18, 0x02	; 2
     f62:	31 05       	cpc	r19, r1
     f64:	2c f4       	brge	.+10     	; 0xf70 <DIO_voidSetPinValue+0x50>
     f66:	8d 85       	ldd	r24, Y+13	; 0x0d
     f68:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	71 f0       	breq	.+28     	; 0xf8a <DIO_voidSetPinValue+0x6a>
     f6e:	f1 c0       	rjmp	.+482    	; 0x1152 <DIO_voidSetPinValue+0x232>
     f70:	2d 85       	ldd	r18, Y+13	; 0x0d
     f72:	3e 85       	ldd	r19, Y+14	; 0x0e
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <DIO_voidSetPinValue+0x5c>
     f7a:	79 c0       	rjmp	.+242    	; 0x106e <DIO_voidSetPinValue+0x14e>
     f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	91 05       	cpc	r25, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <DIO_voidSetPinValue+0x68>
     f86:	ac c0       	rjmp	.+344    	; 0x10e0 <DIO_voidSetPinValue+0x1c0>
     f88:	e4 c0       	rjmp	.+456    	; 0x1152 <DIO_voidSetPinValue+0x232>
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue) {
     f8a:	8c 81       	ldd	r24, Y+4	; 0x04
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3c 87       	std	Y+12, r19	; 0x0c
     f92:	2b 87       	std	Y+11, r18	; 0x0b
     f94:	8b 85       	ldd	r24, Y+11	; 0x0b
     f96:	9c 85       	ldd	r25, Y+12	; 0x0c
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	c9 f0       	breq	.+50     	; 0xfce <DIO_voidSetPinValue+0xae>
     f9c:	2b 85       	ldd	r18, Y+11	; 0x0b
     f9e:	3c 85       	ldd	r19, Y+12	; 0x0c
     fa0:	21 30       	cpi	r18, 0x01	; 1
     fa2:	31 05       	cpc	r19, r1
     fa4:	49 f5       	brne	.+82     	; 0xff8 <DIO_voidSetPinValue+0xd8>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_PinID);
     fa6:	ab e3       	ldi	r26, 0x3B	; 59
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	eb e3       	ldi	r30, 0x3B	; 59
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_voidSetPinValue+0xa4>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_voidSetPinValue+0xa0>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	c5 c0       	rjmp	.+394    	; 0x1158 <DIO_voidSetPinValue+0x238>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_PinID);
     fce:	ab e3       	ldi	r26, 0x3B	; 59
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	eb e3       	ldi	r30, 0x3B	; 59
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_voidSetPinValue+0xcc>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_voidSetPinValue+0xc8>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	b0 c0       	rjmp	.+352    	; 0x1158 <DIO_voidSetPinValue+0x238>
				break;
			default:
				local_u8ErrorState = STD_TYPES_NOK;
     ff8:	19 82       	std	Y+1, r1	; 0x01
     ffa:	ae c0       	rjmp	.+348    	; 0x1158 <DIO_voidSetPinValue+0x238>
				break;
			}
			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PinValue) {
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	3a 87       	std	Y+10, r19	; 0x0a
    1004:	29 87       	std	Y+9, r18	; 0x09
    1006:	89 85       	ldd	r24, Y+9	; 0x09
    1008:	9a 85       	ldd	r25, Y+10	; 0x0a
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	c9 f0       	breq	.+50     	; 0x1040 <DIO_voidSetPinValue+0x120>
    100e:	29 85       	ldd	r18, Y+9	; 0x09
    1010:	3a 85       	ldd	r19, Y+10	; 0x0a
    1012:	21 30       	cpi	r18, 0x01	; 1
    1014:	31 05       	cpc	r19, r1
    1016:	49 f5       	brne	.+82     	; 0x106a <DIO_voidSetPinValue+0x14a>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_PinID);
    1018:	a8 e3       	ldi	r26, 0x38	; 56
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e8 e3       	ldi	r30, 0x38	; 56
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_voidSetPinValue+0x116>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_voidSetPinValue+0x112>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	8c c0       	rjmp	.+280    	; 0x1158 <DIO_voidSetPinValue+0x238>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_PinID);
    1040:	a8 e3       	ldi	r26, 0x38	; 56
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e8 e3       	ldi	r30, 0x38	; 56
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_voidSetPinValue+0x13e>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_voidSetPinValue+0x13a>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	77 c0       	rjmp	.+238    	; 0x1158 <DIO_voidSetPinValue+0x238>
				break;
			default:
				local_u8ErrorState = STD_TYPES_NOK;
    106a:	19 82       	std	Y+1, r1	; 0x01
    106c:	75 c0       	rjmp	.+234    	; 0x1158 <DIO_voidSetPinValue+0x238>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue) {
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	38 87       	std	Y+8, r19	; 0x08
    1076:	2f 83       	std	Y+7, r18	; 0x07
    1078:	8f 81       	ldd	r24, Y+7	; 0x07
    107a:	98 85       	ldd	r25, Y+8	; 0x08
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	c9 f0       	breq	.+50     	; 0x10b2 <DIO_voidSetPinValue+0x192>
    1080:	2f 81       	ldd	r18, Y+7	; 0x07
    1082:	38 85       	ldd	r19, Y+8	; 0x08
    1084:	21 30       	cpi	r18, 0x01	; 1
    1086:	31 05       	cpc	r19, r1
    1088:	49 f5       	brne	.+82     	; 0x10dc <DIO_voidSetPinValue+0x1bc>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_PinID);
    108a:	a5 e3       	ldi	r26, 0x35	; 53
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e5 e3       	ldi	r30, 0x35	; 53
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_voidSetPinValue+0x188>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_voidSetPinValue+0x184>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	53 c0       	rjmp	.+166    	; 0x1158 <DIO_voidSetPinValue+0x238>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_PinID);
    10b2:	a5 e3       	ldi	r26, 0x35	; 53
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e5 e3       	ldi	r30, 0x35	; 53
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_voidSetPinValue+0x1b0>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_voidSetPinValue+0x1ac>
    10d4:	80 95       	com	r24
    10d6:	84 23       	and	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	3e c0       	rjmp	.+124    	; 0x1158 <DIO_voidSetPinValue+0x238>
				break;
			default:
				local_u8ErrorState = STD_TYPES_NOK;
    10dc:	19 82       	std	Y+1, r1	; 0x01
    10de:	3c c0       	rjmp	.+120    	; 0x1158 <DIO_voidSetPinValue+0x238>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue) {
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	3e 83       	std	Y+6, r19	; 0x06
    10e8:	2d 83       	std	Y+5, r18	; 0x05
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	c9 f0       	breq	.+50     	; 0x1124 <DIO_voidSetPinValue+0x204>
    10f2:	2d 81       	ldd	r18, Y+5	; 0x05
    10f4:	3e 81       	ldd	r19, Y+6	; 0x06
    10f6:	21 30       	cpi	r18, 0x01	; 1
    10f8:	31 05       	cpc	r19, r1
    10fa:	49 f5       	brne	.+82     	; 0x114e <DIO_voidSetPinValue+0x22e>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_PinID);
    10fc:	a2 e3       	ldi	r26, 0x32	; 50
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e2 e3       	ldi	r30, 0x32	; 50
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_voidSetPinValue+0x1fa>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_voidSetPinValue+0x1f6>
    111e:	84 2b       	or	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	1a c0       	rjmp	.+52     	; 0x1158 <DIO_voidSetPinValue+0x238>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTD_REG, Copy_PinID);
    1124:	a2 e3       	ldi	r26, 0x32	; 50
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e2 e3       	ldi	r30, 0x32	; 50
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_voidSetPinValue+0x222>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_voidSetPinValue+0x21e>
    1146:	80 95       	com	r24
    1148:	84 23       	and	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	05 c0       	rjmp	.+10     	; 0x1158 <DIO_voidSetPinValue+0x238>
				break;
			default:
				local_u8ErrorState = STD_TYPES_NOK;
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <DIO_voidSetPinValue+0x238>
				break;
			}
			break;

		default:
			local_u8ErrorState = STD_TYPES_NOK;
    1152:	19 82       	std	Y+1, r1	; 0x01
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <DIO_voidSetPinValue+0x238>
		}
	} else {
		local_u8ErrorState = STD_TYPES_NOK;
    1156:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState;
    1158:	89 81       	ldd	r24, Y+1	; 0x01
}
    115a:	2e 96       	adiw	r28, 0x0e	; 14
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_PinID, u8 *Copy_pu8PinValue) {
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	28 97       	sbiw	r28, 0x08	; 8
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	8b 83       	std	Y+3, r24	; 0x03
    1182:	6c 83       	std	Y+4, r22	; 0x04
    1184:	5e 83       	std	Y+6, r21	; 0x06
    1186:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_PinID <= DIO_u8_PIN7)
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	84 30       	cpi	r24, 0x04	; 4
    1190:	08 f0       	brcs	.+2      	; 0x1194 <DIO_u8GetPinValue+0x28>
    1192:	9f c0       	rjmp	.+318    	; 0x12d2 <DIO_u8GetPinValue+0x166>
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	88 30       	cpi	r24, 0x08	; 8
    1198:	08 f0       	brcs	.+2      	; 0x119c <DIO_u8GetPinValue+0x30>
    119a:	9b c0       	rjmp	.+310    	; 0x12d2 <DIO_u8GetPinValue+0x166>
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <DIO_u8GetPinValue+0x3a>
    11a4:	96 c0       	rjmp	.+300    	; 0x12d2 <DIO_u8GetPinValue+0x166>
			&& (Copy_pu8PinValue != NULL)) {
		switch (Copy_u8PortId) {
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	38 87       	std	Y+8, r19	; 0x08
    11ae:	2f 83       	std	Y+7, r18	; 0x07
    11b0:	4f 81       	ldd	r20, Y+7	; 0x07
    11b2:	58 85       	ldd	r21, Y+8	; 0x08
    11b4:	41 30       	cpi	r20, 0x01	; 1
    11b6:	51 05       	cpc	r21, r1
    11b8:	a9 f1       	breq	.+106    	; 0x1224 <DIO_u8GetPinValue+0xb8>
    11ba:	8f 81       	ldd	r24, Y+7	; 0x07
    11bc:	98 85       	ldd	r25, Y+8	; 0x08
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	91 05       	cpc	r25, r1
    11c2:	34 f4       	brge	.+12     	; 0x11d0 <DIO_u8GetPinValue+0x64>
    11c4:	2f 81       	ldd	r18, Y+7	; 0x07
    11c6:	38 85       	ldd	r19, Y+8	; 0x08
    11c8:	21 15       	cp	r18, r1
    11ca:	31 05       	cpc	r19, r1
    11cc:	71 f0       	breq	.+28     	; 0x11ea <DIO_u8GetPinValue+0x7e>
    11ce:	82 c0       	rjmp	.+260    	; 0x12d4 <DIO_u8GetPinValue+0x168>
    11d0:	4f 81       	ldd	r20, Y+7	; 0x07
    11d2:	58 85       	ldd	r21, Y+8	; 0x08
    11d4:	42 30       	cpi	r20, 0x02	; 2
    11d6:	51 05       	cpc	r21, r1
    11d8:	09 f4       	brne	.+2      	; 0x11dc <DIO_u8GetPinValue+0x70>
    11da:	41 c0       	rjmp	.+130    	; 0x125e <DIO_u8GetPinValue+0xf2>
    11dc:	8f 81       	ldd	r24, Y+7	; 0x07
    11de:	98 85       	ldd	r25, Y+8	; 0x08
    11e0:	83 30       	cpi	r24, 0x03	; 3
    11e2:	91 05       	cpc	r25, r1
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <DIO_u8GetPinValue+0x7c>
    11e6:	58 c0       	rjmp	.+176    	; 0x1298 <DIO_u8GetPinValue+0x12c>
    11e8:	75 c0       	rjmp	.+234    	; 0x12d4 <DIO_u8GetPinValue+0x168>
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_PinID);
    11ea:	e9 e3       	ldi	r30, 0x39	; 57
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a9 01       	movw	r20, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_u8GetPinValue+0x96>
    11fe:	55 95       	asr	r21
    1200:	47 95       	ror	r20
    1202:	8a 95       	dec	r24
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_u8GetPinValue+0x92>
    1206:	ca 01       	movw	r24, r20
    1208:	81 70       	andi	r24, 0x01	; 1
    120a:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == 0) {
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	88 23       	and	r24, r24
    1210:	21 f4       	brne	.+8      	; 0x121a <DIO_u8GetPinValue+0xae>
				*Copy_pu8PinValue = DIO_u8_LOW;
    1212:	ed 81       	ldd	r30, Y+5	; 0x05
    1214:	fe 81       	ldd	r31, Y+6	; 0x06
    1216:	10 82       	st	Z, r1
    1218:	5d c0       	rjmp	.+186    	; 0x12d4 <DIO_u8GetPinValue+0x168>
			} else {
				*Copy_pu8PinValue = DIO_u8_HIGH;
    121a:	ed 81       	ldd	r30, Y+5	; 0x05
    121c:	fe 81       	ldd	r31, Y+6	; 0x06
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	80 83       	st	Z, r24
    1222:	58 c0       	rjmp	.+176    	; 0x12d4 <DIO_u8GetPinValue+0x168>
			}

			break;
		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_PinID);
    1224:	e6 e3       	ldi	r30, 0x36	; 54
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a9 01       	movw	r20, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <DIO_u8GetPinValue+0xd0>
    1238:	55 95       	asr	r21
    123a:	47 95       	ror	r20
    123c:	8a 95       	dec	r24
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <DIO_u8GetPinValue+0xcc>
    1240:	ca 01       	movw	r24, r20
    1242:	81 70       	andi	r24, 0x01	; 1
    1244:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == 0) {
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	88 23       	and	r24, r24
    124a:	21 f4       	brne	.+8      	; 0x1254 <DIO_u8GetPinValue+0xe8>
				*Copy_pu8PinValue = DIO_u8_LOW;
    124c:	ed 81       	ldd	r30, Y+5	; 0x05
    124e:	fe 81       	ldd	r31, Y+6	; 0x06
    1250:	10 82       	st	Z, r1
    1252:	40 c0       	rjmp	.+128    	; 0x12d4 <DIO_u8GetPinValue+0x168>
			} else {
				*Copy_pu8PinValue = DIO_u8_HIGH;
    1254:	ed 81       	ldd	r30, Y+5	; 0x05
    1256:	fe 81       	ldd	r31, Y+6	; 0x06
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 83       	st	Z, r24
    125c:	3b c0       	rjmp	.+118    	; 0x12d4 <DIO_u8GetPinValue+0x168>
			}

			break;
		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_PinID);
    125e:	e3 e3       	ldi	r30, 0x33	; 51
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	8c 81       	ldd	r24, Y+4	; 0x04
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	a9 01       	movw	r20, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_u8GetPinValue+0x10a>
    1272:	55 95       	asr	r21
    1274:	47 95       	ror	r20
    1276:	8a 95       	dec	r24
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_u8GetPinValue+0x106>
    127a:	ca 01       	movw	r24, r20
    127c:	81 70       	andi	r24, 0x01	; 1
    127e:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == 0) {
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	88 23       	and	r24, r24
    1284:	21 f4       	brne	.+8      	; 0x128e <DIO_u8GetPinValue+0x122>
				*Copy_pu8PinValue = DIO_u8_LOW;
    1286:	ed 81       	ldd	r30, Y+5	; 0x05
    1288:	fe 81       	ldd	r31, Y+6	; 0x06
    128a:	10 82       	st	Z, r1
    128c:	23 c0       	rjmp	.+70     	; 0x12d4 <DIO_u8GetPinValue+0x168>
			} else {
				*Copy_pu8PinValue = DIO_u8_HIGH;
    128e:	ed 81       	ldd	r30, Y+5	; 0x05
    1290:	fe 81       	ldd	r31, Y+6	; 0x06
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 83       	st	Z, r24
    1296:	1e c0       	rjmp	.+60     	; 0x12d4 <DIO_u8GetPinValue+0x168>
			}

			break;
		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_PinID);
    1298:	e0 e3       	ldi	r30, 0x30	; 48
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a9 01       	movw	r20, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_u8GetPinValue+0x144>
    12ac:	55 95       	asr	r21
    12ae:	47 95       	ror	r20
    12b0:	8a 95       	dec	r24
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_u8GetPinValue+0x140>
    12b4:	ca 01       	movw	r24, r20
    12b6:	81 70       	andi	r24, 0x01	; 1
    12b8:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == 0) {
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	88 23       	and	r24, r24
    12be:	21 f4       	brne	.+8      	; 0x12c8 <DIO_u8GetPinValue+0x15c>
				*Copy_pu8PinValue = DIO_u8_LOW;
    12c0:	ed 81       	ldd	r30, Y+5	; 0x05
    12c2:	fe 81       	ldd	r31, Y+6	; 0x06
    12c4:	10 82       	st	Z, r1
    12c6:	06 c0       	rjmp	.+12     	; 0x12d4 <DIO_u8GetPinValue+0x168>
			} else {
				*Copy_pu8PinValue = DIO_u8_HIGH;
    12c8:	ed 81       	ldd	r30, Y+5	; 0x05
    12ca:	fe 81       	ldd	r31, Y+6	; 0x06
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 83       	st	Z, r24
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <DIO_u8GetPinValue+0x168>
			}

			break;
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    12d2:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12d6:	28 96       	adiw	r28, 0x08	; 8
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection) {
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	2d 97       	sbiw	r28, 0x0d	; 13
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	8a 83       	std	Y+2, r24	; 0x02
    12fe:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortDirection == DIO_u8_OUTPUT)
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	21 f0       	breq	.+8      	; 0x1312 <DIO_u8SetPortDirection+0x2a>
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 23       	and	r24, r24
    130e:	09 f0       	breq	.+2      	; 0x1312 <DIO_u8SetPortDirection+0x2a>
    1310:	7f c0       	rjmp	.+254    	; 0x1410 <DIO_u8SetPortDirection+0x128>
			|| (Copy_u8PortDirection == DIO_u8_INPUT)) {
		switch (Copy_u8PortID) {
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3d 87       	std	Y+13, r19	; 0x0d
    131a:	2c 87       	std	Y+12, r18	; 0x0c
    131c:	8c 85       	ldd	r24, Y+12	; 0x0c
    131e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	91 05       	cpc	r25, r1
    1324:	71 f1       	breq	.+92     	; 0x1382 <DIO_u8SetPortDirection+0x9a>
    1326:	2c 85       	ldd	r18, Y+12	; 0x0c
    1328:	3d 85       	ldd	r19, Y+13	; 0x0d
    132a:	22 30       	cpi	r18, 0x02	; 2
    132c:	31 05       	cpc	r19, r1
    132e:	2c f4       	brge	.+10     	; 0x133a <DIO_u8SetPortDirection+0x52>
    1330:	8c 85       	ldd	r24, Y+12	; 0x0c
    1332:	9d 85       	ldd	r25, Y+13	; 0x0d
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	69 f0       	breq	.+26     	; 0x1352 <DIO_u8SetPortDirection+0x6a>
    1338:	69 c0       	rjmp	.+210    	; 0x140c <DIO_u8SetPortDirection+0x124>
    133a:	2c 85       	ldd	r18, Y+12	; 0x0c
    133c:	3d 85       	ldd	r19, Y+13	; 0x0d
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	b1 f1       	breq	.+108    	; 0x13b0 <DIO_u8SetPortDirection+0xc8>
    1344:	8c 85       	ldd	r24, Y+12	; 0x0c
    1346:	9d 85       	ldd	r25, Y+13	; 0x0d
    1348:	83 30       	cpi	r24, 0x03	; 3
    134a:	91 05       	cpc	r25, r1
    134c:	09 f4       	brne	.+2      	; 0x1350 <DIO_u8SetPortDirection+0x68>
    134e:	47 c0       	rjmp	.+142    	; 0x13de <DIO_u8SetPortDirection+0xf6>
    1350:	5d c0       	rjmp	.+186    	; 0x140c <DIO_u8SetPortDirection+0x124>
		case DIO_u8_PORTA:
			switch (Copy_u8PortDirection) {
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3b 87       	std	Y+11, r19	; 0x0b
    135a:	2a 87       	std	Y+10, r18	; 0x0a
    135c:	8a 85       	ldd	r24, Y+10	; 0x0a
    135e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	59 f0       	breq	.+22     	; 0x137a <DIO_u8SetPortDirection+0x92>
    1364:	2a 85       	ldd	r18, Y+10	; 0x0a
    1366:	3b 85       	ldd	r19, Y+11	; 0x0b
    1368:	21 30       	cpi	r18, 0x01	; 1
    136a:	31 05       	cpc	r19, r1
    136c:	09 f0       	breq	.+2      	; 0x1370 <DIO_u8SetPortDirection+0x88>
    136e:	51 c0       	rjmp	.+162    	; 0x1412 <DIO_u8SetPortDirection+0x12a>
			case DIO_u8_OUTPUT:
				DIO_u8_DDRA_REG = 0xff;
    1370:	ea e3       	ldi	r30, 0x3A	; 58
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	80 83       	st	Z, r24
    1378:	4c c0       	rjmp	.+152    	; 0x1412 <DIO_u8SetPortDirection+0x12a>
				break;
			case DIO_u8_INPUT:
				DIO_u8_DDRA_REG = 0x00;
    137a:	ea e3       	ldi	r30, 0x3A	; 58
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	10 82       	st	Z, r1
    1380:	48 c0       	rjmp	.+144    	; 0x1412 <DIO_u8SetPortDirection+0x12a>
				break;
			}
			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PortDirection) {
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	39 87       	std	Y+9, r19	; 0x09
    138a:	28 87       	std	Y+8, r18	; 0x08
    138c:	88 85       	ldd	r24, Y+8	; 0x08
    138e:	99 85       	ldd	r25, Y+9	; 0x09
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	51 f0       	breq	.+20     	; 0x13a8 <DIO_u8SetPortDirection+0xc0>
    1394:	28 85       	ldd	r18, Y+8	; 0x08
    1396:	39 85       	ldd	r19, Y+9	; 0x09
    1398:	21 30       	cpi	r18, 0x01	; 1
    139a:	31 05       	cpc	r19, r1
    139c:	d1 f5       	brne	.+116    	; 0x1412 <DIO_u8SetPortDirection+0x12a>
			case DIO_u8_OUTPUT:
				DIO_u8_DDRB_REG = 0xff;
    139e:	e7 e3       	ldi	r30, 0x37	; 55
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	80 83       	st	Z, r24
    13a6:	35 c0       	rjmp	.+106    	; 0x1412 <DIO_u8SetPortDirection+0x12a>
				break;
			case DIO_u8_INPUT:
				DIO_u8_DDRB_REG = 0x00;
    13a8:	e7 e3       	ldi	r30, 0x37	; 55
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	10 82       	st	Z, r1
    13ae:	31 c0       	rjmp	.+98     	; 0x1412 <DIO_u8SetPortDirection+0x12a>
				break;
			}
			break;
		case DIO_u8_PORTC:
			switch (Copy_u8PortDirection) {
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3f 83       	std	Y+7, r19	; 0x07
    13b8:	2e 83       	std	Y+6, r18	; 0x06
    13ba:	8e 81       	ldd	r24, Y+6	; 0x06
    13bc:	9f 81       	ldd	r25, Y+7	; 0x07
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	51 f0       	breq	.+20     	; 0x13d6 <DIO_u8SetPortDirection+0xee>
    13c2:	2e 81       	ldd	r18, Y+6	; 0x06
    13c4:	3f 81       	ldd	r19, Y+7	; 0x07
    13c6:	21 30       	cpi	r18, 0x01	; 1
    13c8:	31 05       	cpc	r19, r1
    13ca:	19 f5       	brne	.+70     	; 0x1412 <DIO_u8SetPortDirection+0x12a>
			case DIO_u8_OUTPUT:
				DIO_u8_DDRC_REG = 0xff;
    13cc:	e4 e3       	ldi	r30, 0x34	; 52
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	80 83       	st	Z, r24
    13d4:	1e c0       	rjmp	.+60     	; 0x1412 <DIO_u8SetPortDirection+0x12a>
				break;
			case DIO_u8_INPUT:
				DIO_u8_DDRC_REG = 0x00;
    13d6:	e4 e3       	ldi	r30, 0x34	; 52
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	10 82       	st	Z, r1
    13dc:	1a c0       	rjmp	.+52     	; 0x1412 <DIO_u8SetPortDirection+0x12a>
				break;
			}
			break;
		case DIO_u8_PORTD:
			switch (Copy_u8PortDirection) {
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	3d 83       	std	Y+5, r19	; 0x05
    13e6:	2c 83       	std	Y+4, r18	; 0x04
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	51 f0       	breq	.+20     	; 0x1404 <DIO_u8SetPortDirection+0x11c>
    13f0:	2c 81       	ldd	r18, Y+4	; 0x04
    13f2:	3d 81       	ldd	r19, Y+5	; 0x05
    13f4:	21 30       	cpi	r18, 0x01	; 1
    13f6:	31 05       	cpc	r19, r1
    13f8:	61 f4       	brne	.+24     	; 0x1412 <DIO_u8SetPortDirection+0x12a>
			case DIO_u8_OUTPUT:
				DIO_u8_DDRD_REG = 0xff;
    13fa:	e1 e3       	ldi	r30, 0x31	; 49
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	80 83       	st	Z, r24
    1402:	07 c0       	rjmp	.+14     	; 0x1412 <DIO_u8SetPortDirection+0x12a>
				break;
			case DIO_u8_INPUT:
				DIO_u8_DDRD_REG = 0x00;
    1404:	e1 e3       	ldi	r30, 0x31	; 49
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	10 82       	st	Z, r1
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <DIO_u8SetPortDirection+0x12a>
				break;
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    140c:	19 82       	std	Y+1, r1	; 0x01
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <DIO_u8SetPortDirection+0x12a>
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    1410:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1412:	89 81       	ldd	r24, Y+1	; 0x01
}
    1414:	2d 96       	adiw	r28, 0x0d	; 13
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8PortID, u8 Copy_u8PortValue) {
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <DIO_u8SetPortValue+0x6>
    142c:	00 d0       	rcall	.+0      	; 0x142e <DIO_u8SetPortValue+0x8>
    142e:	0f 92       	push	r0
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	8a 83       	std	Y+2, r24	; 0x02
    1436:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortID) {
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3d 83       	std	Y+5, r19	; 0x05
    1444:	2c 83       	std	Y+4, r18	; 0x04
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	9d 81       	ldd	r25, Y+5	; 0x05
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	d1 f0       	breq	.+52     	; 0x1484 <DIO_u8SetPortValue+0x5e>
    1450:	2c 81       	ldd	r18, Y+4	; 0x04
    1452:	3d 81       	ldd	r19, Y+5	; 0x05
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	2c f4       	brge	.+10     	; 0x1464 <DIO_u8SetPortValue+0x3e>
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	61 f0       	breq	.+24     	; 0x147a <DIO_u8SetPortValue+0x54>
    1462:	1f c0       	rjmp	.+62     	; 0x14a2 <DIO_u8SetPortValue+0x7c>
    1464:	2c 81       	ldd	r18, Y+4	; 0x04
    1466:	3d 81       	ldd	r19, Y+5	; 0x05
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	81 f0       	breq	.+32     	; 0x148e <DIO_u8SetPortValue+0x68>
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	81 f0       	breq	.+32     	; 0x1498 <DIO_u8SetPortValue+0x72>
    1478:	14 c0       	rjmp	.+40     	; 0x14a2 <DIO_u8SetPortValue+0x7c>
	case DIO_u8_PORTA:
		DIO_u8_PORTA_REG = Copy_u8PortValue;
    147a:	eb e3       	ldi	r30, 0x3B	; 59
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	80 83       	st	Z, r24
    1482:	10 c0       	rjmp	.+32     	; 0x14a4 <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_u8_PORTB:
		DIO_u8_PORTB_REG = Copy_u8PortValue;
    1484:	e8 e3       	ldi	r30, 0x38	; 56
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	80 83       	st	Z, r24
    148c:	0b c0       	rjmp	.+22     	; 0x14a4 <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_u8_PORTC:
		DIO_u8_PORTC_REG = Copy_u8PortValue;
    148e:	e5 e3       	ldi	r30, 0x35	; 53
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	80 83       	st	Z, r24
    1496:	06 c0       	rjmp	.+12     	; 0x14a4 <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_u8_PORTD:
		DIO_u8_PORTD_REG = Copy_u8PortValue;
    1498:	e2 e3       	ldi	r30, 0x32	; 50
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	80 83       	st	Z, r24
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <DIO_u8SetPortValue+0x7e>
		break;

	default:
		Local_u8ErrorState = STD_TYPES_NOK;
    14a2:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return Local_u8ErrorState;
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue) {
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <DIO_u8GetPortValue+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <DIO_u8GetPortValue+0x8>
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_u8GetPortValue+0xa>
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	8a 83       	std	Y+2, r24	; 0x02
    14c6:	7c 83       	std	Y+4, r23	; 0x04
    14c8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8ReturnedPortValue != NULL) {
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	e9 f1       	breq	.+122    	; 0x1550 <DIO_u8GetPortValue+0x9a>
		switch (Copy_u8PortId) {
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	3e 83       	std	Y+6, r19	; 0x06
    14de:	2d 83       	std	Y+5, r18	; 0x05
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	9e 81       	ldd	r25, Y+6	; 0x06
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	91 05       	cpc	r25, r1
    14e8:	e1 f0       	breq	.+56     	; 0x1522 <DIO_u8GetPortValue+0x6c>
    14ea:	2d 81       	ldd	r18, Y+5	; 0x05
    14ec:	3e 81       	ldd	r19, Y+6	; 0x06
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	2c f4       	brge	.+10     	; 0x14fe <DIO_u8GetPortValue+0x48>
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	61 f0       	breq	.+24     	; 0x1514 <DIO_u8GetPortValue+0x5e>
    14fc:	27 c0       	rjmp	.+78     	; 0x154c <DIO_u8GetPortValue+0x96>
    14fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1500:	3e 81       	ldd	r19, Y+6	; 0x06
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	a1 f0       	breq	.+40     	; 0x1530 <DIO_u8GetPortValue+0x7a>
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	83 30       	cpi	r24, 0x03	; 3
    150e:	91 05       	cpc	r25, r1
    1510:	b1 f0       	breq	.+44     	; 0x153e <DIO_u8GetPortValue+0x88>
    1512:	1c c0       	rjmp	.+56     	; 0x154c <DIO_u8GetPortValue+0x96>
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1514:	e9 e3       	ldi	r30, 0x39	; 57
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	eb 81       	ldd	r30, Y+3	; 0x03
    151c:	fc 81       	ldd	r31, Y+4	; 0x04
    151e:	80 83       	st	Z, r24
    1520:	18 c0       	rjmp	.+48     	; 0x1552 <DIO_u8GetPortValue+0x9c>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1522:	e6 e3       	ldi	r30, 0x36	; 54
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	eb 81       	ldd	r30, Y+3	; 0x03
    152a:	fc 81       	ldd	r31, Y+4	; 0x04
    152c:	80 83       	st	Z, r24
    152e:	11 c0       	rjmp	.+34     	; 0x1552 <DIO_u8GetPortValue+0x9c>
			break;
		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1530:	e3 e3       	ldi	r30, 0x33	; 51
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	eb 81       	ldd	r30, Y+3	; 0x03
    1538:	fc 81       	ldd	r31, Y+4	; 0x04
    153a:	80 83       	st	Z, r24
    153c:	0a c0       	rjmp	.+20     	; 0x1552 <DIO_u8GetPortValue+0x9c>
			break;
		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    153e:	e0 e3       	ldi	r30, 0x30	; 48
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	eb 81       	ldd	r30, Y+3	; 0x03
    1546:	fc 81       	ldd	r31, Y+4	; 0x04
    1548:	80 83       	st	Z, r24
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <DIO_u8GetPortValue+0x9c>
			break;

		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    154c:	19 82       	std	Y+1, r1	; 0x01
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <DIO_u8GetPortValue+0x9c>
			break;
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    1550:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1552:	89 81       	ldd	r24, Y+1	; 0x01
}
    1554:	26 96       	adiw	r28, 0x06	; 6
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <main>:
#include <util/delay.h>
/*MCAL*/
#include "DIO_interface.h"

int main(void)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	6c 97       	sbiw	r28, 0x1c	; 28
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61

	DIO_voidInit();
    157a:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidInit>

	while(1)
	{
		/*turn on led*/
		DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN7,DIO_u8_HIGH);
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	67 e0       	ldi	r22, 0x07	; 7
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_voidSetPinValue>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	aa ef       	ldi	r26, 0xFA	; 250
    158e:	b3 e4       	ldi	r27, 0x43	; 67
    1590:	89 8f       	std	Y+25, r24	; 0x19
    1592:	9a 8f       	std	Y+26, r25	; 0x1a
    1594:	ab 8f       	std	Y+27, r26	; 0x1b
    1596:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	69 8d       	ldd	r22, Y+25	; 0x19
    159a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    159c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    159e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	4a e7       	ldi	r20, 0x7A	; 122
    15a6:	53 e4       	ldi	r21, 0x43	; 67
    15a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	8d 8b       	std	Y+21, r24	; 0x15
    15b2:	9e 8b       	std	Y+22, r25	; 0x16
    15b4:	af 8b       	std	Y+23, r26	; 0x17
    15b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15b8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ba:	7e 89       	ldd	r23, Y+22	; 0x16
    15bc:	8f 89       	ldd	r24, Y+23	; 0x17
    15be:	98 8d       	ldd	r25, Y+24	; 0x18
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	2c f4       	brge	.+10     	; 0x15da <main+0x74>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9c 8b       	std	Y+20, r25	; 0x14
    15d6:	8b 8b       	std	Y+19, r24	; 0x13
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <main+0xf2>
	else if (__tmp > 65535)
    15da:	6d 89       	ldd	r22, Y+21	; 0x15
    15dc:	7e 89       	ldd	r23, Y+22	; 0x16
    15de:	8f 89       	ldd	r24, Y+23	; 0x17
    15e0:	98 8d       	ldd	r25, Y+24	; 0x18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	57 e4       	ldi	r21, 0x47	; 71
    15ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	4c f5       	brge	.+82     	; 0x1644 <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	69 8d       	ldd	r22, Y+25	; 0x19
    15f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9c 8b       	std	Y+20, r25	; 0x14
    1618:	8b 8b       	std	Y+19, r24	; 0x13
    161a:	0f c0       	rjmp	.+30     	; 0x163a <main+0xd4>
    161c:	89 e1       	ldi	r24, 0x19	; 25
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9a 8b       	std	Y+18, r25	; 0x12
    1622:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1624:	89 89       	ldd	r24, Y+17	; 0x11
    1626:	9a 89       	ldd	r25, Y+18	; 0x12
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <main+0xc2>
    162c:	9a 8b       	std	Y+18, r25	; 0x12
    162e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1630:	8b 89       	ldd	r24, Y+19	; 0x13
    1632:	9c 89       	ldd	r25, Y+20	; 0x14
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	9c 8b       	std	Y+20, r25	; 0x14
    1638:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	8b 89       	ldd	r24, Y+19	; 0x13
    163c:	9c 89       	ldd	r25, Y+20	; 0x14
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	69 f7       	brne	.-38     	; 0x161c <main+0xb6>
    1642:	14 c0       	rjmp	.+40     	; 0x166c <main+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	6d 89       	ldd	r22, Y+21	; 0x15
    1646:	7e 89       	ldd	r23, Y+22	; 0x16
    1648:	8f 89       	ldd	r24, Y+23	; 0x17
    164a:	98 8d       	ldd	r25, Y+24	; 0x18
    164c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	9c 8b       	std	Y+20, r25	; 0x14
    1656:	8b 8b       	std	Y+19, r24	; 0x13
    1658:	8b 89       	ldd	r24, Y+19	; 0x13
    165a:	9c 89       	ldd	r25, Y+20	; 0x14
    165c:	98 8b       	std	Y+16, r25	; 0x10
    165e:	8f 87       	std	Y+15, r24	; 0x0f
    1660:	8f 85       	ldd	r24, Y+15	; 0x0f
    1662:	98 89       	ldd	r25, Y+16	; 0x10
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <main+0xfe>
    1668:	98 8b       	std	Y+16, r25	; 0x10
    166a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);

		/*turn off led*/
			DIO_voidSetPinValue(DIO_u8_PORTC,DIO_u8_PIN7,DIO_u8_LOW);
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	67 e0       	ldi	r22, 0x07	; 7
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_voidSetPinValue>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	aa ef       	ldi	r26, 0xFA	; 250
    167c:	b3 e4       	ldi	r27, 0x43	; 67
    167e:	8b 87       	std	Y+11, r24	; 0x0b
    1680:	9c 87       	std	Y+12, r25	; 0x0c
    1682:	ad 87       	std	Y+13, r26	; 0x0d
    1684:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1686:	6b 85       	ldd	r22, Y+11	; 0x0b
    1688:	7c 85       	ldd	r23, Y+12	; 0x0c
    168a:	8d 85       	ldd	r24, Y+13	; 0x0d
    168c:	9e 85       	ldd	r25, Y+14	; 0x0e
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a e7       	ldi	r20, 0x7A	; 122
    1694:	53 e4       	ldi	r21, 0x43	; 67
    1696:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8f 83       	std	Y+7, r24	; 0x07
    16a0:	98 87       	std	Y+8, r25	; 0x08
    16a2:	a9 87       	std	Y+9, r26	; 0x09
    16a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a6:	6f 81       	ldd	r22, Y+7	; 0x07
    16a8:	78 85       	ldd	r23, Y+8	; 0x08
    16aa:	89 85       	ldd	r24, Y+9	; 0x09
    16ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e8       	ldi	r20, 0x80	; 128
    16b4:	5f e3       	ldi	r21, 0x3F	; 63
    16b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <main+0x162>
		__ticks = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	3f c0       	rjmp	.+126    	; 0x1746 <main+0x1e0>
	else if (__tmp > 65535)
    16c8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ca:	78 85       	ldd	r23, Y+8	; 0x08
    16cc:	89 85       	ldd	r24, Y+9	; 0x09
    16ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	57 e4       	ldi	r21, 0x47	; 71
    16d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	4c f5       	brge	.+82     	; 0x1732 <main+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <main+0x1c2>
    170a:	89 e1       	ldi	r24, 0x19	; 25
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	8b 83       	std	Y+3, r24	; 0x03
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <main+0x1b0>
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	69 f7       	brne	.-38     	; 0x170a <main+0x1a4>
    1730:	26 cf       	rjmp	.-436    	; 0x157e <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	78 85       	ldd	r23, Y+8	; 0x08
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
    173a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <main+0x1ec>
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	11 cf       	rjmp	.-478    	; 0x157e <main+0x18>

0000175c <LCD_voideInit>:
#include "LCD_config.h"
#include "LCD_interface.h"
#include "LCD_private.h"

void LCD_voideInit(void)
{
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	cc 54       	subi	r28, 0x4C	; 76
    176a:	d0 40       	sbci	r29, 0x00	; 0
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	fe 01       	movw	r30, r28
    1778:	e7 5b       	subi	r30, 0xB7	; 183
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	ac e0       	ldi	r26, 0x0C	; 12
    1782:	b2 e4       	ldi	r27, 0x42	; 66
    1784:	80 83       	st	Z, r24
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	a2 83       	std	Z+2, r26	; 0x02
    178a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178c:	8e 01       	movw	r16, r28
    178e:	0b 5b       	subi	r16, 0xBB	; 187
    1790:	1f 4f       	sbci	r17, 0xFF	; 255
    1792:	fe 01       	movw	r30, r28
    1794:	e7 5b       	subi	r30, 0xB7	; 183
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	4a e7       	ldi	r20, 0x7A	; 122
    17a6:	53 e4       	ldi	r21, 0x43	; 67
    17a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	f8 01       	movw	r30, r16
    17b2:	80 83       	st	Z, r24
    17b4:	91 83       	std	Z+1, r25	; 0x01
    17b6:	a2 83       	std	Z+2, r26	; 0x02
    17b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17ba:	fe 01       	movw	r30, r28
    17bc:	eb 5b       	subi	r30, 0xBB	; 187
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	5f e3       	ldi	r21, 0x3F	; 63
    17d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17d4:	88 23       	and	r24, r24
    17d6:	44 f4       	brge	.+16     	; 0x17e8 <LCD_voideInit+0x8c>
		__ticks = 1;
    17d8:	fe 01       	movw	r30, r28
    17da:	ed 5b       	subi	r30, 0xBD	; 189
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	91 83       	std	Z+1, r25	; 0x01
    17e4:	80 83       	st	Z, r24
    17e6:	64 c0       	rjmp	.+200    	; 0x18b0 <LCD_voideInit+0x154>
	else if (__tmp > 65535)
    17e8:	fe 01       	movw	r30, r28
    17ea:	eb 5b       	subi	r30, 0xBB	; 187
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	3f ef       	ldi	r19, 0xFF	; 255
    17fa:	4f e7       	ldi	r20, 0x7F	; 127
    17fc:	57 e4       	ldi	r21, 0x47	; 71
    17fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1802:	18 16       	cp	r1, r24
    1804:	0c f0       	brlt	.+2      	; 0x1808 <LCD_voideInit+0xac>
    1806:	43 c0       	rjmp	.+134    	; 0x188e <LCD_voideInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1808:	fe 01       	movw	r30, r28
    180a:	e7 5b       	subi	r30, 0xB7	; 183
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	8e 01       	movw	r16, r28
    1828:	0d 5b       	subi	r16, 0xBD	; 189
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	bc 01       	movw	r22, r24
    182e:	cd 01       	movw	r24, r26
    1830:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	f8 01       	movw	r30, r16
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	80 83       	st	Z, r24
    183e:	1f c0       	rjmp	.+62     	; 0x187e <LCD_voideInit+0x122>
    1840:	fe 01       	movw	r30, r28
    1842:	ef 5b       	subi	r30, 0xBF	; 191
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	89 e1       	ldi	r24, 0x19	; 25
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	91 83       	std	Z+1, r25	; 0x01
    184c:	80 83       	st	Z, r24
    184e:	fe 01       	movw	r30, r28
    1850:	ef 5b       	subi	r30, 0xBF	; 191
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 81       	ld	r24, Z
    1856:	91 81       	ldd	r25, Z+1	; 0x01
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <LCD_voideInit+0xfc>
    185c:	fe 01       	movw	r30, r28
    185e:	ef 5b       	subi	r30, 0xBF	; 191
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1866:	de 01       	movw	r26, r28
    1868:	ad 5b       	subi	r26, 0xBD	; 189
    186a:	bf 4f       	sbci	r27, 0xFF	; 255
    186c:	fe 01       	movw	r30, r28
    186e:	ed 5b       	subi	r30, 0xBD	; 189
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 81       	ld	r24, Z
    1874:	91 81       	ldd	r25, Z+1	; 0x01
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	11 96       	adiw	r26, 0x01	; 1
    187a:	9c 93       	st	X, r25
    187c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187e:	fe 01       	movw	r30, r28
    1880:	ed 5b       	subi	r30, 0xBD	; 189
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	d1 f6       	brne	.-76     	; 0x1840 <LCD_voideInit+0xe4>
    188c:	24 c0       	rjmp	.+72     	; 0x18d6 <LCD_voideInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188e:	8e 01       	movw	r16, r28
    1890:	0d 5b       	subi	r16, 0xBD	; 189
    1892:	1f 4f       	sbci	r17, 0xFF	; 255
    1894:	fe 01       	movw	r30, r28
    1896:	eb 5b       	subi	r30, 0xBB	; 187
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	93 81       	ldd	r25, Z+3	; 0x03
    18a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	f8 01       	movw	r30, r16
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
    18b0:	fe 01       	movw	r30, r28
    18b2:	ed 5b       	subi	r30, 0xBD	; 189
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	fe 01       	movw	r30, r28
    18bc:	ff 96       	adiw	r30, 0x3f	; 63
    18be:	91 83       	std	Z+1, r25	; 0x01
    18c0:	80 83       	st	Z, r24
    18c2:	fe 01       	movw	r30, r28
    18c4:	ff 96       	adiw	r30, 0x3f	; 63
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <LCD_voideInit+0x16e>
    18ce:	fe 01       	movw	r30, r28
    18d0:	ff 96       	adiw	r30, 0x3f	; 63
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
    _delay_ms(35);
    LCD_voidSendCmnd(0b00111000);
    18d6:	88 e3       	ldi	r24, 0x38	; 56
    18d8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_voidSendCmnd>
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a0 e2       	ldi	r26, 0x20	; 32
    18e2:	b2 e4       	ldi	r27, 0x42	; 66
    18e4:	8b af       	std	Y+59, r24	; 0x3b
    18e6:	9c af       	std	Y+60, r25	; 0x3c
    18e8:	ad af       	std	Y+61, r26	; 0x3d
    18ea:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18ec:	6b ad       	ldd	r22, Y+59	; 0x3b
    18ee:	7c ad       	ldd	r23, Y+60	; 0x3c
    18f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18f4:	2b ea       	ldi	r18, 0xAB	; 171
    18f6:	3a ea       	ldi	r19, 0xAA	; 170
    18f8:	4a ea       	ldi	r20, 0xAA	; 170
    18fa:	5e e3       	ldi	r21, 0x3E	; 62
    18fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	8f ab       	std	Y+55, r24	; 0x37
    1906:	98 af       	std	Y+56, r25	; 0x38
    1908:	a9 af       	std	Y+57, r26	; 0x39
    190a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    190c:	6f a9       	ldd	r22, Y+55	; 0x37
    190e:	78 ad       	ldd	r23, Y+56	; 0x38
    1910:	89 ad       	ldd	r24, Y+57	; 0x39
    1912:	9a ad       	ldd	r25, Y+58	; 0x3a
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e8       	ldi	r20, 0x80	; 128
    191a:	5f e3       	ldi	r21, 0x3F	; 63
    191c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1920:	88 23       	and	r24, r24
    1922:	1c f4       	brge	.+6      	; 0x192a <LCD_voideInit+0x1ce>
		__ticks = 1;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	8e ab       	std	Y+54, r24	; 0x36
    1928:	91 c0       	rjmp	.+290    	; 0x1a4c <LCD_voideInit+0x2f0>
	else if (__tmp > 255)
    192a:	6f a9       	ldd	r22, Y+55	; 0x37
    192c:	78 ad       	ldd	r23, Y+56	; 0x38
    192e:	89 ad       	ldd	r24, Y+57	; 0x39
    1930:	9a ad       	ldd	r25, Y+58	; 0x3a
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	4f e7       	ldi	r20, 0x7F	; 127
    1938:	53 e4       	ldi	r21, 0x43	; 67
    193a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    193e:	18 16       	cp	r1, r24
    1940:	0c f0       	brlt	.+2      	; 0x1944 <LCD_voideInit+0x1e8>
    1942:	7b c0       	rjmp	.+246    	; 0x1a3a <LCD_voideInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1944:	6b ad       	ldd	r22, Y+59	; 0x3b
    1946:	7c ad       	ldd	r23, Y+60	; 0x3c
    1948:	8d ad       	ldd	r24, Y+61	; 0x3d
    194a:	9e ad       	ldd	r25, Y+62	; 0x3e
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	4a e7       	ldi	r20, 0x7A	; 122
    1952:	54 e4       	ldi	r21, 0x44	; 68
    1954:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	8a ab       	std	Y+50, r24	; 0x32
    195e:	9b ab       	std	Y+51, r25	; 0x33
    1960:	ac ab       	std	Y+52, r26	; 0x34
    1962:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1964:	6a a9       	ldd	r22, Y+50	; 0x32
    1966:	7b a9       	ldd	r23, Y+51	; 0x33
    1968:	8c a9       	ldd	r24, Y+52	; 0x34
    196a:	9d a9       	ldd	r25, Y+53	; 0x35
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	4a e7       	ldi	r20, 0x7A	; 122
    1972:	53 e4       	ldi	r21, 0x43	; 67
    1974:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	8e a7       	std	Y+46, r24	; 0x2e
    197e:	9f a7       	std	Y+47, r25	; 0x2f
    1980:	a8 ab       	std	Y+48, r26	; 0x30
    1982:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1984:	6e a5       	ldd	r22, Y+46	; 0x2e
    1986:	7f a5       	ldd	r23, Y+47	; 0x2f
    1988:	88 a9       	ldd	r24, Y+48	; 0x30
    198a:	99 a9       	ldd	r25, Y+49	; 0x31
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e8       	ldi	r20, 0x80	; 128
    1992:	5f e3       	ldi	r21, 0x3F	; 63
    1994:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1998:	88 23       	and	r24, r24
    199a:	2c f4       	brge	.+10     	; 0x19a6 <LCD_voideInit+0x24a>
		__ticks = 1;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9d a7       	std	Y+45, r25	; 0x2d
    19a2:	8c a7       	std	Y+44, r24	; 0x2c
    19a4:	3f c0       	rjmp	.+126    	; 0x1a24 <LCD_voideInit+0x2c8>
	else if (__tmp > 65535)
    19a6:	6e a5       	ldd	r22, Y+46	; 0x2e
    19a8:	7f a5       	ldd	r23, Y+47	; 0x2f
    19aa:	88 a9       	ldd	r24, Y+48	; 0x30
    19ac:	99 a9       	ldd	r25, Y+49	; 0x31
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	3f ef       	ldi	r19, 0xFF	; 255
    19b2:	4f e7       	ldi	r20, 0x7F	; 127
    19b4:	57 e4       	ldi	r21, 0x47	; 71
    19b6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ba:	18 16       	cp	r1, r24
    19bc:	4c f5       	brge	.+82     	; 0x1a10 <LCD_voideInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19be:	6a a9       	ldd	r22, Y+50	; 0x32
    19c0:	7b a9       	ldd	r23, Y+51	; 0x33
    19c2:	8c a9       	ldd	r24, Y+52	; 0x34
    19c4:	9d a9       	ldd	r25, Y+53	; 0x35
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e2       	ldi	r20, 0x20	; 32
    19cc:	51 e4       	ldi	r21, 0x41	; 65
    19ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	9d a7       	std	Y+45, r25	; 0x2d
    19e4:	8c a7       	std	Y+44, r24	; 0x2c
    19e6:	0f c0       	rjmp	.+30     	; 0x1a06 <LCD_voideInit+0x2aa>
    19e8:	89 e1       	ldi	r24, 0x19	; 25
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	9b a7       	std	Y+43, r25	; 0x2b
    19ee:	8a a7       	std	Y+42, r24	; 0x2a
    19f0:	8a a5       	ldd	r24, Y+42	; 0x2a
    19f2:	9b a5       	ldd	r25, Y+43	; 0x2b
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <LCD_voideInit+0x298>
    19f8:	9b a7       	std	Y+43, r25	; 0x2b
    19fa:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fc:	8c a5       	ldd	r24, Y+44	; 0x2c
    19fe:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	9d a7       	std	Y+45, r25	; 0x2d
    1a04:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a06:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a08:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	69 f7       	brne	.-38     	; 0x19e8 <LCD_voideInit+0x28c>
    1a0e:	24 c0       	rjmp	.+72     	; 0x1a58 <LCD_voideInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a10:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a12:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a14:	88 a9       	ldd	r24, Y+48	; 0x30
    1a16:	99 a9       	ldd	r25, Y+49	; 0x31
    1a18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	9d a7       	std	Y+45, r25	; 0x2d
    1a22:	8c a7       	std	Y+44, r24	; 0x2c
    1a24:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a26:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a28:	99 a7       	std	Y+41, r25	; 0x29
    1a2a:	88 a7       	std	Y+40, r24	; 0x28
    1a2c:	88 a5       	ldd	r24, Y+40	; 0x28
    1a2e:	99 a5       	ldd	r25, Y+41	; 0x29
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <LCD_voideInit+0x2d4>
    1a34:	99 a7       	std	Y+41, r25	; 0x29
    1a36:	88 a7       	std	Y+40, r24	; 0x28
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <LCD_voideInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a3a:	6f a9       	ldd	r22, Y+55	; 0x37
    1a3c:	78 ad       	ldd	r23, Y+56	; 0x38
    1a3e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a40:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	8e ab       	std	Y+54, r24	; 0x36
    1a4c:	8e a9       	ldd	r24, Y+54	; 0x36
    1a4e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a50:	8f a1       	ldd	r24, Y+39	; 0x27
    1a52:	8a 95       	dec	r24
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_voideInit+0x2f6>
    1a56:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_voidSendCmnd(0b00001111);
    1a58:	8f e0       	ldi	r24, 0x0F	; 15
    1a5a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_voidSendCmnd>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a0 e2       	ldi	r26, 0x20	; 32
    1a64:	b2 e4       	ldi	r27, 0x42	; 66
    1a66:	8b a3       	std	Y+35, r24	; 0x23
    1a68:	9c a3       	std	Y+36, r25	; 0x24
    1a6a:	ad a3       	std	Y+37, r26	; 0x25
    1a6c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a70:	7c a1       	ldd	r23, Y+36	; 0x24
    1a72:	8d a1       	ldd	r24, Y+37	; 0x25
    1a74:	9e a1       	ldd	r25, Y+38	; 0x26
    1a76:	2b ea       	ldi	r18, 0xAB	; 171
    1a78:	3a ea       	ldi	r19, 0xAA	; 170
    1a7a:	4a ea       	ldi	r20, 0xAA	; 170
    1a7c:	5e e3       	ldi	r21, 0x3E	; 62
    1a7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	8f 8f       	std	Y+31, r24	; 0x1f
    1a88:	98 a3       	std	Y+32, r25	; 0x20
    1a8a:	a9 a3       	std	Y+33, r26	; 0x21
    1a8c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1a8e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a90:	78 a1       	ldd	r23, Y+32	; 0x20
    1a92:	89 a1       	ldd	r24, Y+33	; 0x21
    1a94:	9a a1       	ldd	r25, Y+34	; 0x22
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e8       	ldi	r20, 0x80	; 128
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	1c f4       	brge	.+6      	; 0x1aac <LCD_voideInit+0x350>
		__ticks = 1;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	8e 8f       	std	Y+30, r24	; 0x1e
    1aaa:	91 c0       	rjmp	.+290    	; 0x1bce <LCD_voideInit+0x472>
	else if (__tmp > 255)
    1aac:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1aae:	78 a1       	ldd	r23, Y+32	; 0x20
    1ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4f e7       	ldi	r20, 0x7F	; 127
    1aba:	53 e4       	ldi	r21, 0x43	; 67
    1abc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ac0:	18 16       	cp	r1, r24
    1ac2:	0c f0       	brlt	.+2      	; 0x1ac6 <LCD_voideInit+0x36a>
    1ac4:	7b c0       	rjmp	.+246    	; 0x1bbc <LCD_voideInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1ac6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac8:	7c a1       	ldd	r23, Y+36	; 0x24
    1aca:	8d a1       	ldd	r24, Y+37	; 0x25
    1acc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4a e7       	ldi	r20, 0x7A	; 122
    1ad4:	54 e4       	ldi	r21, 0x44	; 68
    1ad6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	8a 8f       	std	Y+26, r24	; 0x1a
    1ae0:	9b 8f       	std	Y+27, r25	; 0x1b
    1ae2:	ac 8f       	std	Y+28, r26	; 0x1c
    1ae4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ae8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1aea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1aec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	4a e7       	ldi	r20, 0x7A	; 122
    1af4:	53 e4       	ldi	r21, 0x43	; 67
    1af6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	8e 8b       	std	Y+22, r24	; 0x16
    1b00:	9f 8b       	std	Y+23, r25	; 0x17
    1b02:	a8 8f       	std	Y+24, r26	; 0x18
    1b04:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b06:	6e 89       	ldd	r22, Y+22	; 0x16
    1b08:	7f 89       	ldd	r23, Y+23	; 0x17
    1b0a:	88 8d       	ldd	r24, Y+24	; 0x18
    1b0c:	99 8d       	ldd	r25, Y+25	; 0x19
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e8       	ldi	r20, 0x80	; 128
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b1a:	88 23       	and	r24, r24
    1b1c:	2c f4       	brge	.+10     	; 0x1b28 <LCD_voideInit+0x3cc>
		__ticks = 1;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9d 8b       	std	Y+21, r25	; 0x15
    1b24:	8c 8b       	std	Y+20, r24	; 0x14
    1b26:	3f c0       	rjmp	.+126    	; 0x1ba6 <LCD_voideInit+0x44a>
	else if (__tmp > 65535)
    1b28:	6e 89       	ldd	r22, Y+22	; 0x16
    1b2a:	7f 89       	ldd	r23, Y+23	; 0x17
    1b2c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b2e:	99 8d       	ldd	r25, Y+25	; 0x19
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	3f ef       	ldi	r19, 0xFF	; 255
    1b34:	4f e7       	ldi	r20, 0x7F	; 127
    1b36:	57 e4       	ldi	r21, 0x47	; 71
    1b38:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b3c:	18 16       	cp	r1, r24
    1b3e:	4c f5       	brge	.+82     	; 0x1b92 <LCD_voideInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b40:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b42:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b44:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b46:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e2       	ldi	r20, 0x20	; 32
    1b4e:	51 e4       	ldi	r21, 0x41	; 65
    1b50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9d 8b       	std	Y+21, r25	; 0x15
    1b66:	8c 8b       	std	Y+20, r24	; 0x14
    1b68:	0f c0       	rjmp	.+30     	; 0x1b88 <LCD_voideInit+0x42c>
    1b6a:	89 e1       	ldi	r24, 0x19	; 25
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9b 8b       	std	Y+19, r25	; 0x13
    1b70:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b72:	8a 89       	ldd	r24, Y+18	; 0x12
    1b74:	9b 89       	ldd	r25, Y+19	; 0x13
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <LCD_voideInit+0x41a>
    1b7a:	9b 8b       	std	Y+19, r25	; 0x13
    1b7c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7e:	8c 89       	ldd	r24, Y+20	; 0x14
    1b80:	9d 89       	ldd	r25, Y+21	; 0x15
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	9d 8b       	std	Y+21, r25	; 0x15
    1b86:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b88:	8c 89       	ldd	r24, Y+20	; 0x14
    1b8a:	9d 89       	ldd	r25, Y+21	; 0x15
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	69 f7       	brne	.-38     	; 0x1b6a <LCD_voideInit+0x40e>
    1b90:	24 c0       	rjmp	.+72     	; 0x1bda <LCD_voideInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b92:	6e 89       	ldd	r22, Y+22	; 0x16
    1b94:	7f 89       	ldd	r23, Y+23	; 0x17
    1b96:	88 8d       	ldd	r24, Y+24	; 0x18
    1b98:	99 8d       	ldd	r25, Y+25	; 0x19
    1b9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	9d 8b       	std	Y+21, r25	; 0x15
    1ba4:	8c 8b       	std	Y+20, r24	; 0x14
    1ba6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ba8:	9d 89       	ldd	r25, Y+21	; 0x15
    1baa:	99 8b       	std	Y+17, r25	; 0x11
    1bac:	88 8b       	std	Y+16, r24	; 0x10
    1bae:	88 89       	ldd	r24, Y+16	; 0x10
    1bb0:	99 89       	ldd	r25, Y+17	; 0x11
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <LCD_voideInit+0x456>
    1bb6:	99 8b       	std	Y+17, r25	; 0x11
    1bb8:	88 8b       	std	Y+16, r24	; 0x10
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <LCD_voideInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bbc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bbe:	78 a1       	ldd	r23, Y+32	; 0x20
    1bc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8e 8f       	std	Y+30, r24	; 0x1e
    1bce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bd0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd4:	8a 95       	dec	r24
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_voideInit+0x478>
    1bd8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_voidSendCmnd(0x01);
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_voidSendCmnd>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 ea       	ldi	r26, 0xA0	; 160
    1be6:	b0 e4       	ldi	r27, 0x40	; 64
    1be8:	8b 87       	std	Y+11, r24	; 0x0b
    1bea:	9c 87       	std	Y+12, r25	; 0x0c
    1bec:	ad 87       	std	Y+13, r26	; 0x0d
    1bee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a e7       	ldi	r20, 0x7A	; 122
    1bfe:	53 e4       	ldi	r21, 0x43	; 67
    1c00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	8f 83       	std	Y+7, r24	; 0x07
    1c0a:	98 87       	std	Y+8, r25	; 0x08
    1c0c:	a9 87       	std	Y+9, r26	; 0x09
    1c0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c10:	6f 81       	ldd	r22, Y+7	; 0x07
    1c12:	78 85       	ldd	r23, Y+8	; 0x08
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <LCD_voideInit+0x4d6>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <LCD_voideInit+0x554>
	else if (__tmp > 65535)
    1c32:	6f 81       	ldd	r22, Y+7	; 0x07
    1c34:	78 85       	ldd	r23, Y+8	; 0x08
    1c36:	89 85       	ldd	r24, Y+9	; 0x09
    1c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <LCD_voideInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <LCD_voideInit+0x536>
    1c74:	89 e1       	ldi	r24, 0x19	; 25
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_voideInit+0x524>
    1c84:	9c 83       	std	Y+4, r25	; 0x04
    1c86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	9e 83       	std	Y+6, r25	; 0x06
    1c90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	9e 81       	ldd	r25, Y+6	; 0x06
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <LCD_voideInit+0x518>
    1c9a:	14 c0       	rjmp	.+40     	; 0x1cc4 <LCD_voideInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	9e 83       	std	Y+6, r25	; 0x06
    1cae:	8d 83       	std	Y+5, r24	; 0x05
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_voideInit+0x560>
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
    LCD_voidSendCmnd(0b00000110);
    1cc4:	86 e0       	ldi	r24, 0x06	; 6
    1cc6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_voidSendCmnd>

}
    1cca:	c4 5b       	subi	r28, 0xB4	; 180
    1ccc:	df 4f       	sbci	r29, 0xFF	; 255
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	08 95       	ret

00001ce2 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	69 97       	sbiw	r28, 0x19	; 25
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	89 8f       	std	Y+25, r24	; 0x19
    /* Rs = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_voidSetPinValue>

    /*Rw = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_voidSetPinValue>

    /*Write Command*/
    DIO_u8SetPortValue(DIO_u8_PORTD,Copy_u8Cmnd);
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d10:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8SetPortValue>

    /*E = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_HIGH);
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	62 e0       	ldi	r22, 0x02	; 2
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_voidSetPinValue>
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	a0 e8       	ldi	r26, 0x80	; 128
    1d24:	bf e3       	ldi	r27, 0x3F	; 63
    1d26:	8d 8b       	std	Y+21, r24	; 0x15
    1d28:	9e 8b       	std	Y+22, r25	; 0x16
    1d2a:	af 8b       	std	Y+23, r26	; 0x17
    1d2c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d30:	7e 89       	ldd	r23, Y+22	; 0x16
    1d32:	8f 89       	ldd	r24, Y+23	; 0x17
    1d34:	98 8d       	ldd	r25, Y+24	; 0x18
    1d36:	2b ea       	ldi	r18, 0xAB	; 171
    1d38:	3a ea       	ldi	r19, 0xAA	; 170
    1d3a:	4a ea       	ldi	r20, 0xAA	; 170
    1d3c:	5e e3       	ldi	r21, 0x3E	; 62
    1d3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	89 8b       	std	Y+17, r24	; 0x11
    1d48:	9a 8b       	std	Y+18, r25	; 0x12
    1d4a:	ab 8b       	std	Y+19, r26	; 0x13
    1d4c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d4e:	69 89       	ldd	r22, Y+17	; 0x11
    1d50:	7a 89       	ldd	r23, Y+18	; 0x12
    1d52:	8b 89       	ldd	r24, Y+19	; 0x13
    1d54:	9c 89       	ldd	r25, Y+20	; 0x14
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e8       	ldi	r20, 0x80	; 128
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d62:	88 23       	and	r24, r24
    1d64:	1c f4       	brge	.+6      	; 0x1d6c <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	88 8b       	std	Y+16, r24	; 0x10
    1d6a:	91 c0       	rjmp	.+290    	; 0x1e8e <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1d6c:	69 89       	ldd	r22, Y+17	; 0x11
    1d6e:	7a 89       	ldd	r23, Y+18	; 0x12
    1d70:	8b 89       	ldd	r24, Y+19	; 0x13
    1d72:	9c 89       	ldd	r25, Y+20	; 0x14
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4f e7       	ldi	r20, 0x7F	; 127
    1d7a:	53 e4       	ldi	r21, 0x43	; 67
    1d7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d80:	18 16       	cp	r1, r24
    1d82:	0c f0       	brlt	.+2      	; 0x1d86 <LCD_voidSendCmnd+0xa4>
    1d84:	7b c0       	rjmp	.+246    	; 0x1e7c <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1d86:	6d 89       	ldd	r22, Y+21	; 0x15
    1d88:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4a e7       	ldi	r20, 0x7A	; 122
    1d94:	54 e4       	ldi	r21, 0x44	; 68
    1d96:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	8c 87       	std	Y+12, r24	; 0x0c
    1da0:	9d 87       	std	Y+13, r25	; 0x0d
    1da2:	ae 87       	std	Y+14, r26	; 0x0e
    1da4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1da8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1daa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dac:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	4a e7       	ldi	r20, 0x7A	; 122
    1db4:	53 e4       	ldi	r21, 0x43	; 67
    1db6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	88 87       	std	Y+8, r24	; 0x08
    1dc0:	99 87       	std	Y+9, r25	; 0x09
    1dc2:	aa 87       	std	Y+10, r26	; 0x0a
    1dc4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1dc6:	68 85       	ldd	r22, Y+8	; 0x08
    1dc8:	79 85       	ldd	r23, Y+9	; 0x09
    1dca:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dcc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e8       	ldi	r20, 0x80	; 128
    1dd4:	5f e3       	ldi	r21, 0x3F	; 63
    1dd6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dda:	88 23       	and	r24, r24
    1ddc:	2c f4       	brge	.+10     	; 0x1de8 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9f 83       	std	Y+7, r25	; 0x07
    1de4:	8e 83       	std	Y+6, r24	; 0x06
    1de6:	3f c0       	rjmp	.+126    	; 0x1e66 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1de8:	68 85       	ldd	r22, Y+8	; 0x08
    1dea:	79 85       	ldd	r23, Y+9	; 0x09
    1dec:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dee:	9b 85       	ldd	r25, Y+11	; 0x0b
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	3f ef       	ldi	r19, 0xFF	; 255
    1df4:	4f e7       	ldi	r20, 0x7F	; 127
    1df6:	57 e4       	ldi	r21, 0x47	; 71
    1df8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dfc:	18 16       	cp	r1, r24
    1dfe:	4c f5       	brge	.+82     	; 0x1e52 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e00:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e02:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e04:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e06:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e2       	ldi	r20, 0x20	; 32
    1e0e:	51 e4       	ldi	r21, 0x41	; 65
    1e10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	bc 01       	movw	r22, r24
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9f 83       	std	Y+7, r25	; 0x07
    1e26:	8e 83       	std	Y+6, r24	; 0x06
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <LCD_voidSendCmnd+0x166>
    1e2a:	89 e1       	ldi	r24, 0x19	; 25
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	9d 83       	std	Y+5, r25	; 0x05
    1e30:	8c 83       	std	Y+4, r24	; 0x04
    1e32:	8c 81       	ldd	r24, Y+4	; 0x04
    1e34:	9d 81       	ldd	r25, Y+5	; 0x05
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <LCD_voidSendCmnd+0x154>
    1e3a:	9d 83       	std	Y+5, r25	; 0x05
    1e3c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e40:	9f 81       	ldd	r25, Y+7	; 0x07
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	9f 83       	std	Y+7, r25	; 0x07
    1e46:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e48:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	69 f7       	brne	.-38     	; 0x1e2a <LCD_voidSendCmnd+0x148>
    1e50:	24 c0       	rjmp	.+72     	; 0x1e9a <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e52:	68 85       	ldd	r22, Y+8	; 0x08
    1e54:	79 85       	ldd	r23, Y+9	; 0x09
    1e56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e58:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	9f 83       	std	Y+7, r25	; 0x07
    1e64:	8e 83       	std	Y+6, r24	; 0x06
    1e66:	8e 81       	ldd	r24, Y+6	; 0x06
    1e68:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6a:	9b 83       	std	Y+3, r25	; 0x03
    1e6c:	8a 83       	std	Y+2, r24	; 0x02
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	9b 81       	ldd	r25, Y+3	; 0x03
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_voidSendCmnd+0x190>
    1e76:	9b 83       	std	Y+3, r25	; 0x03
    1e78:	8a 83       	std	Y+2, r24	; 0x02
    1e7a:	0f c0       	rjmp	.+30     	; 0x1e9a <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e7c:	69 89       	ldd	r22, Y+17	; 0x11
    1e7e:	7a 89       	ldd	r23, Y+18	; 0x12
    1e80:	8b 89       	ldd	r24, Y+19	; 0x13
    1e82:	9c 89       	ldd	r25, Y+20	; 0x14
    1e84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	88 8b       	std	Y+16, r24	; 0x10
    1e8e:	88 89       	ldd	r24, Y+16	; 0x10
    1e90:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	8a 95       	dec	r24
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <LCD_voidSendCmnd+0x1b2>
    1e98:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);

    /*E = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_LOW);
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	62 e0       	ldi	r22, 0x02	; 2
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_voidSetPinValue>
}
    1ea4:	69 96       	adiw	r28, 0x19	; 25
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	69 97       	sbiw	r28, 0x19	; 25
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	89 8f       	std	Y+25, r24	; 0x19
     /* Rs = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_voidSetPinValue>

    /*Rw = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_voidSetPinValue>

    /*Write Command*/
    DIO_u8SetPortValue(DIO_u8_PORTD,Copy_u8Char);
    1ee0:	83 e0       	ldi	r24, 0x03	; 3
    1ee2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee4:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8SetPortValue>

    /*E = 1*/
    DIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_HIGH);
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	62 e0       	ldi	r22, 0x02	; 2
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_voidSetPinValue>
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	a0 e8       	ldi	r26, 0x80	; 128
    1ef8:	bf e3       	ldi	r27, 0x3F	; 63
    1efa:	8d 8b       	std	Y+21, r24	; 0x15
    1efc:	9e 8b       	std	Y+22, r25	; 0x16
    1efe:	af 8b       	std	Y+23, r26	; 0x17
    1f00:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f02:	6d 89       	ldd	r22, Y+21	; 0x15
    1f04:	7e 89       	ldd	r23, Y+22	; 0x16
    1f06:	8f 89       	ldd	r24, Y+23	; 0x17
    1f08:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0a:	2b ea       	ldi	r18, 0xAB	; 171
    1f0c:	3a ea       	ldi	r19, 0xAA	; 170
    1f0e:	4a ea       	ldi	r20, 0xAA	; 170
    1f10:	5e e3       	ldi	r21, 0x3E	; 62
    1f12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	89 8b       	std	Y+17, r24	; 0x11
    1f1c:	9a 8b       	std	Y+18, r25	; 0x12
    1f1e:	ab 8b       	std	Y+19, r26	; 0x13
    1f20:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f22:	69 89       	ldd	r22, Y+17	; 0x11
    1f24:	7a 89       	ldd	r23, Y+18	; 0x12
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e8       	ldi	r20, 0x80	; 128
    1f30:	5f e3       	ldi	r21, 0x3F	; 63
    1f32:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f36:	88 23       	and	r24, r24
    1f38:	1c f4       	brge	.+6      	; 0x1f40 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	88 8b       	std	Y+16, r24	; 0x10
    1f3e:	91 c0       	rjmp	.+290    	; 0x2062 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    1f40:	69 89       	ldd	r22, Y+17	; 0x11
    1f42:	7a 89       	ldd	r23, Y+18	; 0x12
    1f44:	8b 89       	ldd	r24, Y+19	; 0x13
    1f46:	9c 89       	ldd	r25, Y+20	; 0x14
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4f e7       	ldi	r20, 0x7F	; 127
    1f4e:	53 e4       	ldi	r21, 0x43	; 67
    1f50:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f54:	18 16       	cp	r1, r24
    1f56:	0c f0       	brlt	.+2      	; 0x1f5a <LCD_voidSendChar+0xa4>
    1f58:	7b c0       	rjmp	.+246    	; 0x2050 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1f5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f60:	98 8d       	ldd	r25, Y+24	; 0x18
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	4a e7       	ldi	r20, 0x7A	; 122
    1f68:	54 e4       	ldi	r21, 0x44	; 68
    1f6a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	8c 87       	std	Y+12, r24	; 0x0c
    1f74:	9d 87       	std	Y+13, r25	; 0x0d
    1f76:	ae 87       	std	Y+14, r26	; 0x0e
    1f78:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f7c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f80:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	4a e7       	ldi	r20, 0x7A	; 122
    1f88:	53 e4       	ldi	r21, 0x43	; 67
    1f8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	88 87       	std	Y+8, r24	; 0x08
    1f94:	99 87       	std	Y+9, r25	; 0x09
    1f96:	aa 87       	std	Y+10, r26	; 0x0a
    1f98:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f9a:	68 85       	ldd	r22, Y+8	; 0x08
    1f9c:	79 85       	ldd	r23, Y+9	; 0x09
    1f9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fa0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e8       	ldi	r20, 0x80	; 128
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fae:	88 23       	and	r24, r24
    1fb0:	2c f4       	brge	.+10     	; 0x1fbc <LCD_voidSendChar+0x106>
		__ticks = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9f 83       	std	Y+7, r25	; 0x07
    1fb8:	8e 83       	std	Y+6, r24	; 0x06
    1fba:	3f c0       	rjmp	.+126    	; 0x203a <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    1fbc:	68 85       	ldd	r22, Y+8	; 0x08
    1fbe:	79 85       	ldd	r23, Y+9	; 0x09
    1fc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	3f ef       	ldi	r19, 0xFF	; 255
    1fc8:	4f e7       	ldi	r20, 0x7F	; 127
    1fca:	57 e4       	ldi	r21, 0x47	; 71
    1fcc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fd0:	18 16       	cp	r1, r24
    1fd2:	4c f5       	brge	.+82     	; 0x2026 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fd6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fd8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fda:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e2       	ldi	r20, 0x20	; 32
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9f 83       	std	Y+7, r25	; 0x07
    1ffa:	8e 83       	std	Y+6, r24	; 0x06
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <LCD_voidSendChar+0x166>
    1ffe:	89 e1       	ldi	r24, 0x19	; 25
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9d 83       	std	Y+5, r25	; 0x05
    2004:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	9d 81       	ldd	r25, Y+5	; 0x05
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_voidSendChar+0x154>
    200e:	9d 83       	std	Y+5, r25	; 0x05
    2010:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2012:	8e 81       	ldd	r24, Y+6	; 0x06
    2014:	9f 81       	ldd	r25, Y+7	; 0x07
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	9f 83       	std	Y+7, r25	; 0x07
    201a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	8e 81       	ldd	r24, Y+6	; 0x06
    201e:	9f 81       	ldd	r25, Y+7	; 0x07
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f7       	brne	.-38     	; 0x1ffe <LCD_voidSendChar+0x148>
    2024:	24 c0       	rjmp	.+72     	; 0x206e <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2026:	68 85       	ldd	r22, Y+8	; 0x08
    2028:	79 85       	ldd	r23, Y+9	; 0x09
    202a:	8a 85       	ldd	r24, Y+10	; 0x0a
    202c:	9b 85       	ldd	r25, Y+11	; 0x0b
    202e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9f 83       	std	Y+7, r25	; 0x07
    2038:	8e 83       	std	Y+6, r24	; 0x06
    203a:	8e 81       	ldd	r24, Y+6	; 0x06
    203c:	9f 81       	ldd	r25, Y+7	; 0x07
    203e:	9b 83       	std	Y+3, r25	; 0x03
    2040:	8a 83       	std	Y+2, r24	; 0x02
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	9b 81       	ldd	r25, Y+3	; 0x03
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_voidSendChar+0x190>
    204a:	9b 83       	std	Y+3, r25	; 0x03
    204c:	8a 83       	std	Y+2, r24	; 0x02
    204e:	0f c0       	rjmp	.+30     	; 0x206e <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2050:	69 89       	ldd	r22, Y+17	; 0x11
    2052:	7a 89       	ldd	r23, Y+18	; 0x12
    2054:	8b 89       	ldd	r24, Y+19	; 0x13
    2056:	9c 89       	ldd	r25, Y+20	; 0x14
    2058:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	88 8b       	std	Y+16, r24	; 0x10
    2062:	88 89       	ldd	r24, Y+16	; 0x10
    2064:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	8a 95       	dec	r24
    206a:	f1 f7       	brne	.-4      	; 0x2068 <LCD_voidSendChar+0x1b2>
    206c:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);

    /*E = 0*/
    DIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_LOW);
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	62 e0       	ldi	r22, 0x02	; 2
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	0e 94 90 07 	call	0xf20	; 0xf20 <DIO_voidSetPinValue>

}
    2078:	69 96       	adiw	r28, 0x19	; 25
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <LCD_u8GoToXY>:


u8 LCD_u8GoToXY(u8 COPY_u8LineNum,u8 Copy_u8location)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <LCD_u8GoToXY+0x6>
    2090:	00 d0       	rcall	.+0      	; 0x2092 <LCD_u8GoToXY+0x8>
    2092:	0f 92       	push	r0
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	8a 83       	std	Y+2, r24	; 0x02
    209a:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Errorstate=STD_TYPES_OK;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	89 83       	std	Y+1, r24	; 0x01
    if(COPY_u8LineNum<=39){
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	88 32       	cpi	r24, 0x28	; 40
    20a4:	e8 f4       	brcc	.+58     	; 0x20e0 <LCD_u8GoToXY+0x56>
    switch(COPY_u8LineNum)
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	3d 83       	std	Y+5, r19	; 0x05
    20ae:	2c 83       	std	Y+4, r18	; 0x04
    20b0:	8c 81       	ldd	r24, Y+4	; 0x04
    20b2:	9d 81       	ldd	r25, Y+5	; 0x05
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	91 05       	cpc	r25, r1
    20b8:	31 f0       	breq	.+12     	; 0x20c6 <LCD_u8GoToXY+0x3c>
    20ba:	2c 81       	ldd	r18, Y+4	; 0x04
    20bc:	3d 81       	ldd	r19, Y+5	; 0x05
    20be:	22 30       	cpi	r18, 0x02	; 2
    20c0:	31 05       	cpc	r19, r1
    20c2:	31 f0       	breq	.+12     	; 0x20d0 <LCD_u8GoToXY+0x46>
    20c4:	0a c0       	rjmp	.+20     	; 0x20da <LCD_u8GoToXY+0x50>
    {
        case LCD_u8_LINE1: LCD_voidSendCmnd(0x80+Copy_u8location);  break;
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	80 58       	subi	r24, 0x80	; 128
    20ca:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_voidSendCmnd>
    20ce:	0a c0       	rjmp	.+20     	; 0x20e4 <LCD_u8GoToXY+0x5a>
        case LCD_u8_LINE2: LCD_voidSendCmnd(0xC0+Copy_u8location);  break;
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	80 54       	subi	r24, 0x40	; 64
    20d4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_voidSendCmnd>
    20d8:	05 c0       	rjmp	.+10     	; 0x20e4 <LCD_u8GoToXY+0x5a>
        default :  local_u8Errorstate=STD_TYPES_OK;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <LCD_u8GoToXY+0x5a>
    }
}
else { local_u8Errorstate=STD_TYPES_OK;}
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	89 83       	std	Y+1, r24	; 0x01
return local_u8Errorstate;}
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <__prologue_saves__>:
    20f6:	2f 92       	push	r2
    20f8:	3f 92       	push	r3
    20fa:	4f 92       	push	r4
    20fc:	5f 92       	push	r5
    20fe:	6f 92       	push	r6
    2100:	7f 92       	push	r7
    2102:	8f 92       	push	r8
    2104:	9f 92       	push	r9
    2106:	af 92       	push	r10
    2108:	bf 92       	push	r11
    210a:	cf 92       	push	r12
    210c:	df 92       	push	r13
    210e:	ef 92       	push	r14
    2110:	ff 92       	push	r15
    2112:	0f 93       	push	r16
    2114:	1f 93       	push	r17
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	ca 1b       	sub	r28, r26
    2120:	db 0b       	sbc	r29, r27
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	09 94       	ijmp

0000212e <__epilogue_restores__>:
    212e:	2a 88       	ldd	r2, Y+18	; 0x12
    2130:	39 88       	ldd	r3, Y+17	; 0x11
    2132:	48 88       	ldd	r4, Y+16	; 0x10
    2134:	5f 84       	ldd	r5, Y+15	; 0x0f
    2136:	6e 84       	ldd	r6, Y+14	; 0x0e
    2138:	7d 84       	ldd	r7, Y+13	; 0x0d
    213a:	8c 84       	ldd	r8, Y+12	; 0x0c
    213c:	9b 84       	ldd	r9, Y+11	; 0x0b
    213e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2140:	b9 84       	ldd	r11, Y+9	; 0x09
    2142:	c8 84       	ldd	r12, Y+8	; 0x08
    2144:	df 80       	ldd	r13, Y+7	; 0x07
    2146:	ee 80       	ldd	r14, Y+6	; 0x06
    2148:	fd 80       	ldd	r15, Y+5	; 0x05
    214a:	0c 81       	ldd	r16, Y+4	; 0x04
    214c:	1b 81       	ldd	r17, Y+3	; 0x03
    214e:	aa 81       	ldd	r26, Y+2	; 0x02
    2150:	b9 81       	ldd	r27, Y+1	; 0x01
    2152:	ce 0f       	add	r28, r30
    2154:	d1 1d       	adc	r29, r1
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
    2160:	ed 01       	movw	r28, r26
    2162:	08 95       	ret

00002164 <_exit>:
    2164:	f8 94       	cli

00002166 <__stop_program>:
    2166:	ff cf       	rjmp	.-2      	; 0x2166 <__stop_program>
